<?xml version="1.0"?>
<testsuite name="Firefox 56.0.0 (Mac OS X 10.12.0)" package="" timestamp="2017-11-07T10:05:07" id="0" hostname="ringel-osx" tests="3747" errors="0" failures="0" time="32.128">
  <properties>
    <property name="browser.fullName" value="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:56.0) Gecko/20100101 Firefox/56.0"/>
    <property name="module.name" value="@coralui/coralui"/>
    <property name="module.version" value="4.0.0-beta.1"/>
  </properties>
  <testcase name="#extend should combine properties" time="0.003" classname="Coral.commons"/>
  <testcase name="#augment should not overwrite properties" time="0.001" classname="Coral.commons"/>
  <testcase name="#augment should support multiple source objects" time="0.001" classname="Coral.commons"/>
  <testcase name="#augment should not modify source objects" time="0" classname="Coral.commons"/>
  <testcase name="#augment should call the callback for collisions and assign its return value" time="0.001" classname="Coral.commons"/>
  <testcase name="#augment should not assign the return value of the callback if it is undefined" time="0.002" classname="Coral.commons"/>
  <testcase name="#getUID should return unique IDs" time="0" classname="Coral.commons"/>
  <testcase name="#setSubProperty should set immediate properties" time="0" classname="Coral.commons"/>
  <testcase name="#setSubProperty should assign nested properties" time="0" classname="Coral.commons"/>
  <testcase name="#getSubProperty should get immediate properties" time="0" classname="Coral.commons"/>
  <testcase name="#getSubProperty should get undefined immediate properties" time="0" classname="Coral.commons"/>
  <testcase name="#getSubProperty should get nested properties" time="0" classname="Coral.commons"/>
  <testcase name="#getSubProperty should get undefined nested properties" time="0" classname="Coral.commons"/>
  <testcase name="#swapKeysAndValues should swap the keys and values of an object" time="0" classname="Coral.commons"/>
  <testcase name="#callAll should call all provided functions in order and return the specified index" time="0.002" classname="Coral.commons"/>
  <testcase name="#callAll should ignore non-function arguments and assume index is relative to arguments" time="0.001" classname="Coral.commons"/>
  <testcase name="#callAll should return the return value of the 0th function if nth not provided" time="0" classname="Coral.commons"/>
  <testcase name="#callAll should just return the return value of the function if only one function provided" time="0" classname="Coral.commons"/>
  <testcase name="#callAll should return the return value of the first valid function if nth argument is not a function" time="0" classname="Coral.commons"/>
  <testcase name="#callAll should still return a function if no functions provided" time="0" classname="Coral.commons"/>
  <testcase name="#ready should call the callback when all components are ready" time="0.002" classname="Coral.commons"/>
  <testcase name="#ready should call the callback when all subcomponents components are ready (recursively)" time="0.001" classname="Coral.commons"/>
  <testcase name="#ready should work with custom elements that use is=&quot;&quot;" time="0" classname="Coral.commons"/>
  <testcase name="#ready should pass the element to the callback" time="0" classname="Coral.commons"/>
  <testcase name="#ready should pass window to the callback when no element is passed" time="0" classname="Coral.commons"/>
  <testcase name="#ready should work with normal custom elements and some that use is=&quot;...&quot;" time="0.001" classname="Coral.commons"/>
  <testcase name="#ready should not be blocking" time="0" classname="Coral.commons"/>
  <testcase name="#transitionEnd should call the provided callback (even if the browser does not support transitions)" time="0.116" classname="Coral.commons"/>
  <testcase name="#transitionEnd should call the provided callback even if no transition was configured" time="0.006" classname="Coral.commons"/>
  <testcase name="#transitionEnd should call the provided callback even if the transition duration is 0" time="0.029" classname="Coral.commons"/>
  <testcase name="#transitionEnd should only call the transitionEnd callback once" time="0.448" classname="Coral.commons"/>
  <testcase name="#transitionEnd per default transitionEnd is automatically unregistered after one callback" time="0.921" classname="Coral.commons"/>
  <testcase name="#addResizeListener should call the provided callback when element is initially loaded" time="0.011" classname="Coral.commons"/>
  <testcase name="#addResizeListener should call the provided callback whenever the size of the element is changed (due to content added)" time="0.015" classname="Coral.commons"/>
  <testcase name="#addResizeListener should call the provided callback whenever the size of the element is changed (due to content removed)" time="0.013" classname="Coral.commons"/>
  <testcase name="#addResizeListener should be possible to listen to resize events even if element is initially hidden" time="0.014" classname="Coral.commons"/>
  <testcase name="#addResizeListener should be possible to listen to resize events even if parent is initially hidden" time="0.018" classname="Coral.commons"/>
  <testcase name="#addResizeListener should be possible get notified when sizeof the element is changed via css" time="0.02" classname="Coral.commons"/>
  <testcase name="#addResizeListener should be possible get notified when size is changed due to css change anywhere hierarchy" time="0.017" classname="Coral.commons"/>
  <testcase name="#removeResizeListener should be possible to remove a resize listener if no longer needed" time="0.527" classname="Coral.commons"/>
  <testcase name="#TABBABLE_ELEMENT_SELECTOR should not select items with tabIndex=-1" time="0" classname="Coral.commons"/>
  <testcase name="Coral.keys should have a numeric keycode" time="0.002" classname="Coral.keys"/>
  <testcase name="Coral.keys should support single key shortcuts" time="0.001" classname="Coral.keys"/>
  <testcase name="Coral.keys should not explode when keyevent originates from an element that is not in the DOM" time="0.002" classname="Coral.keys"/>
  <testcase name="Coral.keys should support key combinations with modifiers" time="0.004" classname="Coral.keys"/>
  <testcase name="Coral.keys should unbind a single key listener" time="0.001" classname="Coral.keys"/>
  <testcase name="Coral.keys should unbind all listeners for a key" time="0.001" classname="Coral.keys"/>
  <testcase name="Coral.keys should unbind multiple key combinations with modifiers" time="0.003" classname="Coral.keys"/>
  <testcase name="Coral.keys should support fancy modifier keys" time="0.001" classname="Coral.keys"/>
  <testcase name="Coral.keys should support listeners on F keys" time="0.002" classname="Coral.keys"/>
  <testcase name="Coral.keys should support non-alphanumeric keys" time="0.003" classname="Coral.keys"/>
  <testcase name="Coral.keys should support both the top row of number keys and the numeric keypad" time="0.005" classname="Coral.keys"/>
  <testcase name="Coral.keys should not trigger handlers when an event originates from an input" time="0.02" classname="Coral.keys"/>
  <testcase name="Coral.keys should trigger handler when an event originates from an input if key is escape" time="0.004" classname="Coral.keys"/>
  <testcase name="Coral.keys should initialize itself when called with new" time="0.001" classname="Coral.keys"/>
  <testcase name="Coral.keys should throw when not passed element to scope" time="0" classname="Coral.keys"/>
  <testcase name="Coral.keys should set context correctly" time="0.001" classname="Coral.keys"/>
  <testcase name="Coral.keys should be chainable" time="0" classname="Coral.keys"/>
  <testcase name="Coral.keys should support a map of keyCombos to handlers" time="0.001" classname="Coral.keys"/>
  <testcase name="Coral.keys should support a map of keyCombos to handlers with delegation" time="0.003" classname="Coral.keys"/>
  <testcase name="Coral.keys should support event namespaces" time="0.002" classname="Coral.keys"/>
  <testcase name="Coral.keys should remove all listeners for a given namespace when provided with only the namespace" time="0.002" classname="Coral.keys"/>
  <testcase name="Coral.keys should support custom filter functions" time="0.001" classname="Coral.keys"/>
  <testcase name="Coral.keys should support event delegation" time="0.001" classname="Coral.keys"/>
  <testcase name="Coral.keys should set original keys that triggered the event" time="0.001" classname="Coral.keys"/>
  <testcase name="Coral.keys should set event.matchedTarget correctly" time="0.001" classname="Coral.keys"/>
  <testcase name="Coral.keys should unbind delegated events" time="0.002" classname="Coral.keys"/>
  <testcase name="Coral.keys should support event data" time="0" classname="Coral.keys"/>
  <testcase name="Coral.keys should support event data with delegation" time="0.001" classname="Coral.keys"/>
  <testcase name="Coral.keys should scope events to a given element" time="0.002" classname="Coral.keys"/>
  <testcase name="Coral.keys should allow event delegation to immediate children" time="0.002" classname="Coral.keys"/>
  <testcase name="Coral.keys should support focus shifting away from element on keydown but before keyup (CUI-3319)" time="0" classname="Coral.keys"/>
  <testcase name="sequences should support two key sequences" time="0" classname="Coral.keys"/>
  <testcase name="sequences should support three key sequences" time="0" classname="Coral.keys"/>
  <testcase name="sequences should support the Konami code" time="0.003" classname="Coral.keys"/>
  <testcase name="sequences should support key sequences in succession without timeout" time="0.002" classname="Coral.keys"/>
  <testcase name="sequences should support key sequences with combinations" time="0" classname="Coral.keys"/>
  <testcase name="sequences should support key sequences with combinations when modifier released first" time="0" classname="Coral.keys"/>
  <testcase name="sequences removing sequence listeners should support adding/removing key sequence listeners by name" time="0.001" classname="Coral.keys"/>
  <testcase name="sequences removing sequence listeners should support adding/removing key sequence listeners with namespaces" time="0.001" classname="Coral.keys"/>
  <testcase name="sequences removing sequence listeners should support adding/removing key sequence listeners with namespace and by name" time="0.001" classname="Coral.keys"/>
  <testcase name="Coral.transform should have transform under Coral" time="0" classname="Coral.transform"/>
  <testcase name="Coral.transform.boolean should have Coral.transform.boolean defined" time="0" classname="Coral.transform"/>
  <testcase name="Coral.transform.boolean should accept empty string as false" time="0" classname="Coral.transform"/>
  <testcase name="Coral.transform.boolean should accept &quot;true&quot; as true" time="0" classname="Coral.transform"/>
  <testcase name="Coral.transform.boolean should accept &quot;false&quot; as true" time="0" classname="Coral.transform"/>
  <testcase name="Coral.transform.boolean should accept null as false" time="0" classname="Coral.transform"/>
  <testcase name="Coral.transform.boolean should accept undefined as false" time="0" classname="Coral.transform"/>
  <testcase name="Coral.transform.boolean should accept false as false" time="0" classname="Coral.transform"/>
  <testcase name="Coral.transform.boolean should accept true as true" time="0.001" classname="Coral.transform"/>
  <testcase name="Coral.transform.boolean should accept a 0 as false" time="0" classname="Coral.transform"/>
  <testcase name="Coral.transform.boolean should accept any other number as true" time="0" classname="Coral.transform"/>
  <testcase name="Coral.transform.boolean should accept truthy as true" time="0.001" classname="Coral.transform"/>
  <testcase name="Coral.transform.boolean should accept truthy as true" time="0" classname="Coral.transform"/>
  <testcase name="Coral.transform.booleanAttr should have Coral.transform.booleanAttr defined" time="0" classname="Coral.transform"/>
  <testcase name="Coral.transform.booleanAttr should accept empty string as true" time="0.001" classname="Coral.transform"/>
  <testcase name="Coral.transform.booleanAttr should accept &quot;true&quot; as true" time="0" classname="Coral.transform"/>
  <testcase name="Coral.transform.booleanAttr should accept &quot;false&quot; as true" time="0" classname="Coral.transform"/>
  <testcase name="Coral.transform.booleanAttr should accept null as false" time="0.001" classname="Coral.transform"/>
  <testcase name="Coral.transform.booleanAttr should accept undefined as false" time="0" classname="Coral.transform"/>
  <testcase name="Coral.transform.booleanAttr should accept true as true" time="0" classname="Coral.transform"/>
  <testcase name="Coral.transform.booleanAttr should accept a 0 as true" time="0" classname="Coral.transform"/>
  <testcase name="Coral.transform.booleanAttr should accept any other number as true" time="0" classname="Coral.transform"/>
  <testcase name="Coral.transform.number should have Coral.transfor.number defined" time="0" classname="Coral.transform"/>
  <testcase name="Coral.transform.number should accept 0" time="0" classname="Coral.transform"/>
  <testcase name="Coral.transform.number should accept numbers" time="0" classname="Coral.transform"/>
  <testcase name="Coral.transform.number should accept negative numbers" time="0" classname="Coral.transform"/>
  <testcase name="Coral.transform.number should accept floats" time="0" classname="Coral.transform"/>
  <testcase name="Coral.transform.number should accept negative floats" time="0" classname="Coral.transform"/>
  <testcase name="Coral.transform.number should return null for non numbers" time="0" classname="Coral.transform"/>
  <testcase name="Coral.transform.number should accept numbers" time="0" classname="Coral.transform"/>
  <testcase name="Coral.transform.number should accept negative numbers" time="0" classname="Coral.transform"/>
  <testcase name="Coral.transform.number should return null when given null" time="0" classname="Coral.transform"/>
  <testcase name="Coral.transform.number should null when given empty string" time="0" classname="Coral.transform"/>
  <testcase name="Coral.transform.string should have Coral.transfor.string defined" time="0" classname="Coral.transform"/>
  <testcase name="Coral.transform.string should accept 0" time="0.001" classname="Coral.transform"/>
  <testcase name="Coral.transform.string should accept numbers" time="0" classname="Coral.transform"/>
  <testcase name="Coral.transform.string should accept floats" time="0" classname="Coral.transform"/>
  <testcase name="Coral.transform.string should return &quot;&quot; when given null" time="0.001" classname="Coral.transform"/>
  <testcase name="Coral.transform.string should return &quot;&quot; when given undefined" time="0" classname="Coral.transform"/>
  <testcase name="Coral.transform.string should accept booleans" time="0" classname="Coral.transform"/>
  <testcase name="Coral.transform.string should accept strings" time="0" classname="Coral.transform"/>
  <testcase name="Coral.transform.float should have Coral.transfor.float defined" time="0" classname="Coral.transform"/>
  <testcase name="Coral.transform.float should accept numbers" time="0" classname="Coral.transform"/>
  <testcase name="Coral.transform.float should accept negative numbers" time="0" classname="Coral.transform"/>
  <testcase name="Coral.transform.float should accept floats" time="0" classname="Coral.transform"/>
  <testcase name="Coral.transform.float should return null for invalid numbers" time="0" classname="Coral.transform"/>
  <testcase name="Coral.transform.float should accept negative floats" time="0" classname="Coral.transform"/>
  <testcase name="Coral.transform.float should return null for non numbers" time="0" classname="Coral.transform"/>
  <testcase name="Coral.transform.float should return null when given null" time="0.001" classname="Coral.transform"/>
  <testcase name="Coral.transform.float should return null when given empty string" time="0" classname="Coral.transform"/>
  <testcase name="Coral.validate should have validate under Coral" time="0" classname="Coral.validate"/>
  <testcase name="Coral.validate.valueMustChange should have Coral.validate.valueMustChange defined" time="0" classname="Coral.validate"/>
  <testcase name="Coral.validate.valueMustChange should return false if values are equal" time="0" classname="Coral.validate"/>
  <testcase name="Coral.validate.valueMustChange should return false on equivalent strings" time="0.001" classname="Coral.validate"/>
  <testcase name="Coral.validate.valueMustChange should return true on different strings" time="0" classname="Coral.validate"/>
  <testcase name="Coral.validate.valueMustChange should return true on different numbers" time="0" classname="Coral.validate"/>
  <testcase name="Coral.validate.valueMustChange should return true on different booleans" time="0" classname="Coral.validate"/>
  <testcase name="Coral.validate.valueMustChange should return false on equivalent booleans" time="0" classname="Coral.validate"/>
  <testcase name="Coral.validate.enumeration should have Coral.validate.enumeration defined" time="0" classname="Coral.validate"/>
  <testcase name="Coral.validate.enumeration should support key/value enums" time="0" classname="Coral.validate"/>
  <testcase name="Coral.validate.enumeration should be case sensitive" time="0" classname="Coral.validate"/>
  <testcase name="Coral.validate.enumeration should support arrays" time="0.001" classname="Coral.validate"/>
  <testcase name="Namespace should be defined in the Coral namespace" time="0" classname="Coral.Collection"/>
  <testcase name="Instantiation should not enable a custom element" time="0" classname="Coral.Collection"/>
  <testcase name="API #options should default container to host" time="0.001" classname="Coral.Collection"/>
  <testcase name="API #options should default itemSelector to the itemTagName" time="0.001" classname="Coral.Collection"/>
  <testcase name="API #options should allow setting your own itemSelector" time="0" classname="Coral.Collection"/>
  <testcase name="API #options should default filter to undefined" time="0" classname="Coral.Collection"/>
  <testcase name="API #options should support base tags in the default itemSelector" time="0" classname="Coral.Collection"/>
  <testcase name="API #options should convert :scope in the item selector to an id" time="0.001" classname="Coral.Collection"/>
  <testcase name="API #options should call onCollectionChange on both collections with the initial state" time="0.002" classname="Coral.Collection"/>
  <testcase name="API #options should call onCollectionChange with the initial state" time="0.001" classname="Coral.Collection"/>
  <testcase name="API #options should not call onCollectionChange when items are not handled" time="0.001" classname="Coral.Collection"/>
  <testcase name="API #options should not call onCollectionChange when the item is excluded" time="0.002" classname="Coral.Collection"/>
  <testcase name="API #options should not call any callback when there are no initial items" time="0" classname="Coral.Collection"/>
  <testcase name="API #length should return the amount of items" time="0.001" classname="Coral.Collection"/>
  <testcase name="API #length should return the amount of items ignoring nested items" time="0.001" classname="Coral.Collection"/>
  <testcase name="API #getAll() should get all elements" time="0.001" classname="Coral.Collection"/>
  <testcase name="API #getAll() should get all elements" time="0.001" classname="Coral.Collection"/>
  <testcase name="API #getAll() should not return elements that do not pass the filter() function" time="0.001" classname="Coral.Collection"/>
  <testcase name="API #getAll() should return all element when no filter is provided" time="0.001" classname="Coral.Collection"/>
  <testcase name="API #getAll() should consider the itemSelector to query" time="0.001" classname="Coral.Collection"/>
  <testcase name="API #getAll() should throw an error if no host is provided" time="0" classname="Coral.Collection"/>
  <testcase name="API #clear() should remove all the items except excluded" time="0.001" classname="Coral.Collection"/>
  <testcase name="API #clear() should call onItemRemoved for every item removed" time="0.001" classname="Coral.Collection"/>
  <testcase name="API #first() should return the first item in the collection" time="0" classname="Coral.Collection"/>
  <testcase name="API #first() should take the filter into consideration" time="0.001" classname="Coral.Collection"/>
  <testcase name="API #first() should return null if the collection is empty" time="0.001" classname="Coral.Collection"/>
  <testcase name="API #first() should throw an error if no host is provided" time="0" classname="Coral.Collection"/>
  <testcase name="API #last() should return the last item in the collection" time="0" classname="Coral.Collection"/>
  <testcase name="API #last() should take the filter into consideration" time="0.001" classname="Coral.Collection"/>
  <testcase name="API #last() should return null if the collection is empty" time="0.002" classname="Coral.Collection"/>
  <testcase name="API #last() should throw an error if no host is provided" time="0" classname="Coral.Collection"/>
  <testcase name="API #add() should append items directly to the element by default" time="0.001" classname="Coral.Collection"/>
  <testcase name="API #add() should allow to insertBefore an item" time="0.001" classname="Coral.Collection"/>
  <testcase name="API #add() should append if insertBefore is null" time="0.001" classname="Coral.Collection"/>
  <testcase name="API #add() should append items into the specified container" time="0" classname="Coral.Collection"/>
  <testcase name="API #add() should create elements with the specified tagName" time="0" classname="Coral.Collection"/>
  <testcase name="API #add() should create elements with the specified baseTagName" time="0" classname="Coral.Collection"/>
  <testcase name="API #add() should add items to the specified container" time="0.001" classname="Coral.Collection"/>
  <testcase name="API #add() should call onItemAdded immediately after an item is added" time="0.001" classname="Coral.Collection"/>
  <testcase name="API #add() should not call onItemAdded when the item is excluded" time="0.001" classname="Coral.Collection"/>
  <testcase name="API #add() should correctly call onItemAdded on nested and direct items" time="0.001" classname="Coral.Collection"/>
  <testcase name="API #add() should delegate the call on onItemAdded when _startHandlingItems is called (nested)" time="0.004" classname="Coral.Collection"/>
  <testcase name="API #add() should delegate the call on onItemAdded when _startHandlingItems is called" time="0.001" classname="Coral.Collection"/>
  <testcase name="API #add() should not call onItemAdded if the host is not set" time="0.001" classname="Coral.Collection"/>
  <testcase name="API #add() should throw an error if no host is provided" time="0.001" classname="Coral.Collection"/>
  <testcase name="API #remove() should remove the item" time="0.001" classname="Coral.Collection"/>
  <testcase name="API #remove() should call onItemRemoved" time="0.001" classname="Coral.Collection"/>
  <testcase name="API #remove() should not call onItemRemoved when the item is excluded" time="0.001" classname="Coral.Collection"/>
  <testcase name="API #remove() should delegate the call on onItemRemoved when _startHandlingItems is called" time="0.017" classname="Coral.Collection"/>
  <testcase name="API #remove() should not call onItemRemoved if the host is not set" time="0.001" classname="Coral.Collection"/>
  <testcase name="API #remove() should not call onItemRemoved if the item was not in the DOM" time="0.001" classname="Coral.Collection"/>
  <testcase name="API #_startHandlingItems should disconnect the old MO to avoid double events" time="0.002" classname="Coral.Collection"/>
  <testcase name="API #_startHandlingItems should skip the initial items again if skipInitialItems=true" time="0.029" classname="Coral.Collection"/>
  <testcase name="API #_startHandlingItems should process the initial items again if skipInitialItems=false" time="0.015" classname="Coral.Collection"/>
  <testcase name="API #_startHandlingItems should process the initial items again if skipInitialItems=false" time="0.002" classname="Coral.Collection"/>
  <testcase name="API #_startHandlingItems should throw an error if no host is provided" time="0.001" classname="Coral.Collection"/>
  <testcase name="API #_stopHandlingItems should disconnect the MO when called" time="0.01" classname="Coral.Collection"/>
  <testcase name="API #_stopHandlingItems should have no side effects if _startHandlingItems has not previously called " time="0" classname="Coral.Collection"/>
  <testcase name="Events #coral-collection:add should not trigger collection events for initial items" time="0.001" classname="Coral.Collection"/>
  <testcase name="Events #coral-collection:add should not trigger collection events for initial items (nested)" time="0.001" classname="Coral.Collection"/>
  <testcase name="Events #coral-collection:add should be triggered when an item is added using appendChild()" time="0.011" classname="Coral.Collection"/>
  <testcase name="Events #coral-collection:add should be triggered when an item is added using add()" time="0.012" classname="Coral.Collection"/>
  <testcase name="Events #coral-collection:add should be triggered when an item is added using object notation" time="0.015" classname="Coral.Collection"/>
  <testcase name="Events #coral-collection:add should not be triggered if the item is excluded" time="0.015" classname="Coral.Collection"/>
  <testcase name="Events #coral-collection:add should not be triggered when non matching item is added" time="0.011" classname="Coral.Collection"/>
  <testcase name="Events #coral-collection:add should not be triggered when text nodes are added" time="0.029" classname="Coral.Collection"/>
  <testcase name="Events #coral-collection:add should be triggered even though no onItemAdded callback was provided" time="0.032" classname="Coral.Collection"/>
  <testcase name="Events #coral-collection:remove should be triggered when an item is removed using removeChild()" time="0.016" classname="Coral.Collection"/>
  <testcase name="Events #coral-collection:remove should be triggered when an item is removed using remove()" time="0.013" classname="Coral.Collection"/>
  <testcase name="Events #coral-collection:remove should not be triggered if the item is excluded" time="0.012" classname="Coral.Collection"/>
  <testcase name="Events #coral-collection:remove should not be triggered when non matching item is removed" time="0.03" classname="Coral.Collection"/>
  <testcase name="Events #coral-collection:remove should not be triggered when text nodes are removed" time="0.031" classname="Coral.Collection"/>
  <testcase name="Events #coral-collection:remove should be triggered even though no onItemRemoved callback was provided" time="0.031" classname="Coral.Collection"/>
  <testcase name="Implementation Details Handling items should correctly report the initial state" time="0.002" classname="Coral.Collection"/>
  <testcase name="Implementation Details Handling items should call onItemAdded for every added item" time="0.013" classname="Coral.Collection"/>
  <testcase name="Implementation Details Handling items should call onItemRemoved for every removed item" time="0.013" classname="Coral.Collection"/>
  <testcase name="Implementation Details Handling items should correctly report added and removed items" time="0.013" classname="Coral.Collection"/>
  <testcase name="Implementation Details Handling items should report add and remove if done on the same frame" time="0.011" classname="Coral.Collection"/>
  <testcase name="Implementation Details Handling items should allow custom item selectors" time="0.047" classname="Coral.Collection"/>
  <testcase name="Implementation Details Handling items should call onCollectionChange with the initial items" time="0.015" classname="Coral.Collection"/>
  <testcase name="Implementation Details Handling items should allow custom item selectors with :scope" time="0.055" classname="Coral.Collection"/>
  <testcase name="Implementation Details Handling items should detect adding items that are not direct children" time="0.024" classname="Coral.Collection"/>
  <testcase name="Implementation Details Handling items should detect removing items that are not direct children" time="0.029" classname="Coral.Collection"/>
  <testcase name="Namespace should be defined in the Coral namespace" time="0" classname="Coral.SelectableCollection"/>
  <testcase name="API #_getFirstSelectable() should return the first valid item for selection" time="0.001" classname="Coral.SelectableCollection"/>
  <testcase name="API #_getFirstSelectable() should return null if no valid selectable item" time="0" classname="Coral.SelectableCollection"/>
  <testcase name="API #_getFirstSelectable() should ignore disabled and hidden items" time="0.001" classname="Coral.SelectableCollection"/>
  <testcase name="API #_getLastSelectable() should return the last valid item for selection" time="0" classname="Coral.SelectableCollection"/>
  <testcase name="API #_getLastSelectable() should return null if no valid selectable item" time="0" classname="Coral.SelectableCollection"/>
  <testcase name="API #_getLastSelectable() should ignore disabled and hidden items" time="0" classname="Coral.SelectableCollection"/>
  <testcase name="API #_getFirstSelected() should return the first selected item" time="0" classname="Coral.SelectableCollection"/>
  <testcase name="API #_getFirstSelected() should return null if no item is selected" time="0" classname="Coral.SelectableCollection"/>
  <testcase name="API #_getFirstSelected() should allow passing another selector" time="0.001" classname="Coral.SelectableCollection"/>
  <testcase name="API #_getFirstSelected() should allow disabled items to be selected if explicitely indicated" time="0.002" classname="Coral.SelectableCollection"/>
  <testcase name="API #_getLastSelected() should return the last selected item" time="0" classname="Coral.SelectableCollection"/>
  <testcase name="API #_getLastSelected() should return null if no item is selected" time="0.001" classname="Coral.SelectableCollection"/>
  <testcase name="API #_getLastSelected() should allow passing another selector" time="0.001" classname="Coral.SelectableCollection"/>
  <testcase name="API #_getLastSelected() should ignore disabled and hidden items" time="0" classname="Coral.SelectableCollection"/>
  <testcase name="API #_getAllSelected() should return all the selected items" time="0.001" classname="Coral.SelectableCollection"/>
  <testcase name="API #_getAllSelected() should return null if no item is selected" time="0" classname="Coral.SelectableCollection"/>
  <testcase name="API #_getAllSelected() should allow passing another selector" time="0.001" classname="Coral.SelectableCollection"/>
  <testcase name="API #_getAllSelected() should allow disabled items to be selected" time="0" classname="Coral.SelectableCollection"/>
  <testcase name="API #_deselectAllExceptFirst() should all the deselect all items except the first one" time="0.001" classname="Coral.SelectableCollection"/>
  <testcase name="API #_deselectAllExceptFirst() should allow passing another selector" time="0" classname="Coral.SelectableCollection"/>
  <testcase name="API #_deselectAllExceptFirst() should ignore disabled and hidden items" time="0.001" classname="Coral.SelectableCollection"/>
  <testcase name="API #_deselectAllExceptLast() should all the deselect all items except the last one" time="0" classname="Coral.SelectableCollection"/>
  <testcase name="API #_deselectAllExceptLast() should allow passing another selector" time="0" classname="Coral.SelectableCollection"/>
  <testcase name="API #_deselectAllExceptLast() should ignore disabled and hidden items" time="0.001" classname="Coral.SelectableCollection"/>
  <testcase name="API #_deselectAllExcept() should all the deselect all items" time="0.001" classname="Coral.SelectableCollection"/>
  <testcase name="API #_deselectAllExcept() should allow passing another selector" time="0.001" classname="Coral.SelectableCollection"/>
  <testcase name="API #_deselectAllExcept() should fallback to &quot;selected&quot; if empty string is provided" time="0.001" classname="Coral.SelectableCollection"/>
  <testcase name="API #_deselectAllExcept() should ignore disabled and hidden items" time="0.001" classname="Coral.SelectableCollection"/>
  <testcase name="API #_deselectAllExcept() should deselect all items except the provided one" time="0" classname="Coral.SelectableCollection"/>
  <testcase name="API #_deselectAllExcept() should deselect all items except the provided one with a custom attribute" time="0" classname="Coral.SelectableCollection"/>
  <testcase name="API #_deselectAllExcept() should deselect all items except the provided one and fallback the attribute to &quot;selected&quot; if empty string is provided" time="0.001" classname="Coral.SelectableCollection"/>
  <testcase name="Implementation Details should warn that options.filter is not supported" time="0" classname="Coral.SelectableCollection"/>
  <testcase name="Namespace should be defined" time="0.001" classname="Coral.DragAction"/>
  <testcase name="Instantiation should initialize an instance of Coral.DragAction" time="0.003" classname="Coral.DragAction"/>
  <testcase name="Instantiation should destroy the Coral.DragAction instance" time="0.001" classname="Coral.DragAction"/>
  <testcase name="Instantiation should destroy the Coral.DragAction instance and restore the dragElement position" time="0.004" classname="Coral.DragAction"/>
  <testcase name="API #dragElement should throw an error is dragElement is not passed" time="0" classname="Coral.DragAction"/>
  <testcase name="Markup #dragElement should set a DOM dragElement" time="0.001" classname="Coral.DragAction"/>
  <testcase name="Markup #dragElement should set the dragAction instance to the dragElement" time="0.001" classname="Coral.DragAction"/>
  <testcase name="Markup #dragElement should set a dragElement using a selector" time="0.001" classname="Coral.DragAction"/>
  <testcase name="Markup #dragElement should return the dragElement" time="0.001" classname="Coral.DragAction"/>
  <testcase name="Markup #dragElement should not be possible to set the dragElement" time="0" classname="Coral.DragAction"/>
  <testcase name="Markup #dropZone should set a DOM dropZone" time="0.001" classname="Coral.DragAction"/>
  <testcase name="Markup #dropZone should set a dropZone using a selector" time="0.001" classname="Coral.DragAction"/>
  <testcase name="Markup #dropZone should set a dropZone using a NodeList" time="0" classname="Coral.DragAction"/>
  <testcase name="Markup #dropZone should return the dropZone" time="0" classname="Coral.DragAction"/>
  <testcase name="Markup #handle should set a DOM as handle" time="0.001" classname="Coral.DragAction"/>
  <testcase name="Markup #handle should set a handle using a selector" time="0.001" classname="Coral.DragAction"/>
  <testcase name="Markup #handle should set a handle using a NodeList" time="0.001" classname="Coral.DragAction"/>
  <testcase name="Markup #handle should return the handle" time="0.001" classname="Coral.DragAction"/>
  <testcase name="Markup #axis should set axis to horizontal" time="0.001" classname="Coral.DragAction"/>
  <testcase name="Markup #axis should not accept other values than horizontal, vertical or default" time="0.001" classname="Coral.DragAction"/>
  <testcase name="Markup #axis should restrict the drag element to the horizontal axis" time="0.005" classname="Coral.DragAction"/>
  <testcase name="Markup #axis should restrict the drag element to the vertical axis" time="0.005" classname="Coral.DragAction"/>
  <testcase name="Markup #scroll should set scroll to true" time="0.001" classname="Coral.DragAction"/>
  <testcase name="Markup #containment should set containment to true" time="0" classname="Coral.DragAction"/>
  <testcase name="Markup #containment should contain the drag element and set the new position" time="0.004" classname="Coral.DragAction"/>
  <testcase name="Markup #containment should contain the drag element in the bottom right" time="0.004" classname="Coral.DragAction"/>
  <testcase name="Markup #containment should contain the drag element in the bottom left" time="0.004" classname="Coral.DragAction"/>
  <testcase name="Markup #containment should contain the drag element in the top left" time="0.004" classname="Coral.DragAction"/>
  <testcase name="Markup #containment should contain the drag element in the top right" time="0.005" classname="Coral.DragAction"/>
  <testcase name="Events should trigger coral-dragaction:dragstart" time="0.002" classname="Coral.DragAction"/>
  <testcase name="Events should trigger coral-dragaction:dragstart once" time="0.003" classname="Coral.DragAction"/>
  <testcase name="Events should trigger coral-dragaction:drop" time="0.004" classname="Coral.DragAction"/>
  <testcase name="Events should not trigger coral-dragaction:drop" time="0.003" classname="Coral.DragAction"/>
  <testcase name="Events should trigger coral-dragaction:drag" time="0.005" classname="Coral.DragAction"/>
  <testcase name="Events should trigger coral-dragaction:dragend" time="0.003" classname="Coral.DragAction"/>
  <testcase name="API #_attributes should return the properties/attribute map" time="0" classname="Coral.mixin._component"/>
  <testcase name="API #_reflectAttribute() should reflect the attribute when setting the property" time="0.001" classname="Coral.mixin._component"/>
  <testcase name="API #_reflectAttribute() should reflect the attribute value when setting the property" time="0" classname="Coral.mixin._component"/>
  <testcase name="API #_reflectAttribute() should prevent same multiple attribute reflection" time="0.001" classname="Coral.mixin._component"/>
  <testcase name="API #_reflectAttribute() should prevent reflection if attribute is already set" time="0.003" classname="Coral.mixin._component"/>
  <testcase name="API #_reflectAttribute() should be possible to set the attribute by using the property name" time="0" classname="Coral.mixin._component"/>
  <testcase name="API #_delegateEvents() should trigger component registered events" time="0.001" classname="Coral.mixin._component"/>
  <testcase name="API #_delegateEvents() should support listening to events in the capture phase" time="0.001" classname="Coral.mixin._component"/>
  <testcase name="API #_delegateEvents() should support listening to global events in the capture phase" time="0.001" classname="Coral.mixin._component"/>
  <testcase name="API #_delegateEvents() should support listening to window events only when attached" time="0.008" classname="Coral.mixin._component"/>
  <testcase name="API #_getContentZone() should expose content zones with descriptor.defaultContentZone as instance.defaultContentZone" time="0" classname="Coral.mixin._component"/>
  <testcase name="API #_getContentZone() should return the content zone" time="0" classname="Coral.mixin._component"/>
  <testcase name="API #_getContentZone() should return null if no content zone" time="0" classname="Coral.mixin._component"/>
  <testcase name="API #_setContentZone() should insert the content zone once the element is connected" time="0" classname="Coral.mixin._component"/>
  <testcase name="API #_setContentZone() should set the corresponding content zone when instance.defaultContentZone is reassigned" time="0" classname="Coral.mixin._component"/>
  <testcase name="API #_setContentZone() should allow setting values on content zones via object notation" time="0" classname="Coral.mixin._component"/>
  <testcase name="API #_setContentZone() should set content zone elements via object notation" time="0" classname="Coral.mixin._component"/>
  <testcase name="API #_setContentZone() should set content zone elements with content = HTMLElement" time="0" classname="Coral.mixin._component"/>
  <testcase name="API #_setContentZone() should allow setting the content zone to null" time="0" classname="Coral.mixin._component"/>
  <testcase name="API #toString() should return the right value for toString()" time="0.01" classname="Coral.mixin._component"/>
  <testcase name="API #on should support on()" time="0" classname="Coral.mixin._component"/>
  <testcase name="API #off should support off()" time="0" classname="Coral.mixin._component"/>
  <testcase name="API #trigger should support trigger()" time="0" classname="Coral.mixin._component"/>
  <testcase name="API #show() should change hidden state" time="0" classname="Coral.mixin._component"/>
  <testcase name="API #hide() should change hidden state" time="0" classname="Coral.mixin._component"/>
  <testcase name="API #set should support setting a property" time="0" classname="Coral.mixin._component"/>
  <testcase name="API #get should support getting a property" time="0" classname="Coral.mixin._component"/>
  <testcase name="API #name should set by property" time="0" classname="Coral.mixin._formField"/>
  <testcase name="API #name should set by attribute" time="0" classname="Coral.mixin._formField"/>
  <testcase name="API #name should be reflected" time="0.001" classname="Coral.mixin._formField"/>
  <testcase name="API #value should set by property" time="0" classname="Coral.mixin._formField"/>
  <testcase name="API #value should set by attribute" time="0" classname="Coral.mixin._formField"/>
  <testcase name="API #disabled should set by property" time="0.001" classname="Coral.mixin._formField"/>
  <testcase name="API #disabled should set by attribute" time="0" classname="Coral.mixin._formField"/>
  <testcase name="API #disabled should be reflected" time="0" classname="Coral.mixin._formField"/>
  <testcase name="API #required should set by property" time="0" classname="Coral.mixin._formField"/>
  <testcase name="API #required should set by attribute" time="0" classname="Coral.mixin._formField"/>
  <testcase name="API #required should be reflected" time="0" classname="Coral.mixin._formField"/>
  <testcase name="API #readOnly should set by property" time="0" classname="Coral.mixin._formField"/>
  <testcase name="API #readOnly should set by attribute" time="0" classname="Coral.mixin._formField"/>
  <testcase name="API #readOnly should be reflected" time="0.001" classname="Coral.mixin._formField"/>
  <testcase name="API #invalid should set by property" time="0" classname="Coral.mixin._formField"/>
  <testcase name="API #invalid should set by attribute" time="0" classname="Coral.mixin._formField"/>
  <testcase name="API #invalid should be reflected" time="0" classname="Coral.mixin._formField"/>
  <testcase name="API #labelledBy should set by property" time="0" classname="Coral.mixin._formField"/>
  <testcase name="API #labelledBy should set by attribute" time="0" classname="Coral.mixin._formField"/>
  <testcase name="API #labelledBy should remove old for assignments" time="0.001" classname="Coral.mixin._formField"/>
  <testcase name="API #invalid should set class and aria" time="0" classname="Coral.mixin._formField"/>
  <testcase name="API #clear should set the input to empty string" time="0.001" classname="Coral.mixin._formField"/>
  <testcase name="API #reset should reset to empty string" time="0" classname="Coral.mixin._formField"/>
  <testcase name="API #reset should reset to value attribute" time="0" classname="Coral.mixin._formField"/>
  <testcase name="Events #change should fire change when input triggers change" time="0.001" classname="Coral.mixin._formField"/>
  <testcase name="Implementation Details testFormField API #value should be provided" time="0" classname="Coral.mixin._formField"/>
  <testcase name="Implementation Details testFormField API #value should have the correct default" time="0" classname="Coral.mixin._formField"/>
  <testcase name="Implementation Details testFormField API #value should not be reflected" time="0" classname="Coral.mixin._formField"/>
  <testcase name="Implementation Details testFormField API #name should have empty string as default" time="0" classname="Coral.mixin._formField"/>
  <testcase name="Implementation Details testFormField API #name should transform everything to a string" time="0.001" classname="Coral.mixin._formField"/>
  <testcase name="Implementation Details testFormField API #name should be set synchronously" time="0.001" classname="Coral.mixin._formField"/>
  <testcase name="Implementation Details testFormField API #name should not submit a value when the name is not specified even though there is a value" time="0.001" classname="Coral.mixin._formField"/>
  <testcase name="Implementation Details testFormField API #name should submit the one single value" time="0" classname="Coral.mixin._formField"/>
  <testcase name="Implementation Details testFormField API #required should default to false" time="0" classname="Coral.mixin._formField"/>
  <testcase name="Implementation Details testFormField API #invalid should default to false" time="0" classname="Coral.mixin._formField"/>
  <testcase name="Implementation Details testFormField API #invalid should be settable programmatically" time="0.001" classname="Coral.mixin._formField"/>
  <testcase name="Implementation Details testFormField API #disabled should default to false" time="0" classname="Coral.mixin._formField"/>
  <testcase name="Implementation Details testFormField API #disabled should behave like a boolean value" time="0" classname="Coral.mixin._formField"/>
  <testcase name="Implementation Details testFormField API #readOnly should default to false" time="0" classname="Coral.mixin._formField"/>
  <testcase name="Implementation Details testFormField API #labelledBy should remove labels with empty string" time="0.001" classname="Coral.mixin._formField"/>
  <testcase name="Implementation Details testFormField API #labelledBy should support multiple labels" time="0" classname="Coral.mixin._formField"/>
  <testcase name="Implementation Details testFormField API #clear() should set the valueProperty to the default when called" time="0" classname="Coral.mixin._formField"/>
  <testcase name="Implementation Details testFormField API #reset() should reset to the initial value when called" time="0" classname="Coral.mixin._formField"/>
  <testcase name="Implementation Details testFormField API #reset() should be called when form is reset programmatically" time="0.001" classname="Coral.mixin._formField"/>
  <testcase name="Implementation Details testFormField API #reset() should be called when form is reset via reset input" time="0.002" classname="Coral.mixin._formField"/>
  <testcase name="Implementation Details testFormField Markup #disabled should behave like a boolean value" time="0.001" classname="Coral.mixin._formField"/>
  <testcase name="Implementation Details testFormField Markup #labelledby should label component using attribute" time="0.001" classname="Coral.mixin._formField"/>
  <testcase name="Implementation Details testFormField Events #change should not be trigged when setting the value programmatically" time="0" classname="Coral.mixin._formField"/>
  <testcase name="Implementation Details testFormField Events #change should trigger a change event when we interact with the internal input" time="0" classname="Coral.mixin._formField"/>
  <testcase name="Namespace should define the trapFocus in an enum" time="0" classname="Coral.mixin._overlay"/>
  <testcase name="Namespace should define the returnFocus in an enum" time="0" classname="Coral.mixin._overlay"/>
  <testcase name="Namespace should define the focusOnShow in an enum" time="0" classname="Coral.mixin._overlay"/>
  <testcase name="API #_isTopMost() should know if it is top most" time="0.007" classname="Coral.mixin._overlay"/>
  <testcase name="API #open/show()/hide() should default to false" time="0" classname="Coral.mixin._overlay"/>
  <testcase name="API #open/show()/hide() should be set to display:none after closing the overlay silently" time="0.117" classname="Coral.mixin._overlay"/>
  <testcase name="API #open/show()/hide() should not change hidden when show()/hide() called" time="0.003" classname="Coral.mixin._overlay"/>
  <testcase name="API #focusOnShow should default to ON" time="0" classname="Coral.mixin._overlay"/>
  <testcase name="API #focusOnShow should focus the overlay when no content is focusable" time="0.012" classname="Coral.mixin._overlay"/>
  <testcase name="API #focusOnShow should focus the first tababble descendent when available" time="0.014" classname="Coral.mixin._overlay"/>
  <testcase name="API #focusOnShow should accept an HTMLElement to focus" time="0.014" classname="Coral.mixin._overlay"/>
  <testcase name="API #focusOnShow should fallback to the document body when the provided element is not focusable" time="0.024" classname="Coral.mixin._overlay"/>
  <testcase name="API #focusOnShow should focus the first item that matches a selector" time="0.015" classname="Coral.mixin._overlay"/>
  <testcase name="API #focusOnShow should default to the first tababble descendent when the selector is invalid" time="0.014" classname="Coral.mixin._overlay"/>
  <testcase name="API #focusOnShow should not focus the contents if the selector matches a non focusable item" time="0.013" classname="Coral.mixin._overlay"/>
  <testcase name="API #focusOnShow should default to the overlay when the selector is invalid (and no tabbable element is available)" time="0.013" classname="Coral.mixin._overlay"/>
  <testcase name="API #focusOnShow should accept :first-child as a selector" time="0.012" classname="Coral.mixin._overlay"/>
  <testcase name="API #focusOnShow should focus on the last-of-type item when shown" time="0.018" classname="Coral.mixin._overlay"/>
  <testcase name="API #focusOnShow should not move focus when OFF" time="0.013" classname="Coral.mixin._overlay"/>
  <testcase name="API #returnFocus should focus on previously focused element when hidden" time="0.033" classname="Coral.mixin._overlay"/>
  <testcase name="API #returnFocusTo() should return focus to the passed element" time="0.044" classname="Coral.mixin._overlay"/>
  <testcase name="API #returnFocusTo() should focus on the element passed to returnFocusTo() when hidden, even when element is not interactive" time="0.036" classname="Coral.mixin._overlay"/>
  <testcase name="Events should be possible to toggle the overlay while it is still in the transition" time="0.253" classname="Coral.mixin._overlay"/>
  <testcase name="Events should be possible to open/close overlay silently" time="0.115" classname="Coral.mixin._overlay"/>
  <testcase name="Events #coral-overlay:open should trigger &quot;coral-overlay:open&quot; event only after the transition is finished" time="0.107" classname="Coral.mixin._overlay"/>
  <testcase name="Events #coral-overlay:open should make sure that only one &quot;coral-overlay:open&quot; event is thrown at a time" time="0.205" classname="Coral.mixin._overlay"/>
  <testcase name="Events #coral-overlay:close should trigger &quot;coral-overlay:close&quot; event only after the transition is finished" time="0.113" classname="Coral.mixin._overlay"/>
  <testcase name="Events #coral-overlay:close should make sure that only one &quot;coral-overlay:close&quot; event is thrown at a time" time="0.207" classname="Coral.mixin._overlay"/>
  <testcase name="User Interaction should call backdropClickedCallback on all overlays when backdrop clicked" time="0.033" classname="Coral.mixin._overlay"/>
  <testcase name="Implementation Details focus() should keep focus on the container when focused" time="0.027" classname="Coral.mixin._overlay"/>
  <testcase name="Implementation Details tabcapture should focus on the last focusable element when top tab capture focused" time="0.002" classname="Coral.mixin._overlay"/>
  <testcase name="Implementation Details tabcapture should focus on the first focusable element when intermediate tab capture focused" time="0.002" classname="Coral.mixin._overlay"/>
  <testcase name="Implementation Details tabcapture should focus on the last focusable element when last tab capture focused" time="0.002" classname="Coral.mixin._overlay"/>
  <testcase name="Implementation Details tabcapture should position tabcapture elements correctly on show" time="0.007" classname="Coral.mixin._overlay"/>
  <testcase name="Implementation Details tabcapture should position tabcapture elements correctly on show if their order is changed" time="0.19" classname="Coral.mixin._overlay"/>
  <testcase name="Implementation Details Backdrop should appear above other overlays with a correctly positioned backdrop" time="0.02" classname="Coral.mixin._overlay"/>
  <testcase name="Implementation Details Backdrop should hide backdrop when overlay is removed from DOM" time="0.032" classname="Coral.mixin._overlay"/>
  <testcase name="Implementation Details Backdrop should hide backdrop when hiding overlay (even if overlay is directly detached afterwards)" time="0.031" classname="Coral.mixin._overlay"/>
  <testcase name="Implementation Details Backdrop should not hide backdrop when multiple modal overlays are open and one is closed" time="0.049" classname="Coral.mixin._overlay"/>
  <testcase name="Implementation Details Backdrop should not hide backdrop when a non-modal overlay is closed before a modal overlay is opened" time="0.45" classname="Coral.mixin._overlay"/>
  <testcase name="Implementation Details Backdrop should correctly position the backdrop when a middle overlay is closed" time="0.061" classname="Coral.mixin._overlay"/>
  <testcase name="Implementation Details Backdrop should position the backdrop under the topmost overlay that does have a backdrop" time="0.032" classname="Coral.mixin._overlay"/>
  <testcase name="Implementation Details Backdrop should hide backdrop when removed from the DOM while visible, show it again when reattached" time="0.046" classname="Coral.mixin._overlay"/>
  <testcase name="Implementation Details Backdrop should be considered top most when attached as visible" time="0.066" classname="Coral.mixin._overlay"/>
  <testcase name="Implementation Details Backdrop should hide when done closing" time="0.147" classname="Coral.mixin._overlay"/>
  <testcase name="Coral.register should return the created component" time="0" classname="Coral.register"/>
  <testcase name="Coral.register should set default property values" time="0.001" classname="Coral.register"/>
  <testcase name="Coral.register should support overriding just the default value of a property" time="0.001" classname="Coral.register"/>
  <testcase name="Coral.register should have correct default value for non-overriden properties" time="0.001" classname="Coral.register"/>
  <testcase name="Coral.register should support overriding the set and sync methods of property descriptor" time="0.009" classname="Coral.register"/>
  <testcase name="Coral.register should support mixins that add/modify properties on components with no properties" time="0" classname="Coral.register"/>
  <testcase name="Coral.register should support overriding the set and sync methods of property descriptor with mixins" time="0.014" classname="Coral.register"/>
  <testcase name="Coral.register should have correct default values for non-overriden properties when overriding mixin used" time="0.001" classname="Coral.register"/>
  <testcase name="Coral.register should support overriding the set and sync methods of property descriptor with components that force override" time="0.015" classname="Coral.register"/>
  <testcase name="Coral.register should support synchronous proxied properties" time="0.001" classname="Coral.register"/>
  <testcase name="Coral.register should support asynchronous proxied properties" time="0.014" classname="Coral.register"/>
  <testcase name="Coral.register should support synchronous proxied string attributes" time="0.098" classname="Coral.register"/>
  <testcase name="Coral.register should support synchronous proxied boolean attributes" time="0.083" classname="Coral.register"/>
  <testcase name="Coral.register should support all Coral~PropertyDescriptor options at once" time="0.032" classname="Coral.register"/>
  <testcase name="Coral.register should support validate as an array" time="0.001" classname="Coral.register"/>
  <testcase name="#defineProperties should remove properties that are set to null" time="0" classname="Coral.register"/>
  <testcase name="#augmentProperties should call both sync and set methods if provided" time="0" classname="Coral.register"/>
  <testcase name="#augmentProperties should use the destination value in all other cases" time="0" classname="Coral.register"/>
  <testcase name="#augmentProperties should use all source values if descriptor.override = true" time="0" classname="Coral.register"/>
  <testcase name="#augmentProperties should support custom collision handler" time="0.001" classname="Coral.register"/>
  <testcase name="mixins should support object mixins" time="0" classname="Coral.register"/>
  <testcase name="mixins should support functional mixins and pass options to them" time="0" classname="Coral.register"/>
  <testcase name="mixins should support a mixed array of object and functional mixins and should pass options" time="0.001" classname="Coral.register"/>
  <testcase name="extending native tags should allow extending a native tag" time="0.001" classname="Coral.register"/>
  <testcase name="extending native tags should allow extending a native tag with legacy syntax" time="0.001" classname="Coral.register"/>
  <testcase name="extending native tags should allow extending a native tag with extends" time="0.001" classname="Coral.register"/>
  <testcase name="extending native tags should allow extending a component with a baseTag under a different tag name" time="0" classname="Coral.register"/>
  <testcase name="event triggers should support trigger and triggerBefore as functions" time="0" classname="Coral.register"/>
  <testcase name="event triggers should support trigger and triggerBefore as strings" time="0.001" classname="Coral.register"/>
  <testcase name="event triggers should support trigger as string and triggerBefore = true" time="0.001" classname="Coral.register"/>
  <testcase name="event triggers should support preventDefault when triggerBefore = true" time="0.001" classname="Coral.register"/>
  <testcase name="event triggers should not allow triggerBefore = true without trigger" time="0" classname="Coral.register"/>
  <testcase name="event triggers should not allow triggerBefore = true with trigger as function" time="0" classname="Coral.register"/>
  <testcase name="event triggers should not allow triggerBefore = true with trigger as invalid string" time="0.001" classname="Coral.register"/>
  <testcase name="className should be optional" time="0" classname="Coral.register"/>
  <testcase name="className should allow to set a single class" time="0.001" classname="Coral.register"/>
  <testcase name="className should allow to set multiple classes" time="0" classname="Coral.register"/>
  <testcase name="className should not overwrite pre upgrade classes" time="0" classname="Coral.register">
    <skipped/>
  </testcase>
  <testcase name="className should not duplicate the class when node is cloned" time="0" classname="Coral.register"/>
  <testcase name="Coral.Component should return the right value for toString()" time="0.001" classname="Coral.Component"/>
  <testcase name="Coral.Component should inherit the properties of its parent component" time="0" classname="Coral.Component"/>
  <testcase name="Coral.Component should silently set the properties on initialization" time="0.001" classname="Coral.Component"/>
  <testcase name="Coral.Component should silently set the properties on initialization even if properties are inherited" time="0" classname="Coral.Component"/>
  <testcase name="Coral.Component should support instantiation with markup" time="0.004" classname="Coral.Component"/>
  <testcase name="Coral.Component should support instantiation with new Component()" time="0.001" classname="Coral.Component"/>
  <testcase name="Coral.Component should support instantiation with createElement()" time="0" classname="Coral.Component"/>
  <testcase name="attributes &amp; properties should set property values for boolean attributes" time="0.001" classname="Coral.Component"/>
  <testcase name="attributes &amp; properties should have default value from property descriptor" time="0.013" classname="Coral.Component"/>
  <testcase name="attributes &amp; properties should have default value from property descriptor for invalid input" time="0.015" classname="Coral.Component"/>
  <testcase name="attributes &amp; properties should transform attribute values" time="0.015" classname="Coral.Component"/>
  <testcase name="attributes &amp; properties should be reflected from attribute to property" time="0.05" classname="Coral.Component"/>
  <testcase name="attributes &amp; properties should not set property from attributes when descriptor.attribute=null" time="0.001" classname="Coral.Component"/>
  <testcase name="attributes &amp; properties should be reflected from property to attribute" time="0.033" classname="Coral.Component"/>
  <testcase name="attributes &amp; properties should call &quot;attributeTransform&quot; and &quot;transform&quot; before setting the property" time="0.002" classname="Coral.Component"/>
  <testcase name="attributes &amp; properties should invoke &quot;transform&quot; in component scope" time="0" classname="Coral.Component"/>
  <testcase name="attributes &amp; properties should invoke &quot;attributeTransform&quot; in component scope" time="0" classname="Coral.Component"/>
  <testcase name="attributes &amp; properties should pass the default value to transform functions, in component scope" time="0.001" classname="Coral.Component"/>
  <testcase name="attributes &amp; properties should pass the default value to transform functions on initialization when created from markup, in component scope" time="0.001" classname="Coral.Component"/>
  <testcase name="attributes &amp; properties should not apply a default value if a property has already been set by another setter" time="0" classname="Coral.Component"/>
  <testcase name="eventing event handling should work even when detached" time="0.001" classname="Coral.Component"/>
  <testcase name="eventing event handling should support listening to events in the capture phase" time="0.002" classname="Coral.Component"/>
  <testcase name="eventing event handling should support listening to global events in the capture phase" time="0.007" classname="Coral.Component"/>
  <testcase name="eventing event handling should support listening to window events only when attached" time="0.048" classname="Coral.Component"/>
  <testcase name="eventing event handling should support trigger(), on(), off()" time="0.002" classname="Coral.Component"/>
  <testcase name="eventing event handling should support addEventListener(), removeEventListener()" time="0.001" classname="Coral.Component"/>
  <testcase name="eventing attached/detached #coral-component:attached should be triggered when the component is added to the DOM" time="0.011" classname="Coral.Component"/>
  <testcase name="eventing attached/detached #coral-component:detached should be triggered when the component is removed from the DOM" time="0.032" classname="Coral.Component"/>
  <testcase name="eventing attached/detached #coral-component:detached should be triggered when the component is removed from the DOM" time="0.031" classname="Coral.Component"/>
  <testcase name="visbility .hidden should be false by default" time="0" classname="Coral.Component"/>
  <testcase name="visbility .hidden should reflect from property to attribute" time="0" classname="Coral.Component"/>
  <testcase name="visbility .hidden should reflect from attribute to property" time="0" classname="Coral.Component"/>
  <testcase name="visbility #show() should change hidden state" time="0" classname="Coral.Component"/>
  <testcase name="visbility #hide() should change hidden state" time="0" classname="Coral.Component"/>
  <testcase name="clone a markup component testComponentClone cloned classname should have the same members" time="0" classname="Coral.Component"/>
  <testcase name="clone a markup component testComponentClone cloned classname should have the same length" time="0" classname="Coral.Component"/>
  <testcase name="clone a markup component testComponentClone cloned children should have the same legnth" time="0" classname="Coral.Component"/>
  <testcase name="clone a markup component testComponentClone cloned children should have the same tagname" time="0" classname="Coral.Component"/>
  <testcase name="clone a markup component testComponentClone cloned children should have matching classnames" time="0" classname="Coral.Component"/>
  <testcase name="clone a component instance should test an identical twin" time="0.01" classname="Coral.Component"/>
  <testcase name="set content zones should expose content zones with descriptor.defaultContentZone as instance.defaultContentZone" time="0.001" classname="Coral.Component"/>
  <testcase name="set content zones should define the elements based on the handles" time="0" classname="Coral.Component"/>
  <testcase name="set content zones should set the corresponding content zone when instance.defaultContentZone is reassigned" time="0" classname="Coral.Component"/>
  <testcase name="set content zones should allow setting values on lightweight content zones" time="0.001" classname="Coral.Component"/>
  <testcase name="set content zones should set content zone properties with set({ content: {} })" time="0" classname="Coral.Component"/>
  <testcase name="set content zones should set content zone elements with set({ content: HTMLElement })" time="0" classname="Coral.Component"/>
  <testcase name="set content zones should set lightweight content zone elements with set({ content: HTMLElement })" time="0.001" classname="Coral.Component"/>
  <testcase name="set content zones should set content zone elements with content = HTMLElement" time="0" classname="Coral.Component"/>
  <testcase name="set content zones should swap the content zones when it is added into the DOM" time="0.007" classname="Coral.Component"/>
  <testcase name="set content zones should be able to swap content zones no matter the handle name" time="0.015" classname="Coral.Component"/>
  <testcase name="set content zones should assign content zones that have no initial value" time="0.015" classname="Coral.Component"/>
  <testcase name="set content zones should the content zones as undefined if they are removed" time="0.015" classname="Coral.Component"/>
  <testcase name="set content zones should allow setting the conten zone to null" time="0" classname="Coral.Component"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.Accordion"/>
  <testcase name="Namespace should define the variants in an enum" time="0" classname="Coral.Accordion"/>
  <testcase name="Instantiation should be possible to clone using markup" time="0.001" classname="Coral.Accordion"/>
  <testcase name="Instantiation should be possible to clone a nested accordion using markup" time="0" classname="Coral.Accordion"/>
  <testcase name="Instantiation should be possible to clone a nested in content accordion using markup" time="0" classname="Coral.Accordion"/>
  <testcase name="Instantiation should be possible to clone using js" time="0.001" classname="Coral.Accordion"/>
  <testcase name="Instantiation should be possible to clone an an instance with interactive components and elements in the item label" time="0.001" classname="Coral.Accordion"/>
  <testcase name="API #selectedItems should default to empty array" time="0" classname="Coral.Accordion"/>
  <testcase name="API #selectedItem should default to null" time="0" classname="Coral.Accordion"/>
  <testcase name="API #multiple should default to false" time="0" classname="Coral.Accordion"/>
  <testcase name="API #variant should defailt to DEFAULT" time="0" classname="Coral.Accordion"/>
  <testcase name="API #selected should default to false" time="0" classname="Coral.Accordion"/>
  <testcase name="API #disabled should default to false" time="0" classname="Coral.Accordion"/>
  <testcase name="API #content should not be null" time="0" classname="Coral.Accordion"/>
  <testcase name="API #label should not be null" time="0" classname="Coral.Accordion"/>
  <testcase name="Markup #multiple should allow to select all items if [multiple=true]" time="0.012" classname="Coral.Accordion"/>
  <testcase name="Markup #multiple should only allow to select 1 item if [multiple=false]" time="0.007" classname="Coral.Accordion"/>
  <testcase name="Markup #selectedItems should return all selected items" time="0.003" classname="Coral.Accordion"/>
  <testcase name="Markup #selectedItem should return the first selected item" time="0.003" classname="Coral.Accordion"/>
  <testcase name="Markup #selectedItem should return null if no item is selected" time="0.005" classname="Coral.Accordion"/>
  <testcase name="Markup #variant should add the variant class " time="0.002" classname="Coral.Accordion"/>
  <testcase name="Markup #selected should expand collapsible in accordion" time="0.006" classname="Coral.Accordion"/>
  <testcase name="Markup #selected should update the active panel on selection changing" time="0.006" classname="Coral.Accordion"/>
  <testcase name="Markup #coral-interactive should expand collapsible in accordion" time="0.018" classname="Coral.Accordion"/>
  <testcase name="Markup #coral-interactive should expand collapsible in accordion while clicking the item label" time="0.018" classname="Coral.Accordion"/>
  <testcase name="Markup #coral-interactive should not expand collapsible in accordion while clicking on a checkbox in the item label" time="0.027" classname="Coral.Accordion"/>
  <testcase name="Markup #coral-interactive should expand collapsible in accordion while clicking on the chevron while a child tag has the coral-interactive attribute in the item label" time="0.033" classname="Coral.Accordion"/>
  <testcase name="Markup #coral-interactive should not expand collapsible in accordion while clicking on a button in the item label" time="0.021" classname="Coral.Accordion"/>
  <testcase name="Markup #coral-interactive should not expand collapsible in accordion while clicking on a anchor in the item label" time="0.014" classname="Coral.Accordion"/>
  <testcase name="Markup #coral-interactive should not expand collapsible in accordion while interacting with a textarea in the item label" time="0.02" classname="Coral.Accordion"/>
  <testcase name="Markup #coral-interactive should not expand collapsible in accordion while clicking on a radio in the item label" time="0.018" classname="Coral.Accordion"/>
  <testcase name="Events #coral-accordion:change should trigger on selection change" time="0.005" classname="Coral.Accordion"/>
  <testcase name="Events #coral-accordion:change should return an array for selection and oldSelection if multiple=true" time="0.005" classname="Coral.Accordion"/>
  <testcase name="Events #coral-accordion:change should trigger on multiple change" time="0.008" classname="Coral.Accordion"/>
  <testcase name="Events #coral-collection:add should trigger coral-collection:add when adding an item" time="0.006" classname="Coral.Accordion"/>
  <testcase name="Events coral-collection:remove should trigger coral-collection:remove when removing an item" time="0.011" classname="Coral.Accordion"/>
  <testcase name="User Interaction should expand panel in accordion when header is clicked" time="0.005" classname="Coral.Accordion"/>
  <testcase name="User Interaction should collapse expanded panel in accordion when header is clicked" time="0.008" classname="Coral.Accordion"/>
  <testcase name="User Interaction should not update the active panel when a disabled panel is clicked" time="0.007" classname="Coral.Accordion"/>
  <testcase name="Implementation Details accessibility should have role=tablist" time="0.002" classname="Coral.Accordion"/>
  <testcase name="Implementation Details animation should adapt styling after collapsing out" time="0.012" classname="Coral.Accordion"/>
  <testcase name="Implementation Details animation should adapt styling after collapsing in" time="0.002" classname="Coral.Accordion"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.ActionBar.Container"/>
  <testcase name="Implementation Details should warn that coral-actionbar-container is deprecated" time="0.005" classname="Coral.ActionBar.Container"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.ActionBar.Primary"/>
  <testcase name="API #items #add should insert items before the more button" time="0" classname="Coral.ActionBar.Primary"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.ActionBar.Secondary"/>
  <testcase name="API #items #add should insert items before the more button" time="0" classname="Coral.ActionBar.Secondary"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.ActionBar.Item"/>
  <testcase name="API #content should default to empty string" time="0" classname="Coral.ActionBar.Item"/>
  <testcase name="API #content should support HTML content" time="0" classname="Coral.ActionBar.Item"/>
  <testcase name="API #content should not be settable" time="0" classname="Coral.ActionBar.Item"/>
  <testcase name="Markup #content should have content set to innerHTML if property not provided" time="0.001" classname="Coral.ActionBar.Item"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.ActionBar"/>
  <testcase name="Instantiation should be possible to clone via markup" time="0.001" classname="Coral.ActionBar"/>
  <testcase name="API should initialize ActionBar left wrapper with right default values" time="0" classname="Coral.ActionBar"/>
  <testcase name="API should initialize ActionBar right wrapper with right default values" time="0" classname="Coral.ActionBar"/>
  <testcase name="API should create action bar items by default (wrapped in actionbar-items)" time="0.001" classname="Coral.ActionBar"/>
  <testcase name="API should be possible to set the more button text" time="0.001" classname="Coral.ActionBar"/>
  <testcase name="API should be possible to add ActionBarItems to the ActionBar (it uses the normal collection API)" time="0" classname="Coral.ActionBar"/>
  <testcase name="API should be possible to remove ActionBarItems from the ActionBar (it uses the normal collection API)" time="0" classname="Coral.ActionBar"/>
  <testcase name="API should be possible to set the threshold on left/right wrappers => invisible items are moved offscreen" time="0.002" classname="Coral.ActionBar"/>
  <testcase name="Markup should have right classes set" time="0.011" classname="Coral.ActionBar"/>
  <testcase name="Markup should generate the matching content zones" time="0.017" classname="Coral.ActionBar"/>
  <testcase name="Markup should have right tagname set" time="0.018" classname="Coral.ActionBar"/>
  <testcase name="Markup should generate 2 popovers that are hidden by default" time="0.012" classname="Coral.ActionBar"/>
  <testcase name="Markup should generate 2 more buttons that are &quot;hidden&quot; (offscreen) by default" time="0.011" classname="Coral.ActionBar"/>
  <testcase name="Markup should be possible to instantiate a complex actionbar using markup" time="0.058" classname="Coral.ActionBar"/>
  <testcase name="Markup should be possible to instantiate a actionbar without wrapper components using markup" time="0.024" classname="Coral.ActionBar"/>
  <testcase name="Markup #coral-actionbar-container should generate the matching content zones with all containers" time="0.022" classname="Coral.ActionBar"/>
  <testcase name="Markup #coral-actionbar-container should generate the matching content zones with one container" time="0.012" classname="Coral.ActionBar"/>
  <testcase name="Markup #coral-actionbar-container should copy the container configurations to the new container" time="0.057" classname="Coral.ActionBar"/>
  <testcase name="Markup #coral-actionbar-container should copy content into new container" time="0.019" classname="Coral.ActionBar"/>
  <testcase name="Markup #coral-actionbar-container should copy over existing items" time="0.051" classname="Coral.ActionBar"/>
  <testcase name="User Interaction should keyboard navigation to jump from current selected actionbar item to next visible actionbar item" time="0.051" classname="Coral.ActionBar"/>
  <testcase name="User Interaction should open a popover on click on &quot;more&quot; button (only one &quot;more&quot; popover should be open at once)" time="0.053" classname="Coral.ActionBar"/>
  <testcase name="User Interaction should open a popover on click on &quot;more&quot; button without throwing an exception if all items are disabled" time="0.047" classname="Coral.ActionBar"/>
  <testcase name="User Interaction should close a popover on click outside of popover" time="0.044" classname="Coral.ActionBar"/>
  <testcase name="User Interaction should be possible to make two bars that switch" time="0.149" classname="Coral.ActionBar"/>
  <testcase name="Implementation Details should move &quot;invisible&quot; items into popovers once popovers are opened and moved back once popover is closed" time="0.104" classname="Coral.ActionBar"/>
  <testcase name="Implementation Details should move items offscreen, if there is not enough space available at screen" time="0.101" classname="Coral.ActionBar"/>
  <testcase name="Implementation Details should not move items to popover, that are hidden on purpose" time="0.104" classname="Coral.ActionBar"/>
  <testcase name="Implementation Details should be possible to add items straight after init without messing up the order... (more button used to go to the wrong place)" time="0.001" classname="Coral.ActionBar"/>
  <testcase name="Implementation Details should be possible to create an actionbar that is initially hidden (one of its parents is display:none)" time="0.11" classname="Coral.ActionBar"/>
  <testcase name="Implementation Details should allow tab navigation to jump between left side and right side of the actionbar all items in between do not have a tabindex )" time="0.042" classname="Coral.ActionBar"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.Alert"/>
  <testcase name="Namespace should define the variants in an enum" time="0" classname="Coral.Alert"/>
  <testcase name="Namespace should define the sizes in an enum" time="0.001" classname="Coral.Alert"/>
  <testcase name="Instantiation should be possible to clone using markup" time="0" classname="Coral.Alert"/>
  <testcase name="Instantiation should be possible to clone a large alert using markup" time="0" classname="Coral.Alert"/>
  <testcase name="Instantiation should be possible to clone using js" time="0.001" classname="Coral.Alert"/>
  <testcase name="Instantiation should be possible to clone a large alert using js" time="0.001" classname="Coral.Alert"/>
  <testcase name="API #content should set provided content" time="0.001" classname="Coral.Alert"/>
  <testcase name="API #header should set provided header" time="0" classname="Coral.Alert"/>
  <testcase name="API #size should default to small" time="0" classname="Coral.Alert"/>
  <testcase name="API #size should set correct className when size is small" time="0" classname="Coral.Alert"/>
  <testcase name="API #size should set correct className when size is large" time="0" classname="Coral.Alert"/>
  <testcase name="API #variant should default to info" time="0" classname="Coral.Alert"/>
  <testcase name="API #variant should set correct className when variant is error" time="0.001" classname="Coral.Alert"/>
  <testcase name="API #variant should set correct className when variant is warning" time="0" classname="Coral.Alert"/>
  <testcase name="API #variant should set correct className when variant is success" time="0" classname="Coral.Alert"/>
  <testcase name="API #variant should set correct className when variant is help" time="0" classname="Coral.Alert"/>
  <testcase name="API #variant should set correct className when variant is info" time="0.001" classname="Coral.Alert"/>
  <testcase name="#Markup #header should have the correct order when header set" time="0" classname="Coral.Alert"/>
  <testcase name="#Markup #content should have the correct order on render" time="0.001" classname="Coral.Alert"/>
  <testcase name="#Markup #content should have the correct order when content set" time="0.001" classname="Coral.Alert"/>
  <testcase name="#Markup #footer should have the correct order when footer set" time="0" classname="Coral.Alert"/>
  <testcase name="User Interaction #coral-close should hide when any element with [coral-close] clicked" time="0.001" classname="Coral.Alert"/>
  <testcase name="User Interaction #coral-close should only hide if selector matches value of [coral-close], should not let events bubble" time="0.002" classname="Coral.Alert"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.AnchorButton"/>
  <testcase name="Instantiation should be possible using new" time="0.001" classname="Coral.AnchorButton"/>
  <testcase name="Instantiation should be possible using createElement" time="0.001" classname="Coral.AnchorButton"/>
  <testcase name="Instantiation should be possible to clone using markup" time="0" classname="Coral.AnchorButton"/>
  <testcase name="Instantiation should be possible to clone a button with size attribute using markup" time="0" classname="Coral.AnchorButton"/>
  <testcase name="Instantiation should be possible to clone a button with icon attribute using markup" time="0" classname="Coral.AnchorButton"/>
  <testcase name="Instantiation should be possible to clone a button with icon and size attribute using markup" time="0" classname="Coral.AnchorButton"/>
  <testcase name="Instantiation should be possible to clone a button using js" time="0.001" classname="Coral.AnchorButton"/>
  <testcase name="Instantiation should be possible to clone a button with a specific size using js" time="0" classname="Coral.AnchorButton"/>
  <testcase name="Instantiation should be possible to clone a button with an icon using js" time="0.001" classname="Coral.AnchorButton"/>
  <testcase name="Markup should accept all attributes at once" time="0.001" classname="Coral.AnchorButton"/>
  <testcase name="Markup #label should be initially empty" time="0" classname="Coral.AnchorButton"/>
  <testcase name="Markup #label should use the textContent as the initial value" time="0" classname="Coral.AnchorButton"/>
  <testcase name="Markup #label should resync the icon once the label is modified" time="0.002" classname="Coral.AnchorButton"/>
  <testcase name="Markup #label should change to square if the label is removed" time="0.002" classname="Coral.AnchorButton"/>
  <testcase name="Markup #label should remove square if the label is added" time="0.001" classname="Coral.AnchorButton"/>
  <testcase name="Markup #icon should be initially empty" time="0" classname="Coral.AnchorButton"/>
  <testcase name="Markup #icon should set the new icon" time="0.001" classname="Coral.AnchorButton"/>
  <testcase name="Markup #icon should not be square when there is a label" time="0.001" classname="Coral.AnchorButton"/>
  <testcase name="Markup #icon should not create a new icon if the value is updated" time="0" classname="Coral.AnchorButton"/>
  <testcase name="Markup #icon should hide the icon element once the icon is set to empty string" time="0.001" classname="Coral.AnchorButton"/>
  <testcase name="Markup #iconsize should be initially the default" time="0.001" classname="Coral.AnchorButton"/>
  <testcase name="Markup #iconsize should set the new iconsize" time="0.001" classname="Coral.AnchorButton"/>
  <testcase name="Markup #iconsize should discard invalid iconsize" time="0.001" classname="Coral.AnchorButton"/>
  <testcase name="Markup #size should default to medium" time="0.001" classname="Coral.AnchorButton"/>
  <testcase name="Markup #size should set the size modifier" time="0.001" classname="Coral.AnchorButton"/>
  <testcase name="Markup #block should be initially false" time="0.001" classname="Coral.AnchorButton"/>
  <testcase name="Markup #block should set the size modifier" time="0" classname="Coral.AnchorButton"/>
  <testcase name="Markup #block should behave like an attribute boolean" time="0" classname="Coral.AnchorButton"/>
  <testcase name="Markup #variant should be initially Coral.AnchorButton.variant.DEFAULT" time="0.001" classname="Coral.AnchorButton"/>
  <testcase name="Markup #variant should set the new variant" time="0.001" classname="Coral.AnchorButton"/>
  <testcase name="Markup #variant should fall back to default variant on empty variant" time="0.001" classname="Coral.AnchorButton"/>
  <testcase name="Markup #variant should fall back to default variant for invalid variant" time="0.001" classname="Coral.AnchorButton"/>
  <testcase name="Markup #variant should remove variant classnames when variant changes" time="0" classname="Coral.AnchorButton"/>
  <testcase name="API #icon should default to null" time="0" classname="Coral.AnchorButton"/>
  <testcase name="API #icon should set the new icon" time="0" classname="Coral.AnchorButton"/>
  <testcase name="API #icon should convert everything to string" time="0" classname="Coral.AnchorButton"/>
  <testcase name="API #icon should remove the icon with empty string" time="0" classname="Coral.AnchorButton"/>
  <testcase name="API #icon should remove the icon with null" time="0" classname="Coral.AnchorButton"/>
  <testcase name="API #icon should remove the icon with undefined" time="0" classname="Coral.AnchorButton"/>
  <testcase name="API #iconSize should default to Coral.Icon.size.SMALL" time="0" classname="Coral.AnchorButton"/>
  <testcase name="API #iconSize should sync the iconSize correctly" time="0" classname="Coral.AnchorButton"/>
  <testcase name="API #iconSize should set the new size even if icon is not set" time="0.001" classname="Coral.AnchorButton"/>
  <testcase name="API #iconSize should set the new size" time="0" classname="Coral.AnchorButton"/>
  <testcase name="API #iconSize should accept lowercase values" time="0.001" classname="Coral.AnchorButton"/>
  <testcase name="API #iconSize should be set with an attribute" time="0" classname="Coral.AnchorButton"/>
  <testcase name="API #iconSize should discard values not part of the enum" time="0.001" classname="Coral.AnchorButton"/>
  <testcase name="API #iconSize should discard unknonwn attribute" time="0" classname="Coral.AnchorButton"/>
  <testcase name="API #iconSize should keep the size after the icon is changed" time="0.001" classname="Coral.AnchorButton"/>
  <testcase name="Accessibility should have aria-disabled, role and tabindex set by default" time="0" classname="Coral.AnchorButton"/>
  <testcase name="Accessibility should have tabindex set to -1 while disabled" time="0.002" classname="Coral.AnchorButton"/>
  <testcase name="Accessibility should set is-select on keyDown" time="0.001" classname="Coral.AnchorButton"/>
  <testcase name="Accessibility should not set is-select on keyDown" time="0" classname="Coral.AnchorButton"/>
  <testcase name="Event should trigger on keydown" time="0.001" classname="Coral.AnchorButton"/>
  <testcase name="Event should trigger on keyup" time="0" classname="Coral.AnchorButton"/>
  <testcase name="Event should trigger on keypressed" time="0.003" classname="Coral.AnchorButton"/>
  <testcase name="Event should prevent event from bubbling while disabled" time="0.001" classname="Coral.AnchorButton"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.Autocomplete.Item"/>
  <testcase name="API #content should default to empty string" time="0" classname="Coral.Autocomplete.Item"/>
  <testcase name="API #content should support HTML content" time="0.001" classname="Coral.Autocomplete.Item"/>
  <testcase name="API #value should default empty string" time="0.001" classname="Coral.Autocomplete.Item"/>
  <testcase name="API #value should default to the content" time="0" classname="Coral.Autocomplete.Item"/>
  <testcase name="API #value should keep maximum 1 space from the content" time="0" classname="Coral.Autocomplete.Item"/>
  <testcase name="API #value should remove the html from the value" time="0" classname="Coral.Autocomplete.Item"/>
  <testcase name="API #value should convert the value to string" time="0.001" classname="Coral.Autocomplete.Item"/>
  <testcase name="API #value should reflect the value" time="0" classname="Coral.Autocomplete.Item"/>
  <testcase name="API #selected should be not be selected by default" time="0" classname="Coral.Autocomplete.Item"/>
  <testcase name="API #selected should be settable" time="0" classname="Coral.Autocomplete.Item"/>
  <testcase name="API #selected should accept truthy" time="0" classname="Coral.Autocomplete.Item"/>
  <testcase name="API #disabled should be false by default" time="0" classname="Coral.Autocomplete.Item"/>
  <testcase name="API #disabled should be reflected" time="0" classname="Coral.Autocomplete.Item"/>
  <testcase name="Markup #content should have content set to innerHTML if property not provided" time="0.001" classname="Coral.Autocomplete.Item"/>
  <testcase name="Markup #content should support HTML content" time="0" classname="Coral.Autocomplete.Item"/>
  <testcase name="Markup #value should set the value from markup" time="0.001" classname="Coral.Autocomplete.Item"/>
  <testcase name="Markup #value should default to the content" time="0" classname="Coral.Autocomplete.Item"/>
  <testcase name="Events #coral-autocomplete-item:_contentchanged should trigger when changing the content" time="0.003" classname="Coral.Autocomplete.Item"/>
  <testcase name="Events #coral-autocomplete-item:_valuechanged should trigger when changing the value" time="0.001" classname="Coral.Autocomplete.Item"/>
  <testcase name="Events #coral-autocomplete-item:_selectedchanged should trigger when changing the selection" time="0.001" classname="Coral.Autocomplete.Item"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.Autocomplete"/>
  <testcase name="Namespace should expose enums" time="0" classname="Coral.Autocomplete"/>
  <testcase name="Instantiation should be possible to clone using markup" time="0" classname="Coral.Autocomplete"/>
  <testcase name="Instantiation should be possible to clone using js" time="0.004" classname="Coral.Autocomplete"/>
  <testcase name="API #clear() should clear the value" time="0" classname="Coral.Autocomplete"/>
  <testcase name="API #showSuggestions() should display selections" time="0.071" classname="Coral.Autocomplete"/>
  <testcase name="API #name should default to empty string" time="0" classname="Coral.Autocomplete"/>
  <testcase name="API #name should set field name when name set" time="0" classname="Coral.Autocomplete"/>
  <testcase name="API #multiple should default to false" time="0" classname="Coral.Autocomplete"/>
  <testcase name="API #forceSelection should default to false" time="0" classname="Coral.Autocomplete"/>
  <testcase name="API #delay should default to 200" time="0.002" classname="Coral.Autocomplete"/>
  <testcase name="API #value should default to empty string" time="0" classname="Coral.Autocomplete"/>
  <testcase name="API #value should set field value and select items when value set" time="0" classname="Coral.Autocomplete"/>
  <testcase name="API #values should default to empty array" time="0" classname="Coral.Autocomplete"/>
  <testcase name="API #values should add tags and select items when values set" time="0.005" classname="Coral.Autocomplete"/>
  <testcase name="API #values should remove values when a tag is removed" time="0.047" classname="Coral.Autocomplete"/>
  <testcase name="API #placeholder should default to empty string" time="0" classname="Coral.Autocomplete"/>
  <testcase name="API #placeholder should set field placeholder" time="0.004" classname="Coral.Autocomplete"/>
  <testcase name="API #maxLength should default to -1" time="0" classname="Coral.Autocomplete"/>
  <testcase name="API #maxLength should set field maxlength to 10" time="0.003" classname="Coral.Autocomplete"/>
  <testcase name="API #maxLength should not allow setting -1" time="0" classname="Coral.Autocomplete"/>
  <testcase name="API #maxLength should allow setting a string" time="0.005" classname="Coral.Autocomplete"/>
  <testcase name="API #icon should default to empty string" time="0" classname="Coral.Autocomplete"/>
  <testcase name="API #icon should set icon" time="0" classname="Coral.Autocomplete"/>
  <testcase name="API #icon should hide icon when not set" time="0.001" classname="Coral.Autocomplete"/>
  <testcase name="Events #coral-autocomplete:showsuggestions should support &quot;remote&quot; suggestions with coral-autocomplete:showsuggestions" time="0.003" classname="Coral.Autocomplete"/>
  <testcase name="Events #coral-autocomplete:showsuggestions should add items to the collection when selection from suggestions added with addSuggestions()" time="0.006" classname="Coral.Autocomplete"/>
  <testcase name="Events #coral-autocomplete:showsuggestions should add items to the collection, when selected from suggestions with keyboard and added with addSuggestions()" time="0.011" classname="Coral.Autocomplete"/>
  <testcase name="Events #change should trigger change events when an item is selected inside of the SelectList" time="0.013" classname="Coral.Autocomplete"/>
  <testcase name="Events #change should trigger change events when an item is selected by exact match keyboard entry" time="0.024" classname="Coral.Autocomplete"/>
  <testcase name="Events #change should trigger a change event when the input is cleared" time="0.031" classname="Coral.Autocomplete"/>
  <testcase name="Events #change should trigger change events when an item is selected by non-matching keyboard entry" time="0.008" classname="Coral.Autocomplete"/>
  <testcase name="Events #change should not trigger two change events when an item is selected and then component lost focus" time="0.006" classname="Coral.Autocomplete"/>
  <testcase name="Events #change should not trigger two change events when an item is selected by non-matching keyboard entry and then component lost focus" time="0.007" classname="Coral.Autocomplete"/>
  <testcase name="Events #change should trigger change events when a tag is removed after a user interaction" time="0.013" classname="Coral.Autocomplete"/>
  <testcase name="Events #coral-autocomplete-item:_valuechanged should not be propagated on value change" time="0.018" classname="Coral.Autocomplete"/>
  <testcase name="Events #coral-autocomplete-item:_contentchanged should not be propagated" time="0.024" classname="Coral.Autocomplete"/>
  <testcase name="Events #coral-autocomplete-item:_selectedchanged should not be propagated" time="0.023" classname="Coral.Autocomplete"/>
  <testcase name="User Interaction should clear the input field after valid selection in multiselect mode" time="0.017" classname="Coral.Autocomplete"/>
  <testcase name="User Interaction should be possible to deselect an item by setting an incomplete text in the input in single select mode (if forceSelection === true)" time="0.022" classname="Coral.Autocomplete"/>
  <testcase name="User Interaction should not be possible to deselect an item by setting an incomplete text in the input in single select mode (if forceSelection === false)" time="0.018" classname="Coral.Autocomplete"/>
  <testcase name="User Interaction should be possible to deselect an item by setting an empty text in the input in single select mode (if forceSelection === false)" time="0.022" classname="Coral.Autocomplete"/>
  <testcase name="User Interaction should be possible to change the value by setting an any text in the input in multi select mode (if forceSelection === false)" time="0.009" classname="Coral.Autocomplete"/>
  <testcase name="User Interaction should be possible to change the value by setting any text and empty text in the input in single select mode (if forceSelection === false)" time="0.007" classname="Coral.Autocomplete"/>
  <testcase name="User Interaction should be possible to select an item using the keyboard alone (if forceSelection === true)" time="0.036" classname="Coral.Autocomplete"/>
  <testcase name="User Interaction should be possible set focus to an item in the dropdown menu without closing the menu" time="0.039" classname="Coral.Autocomplete"/>
  <testcase name="User Interaction should be possible close menu by clicking the toggle button" time="0.012" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details should allow items to be added and selected before appending to the DOM" time="0.032" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details should deselect other items when an item is selected" time="0.03" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details should not escape special characters when an item is selected" time="0.005" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details should not escape special characters when an item is selected from the selectlist via mouse click" time="0.011" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details should not escape special characters when an item is selected from the selectlist via keyboard enter" time="0.014" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details should support disabled items" time="0.002" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details should update accessibility label on toggle button when number of suggestions available" time="0.227" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details should display the overlay with items and their html content" time="0.221" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details should select the best matching option when an item is selected inside of the SelectList" time="0.231" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details should suggest the best matching option supporting html entities" time="0.232" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details #formField (single select) testFormField API #value should be provided" time="0" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details #formField (single select) testFormField API #value should have the correct default" time="0" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details #formField (single select) testFormField API #value should not be reflected" time="0" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details #formField (single select) testFormField API #name should have empty string as default" time="0" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details #formField (single select) testFormField API #name should transform everything to a string" time="0" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details #formField (single select) testFormField API #name should be set synchronously" time="0.001" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details #formField (single select) testFormField API #name should not submit a value when the name is not specified even though there is a value" time="0.003" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details #formField (single select) testFormField API #name should submit the one single value" time="0.002" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details #formField (single select) testFormField API #required should default to false" time="0.001" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details #formField (single select) testFormField API #invalid should default to false" time="0" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details #formField (single select) testFormField API #invalid should be settable programmatically" time="0" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details #formField (single select) testFormField API #disabled should default to false" time="0" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details #formField (single select) testFormField API #disabled should behave like a boolean value" time="0.001" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details #formField (single select) testFormField API #readOnly should default to false" time="0" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details #formField (single select) testFormField API #labelledBy should remove labels with empty string" time="0" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details #formField (single select) testFormField API #labelledBy should support multiple labels" time="0.001" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details #formField (single select) testFormField API #clear() should set the valueProperty to the default when called" time="0" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details #formField (single select) testFormField API #reset() should reset to the initial value when called" time="0" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details #formField (single select) testFormField API #reset() should be called when form is reset programmatically" time="0.002" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details #formField (single select) testFormField API #reset() should be called when form is reset via reset input" time="0.002" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details #formField (single select) testFormField Markup #disabled should behave like a boolean value" time="0.001" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details #formField (single select) testFormField Markup #labelledby should label component using attribute" time="0.001" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details #formField (single select) testFormField Events #change should not be trigged when setting the value programmatically" time="0" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details #formField (single select) testFormField Events #change should trigger a change event when we interact with the internal input" time="0" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details #formField (multi select) testFormField API #value should be provided" time="0.001" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details #formField (multi select) testFormField API #value should have the correct default" time="0.002" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details #formField (multi select) testFormField API #value should not be reflected" time="0.003" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details #formField (multi select) testFormField API #name should have empty string as default" time="0" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details #formField (multi select) testFormField API #name should transform everything to a string" time="0" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details #formField (multi select) testFormField API #name should be set synchronously" time="0.001" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details #formField (multi select) testFormField API #name should not submit a value when the name is not specified even though there is a value" time="0.017" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details #formField (multi select) testFormField API #name should submit the one single value" time="0.014" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details #formField (multi select) testFormField API #required should default to false" time="0" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details #formField (multi select) testFormField API #invalid should default to false" time="0" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details #formField (multi select) testFormField API #invalid should be settable programmatically" time="0" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details #formField (multi select) testFormField API #disabled should default to false" time="0" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details #formField (multi select) testFormField API #disabled should behave like a boolean value" time="0.002" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details #formField (multi select) testFormField API #readOnly should default to false" time="0" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details #formField (multi select) testFormField API #labelledBy should remove labels with empty string" time="0" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details #formField (multi select) testFormField API #labelledBy should support multiple labels" time="0.002" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details #formField (multi select) testFormField API #clear() should set the valueProperty to the default when called" time="0.002" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details #formField (multi select) testFormField API #reset() should reset to the initial value when called" time="0.007" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details #formField (multi select) testFormField API #reset() should be called when form is reset programmatically" time="0.019" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details #formField (multi select) testFormField API #reset() should be called when form is reset via reset input" time="0.014" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details #formField (multi select) testFormField Markup #disabled should behave like a boolean value" time="0.001" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details #formField (multi select) testFormField Markup #labelledby should label component using attribute" time="0.001" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details #formField (multi select) testFormField Events #change should not be trigged when setting the value programmatically" time="0.002" classname="Coral.Autocomplete"/>
  <testcase name="Implementation Details #formField (multi select) testFormField Events #change should trigger a change event when we interact with the internal input" time="0.001" classname="Coral.Autocomplete"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.Button"/>
  <testcase name="Namespace should define the variants in an enum" time="0" classname="Coral.Button"/>
  <testcase name="Namespace should define the iconPositions in an enum" time="0" classname="Coral.Button"/>
  <testcase name="Instantiation should be possible using new" time="0" classname="Coral.Button"/>
  <testcase name="Instantiation should not blow away loose HTML" time="0.001" classname="Coral.Button"/>
  <testcase name="Instantiation should be possible to clone using markup" time="0" classname="Coral.Button"/>
  <testcase name="Instantiation should be possible to clone a button with size attribute using markup" time="0" classname="Coral.Button"/>
  <testcase name="Instantiation should be possible to clone a button with icon attribute using markup" time="0.001" classname="Coral.Button"/>
  <testcase name="Instantiation should be possible to clone a button with icon and size attribute using markup" time="0" classname="Coral.Button"/>
  <testcase name="Instantiation should be possible to clone a button with quiet attribute using markup" time="0" classname="Coral.Button"/>
  <testcase name="Instantiation should be possible to clone a button using js" time="0.001" classname="Coral.Button"/>
  <testcase name="Instantiation should be possible to clone a button with a specific size using js" time="0" classname="Coral.Button"/>
  <testcase name="Instantiation should be possible to clone a button with an icon using js" time="0" classname="Coral.Button"/>
  <testcase name="Instantiation should be possible to clone a button with a variant using js" time="0" classname="Coral.Button"/>
  <testcase name="Markup should accept all attributes at once" time="0.002" classname="Coral.Button"/>
  <testcase name="Markup #hidden should hide component on false" time="0.001" classname="Coral.Button"/>
  <testcase name="Markup #label should be initially empty" time="0" classname="Coral.Button"/>
  <testcase name="Markup #label should use the existing nodes as the initial label value" time="0" classname="Coral.Button"/>
  <testcase name="Markup #label should resync the icon once the label is modified" time="0.001" classname="Coral.Button"/>
  <testcase name="Markup #label should change to square if the label is removed" time="0.001" classname="Coral.Button"/>
  <testcase name="Markup #label should remove square if the label is added" time="0.001" classname="Coral.Button"/>
  <testcase name="Markup #icon should be initially empty" time="0" classname="Coral.Button"/>
  <testcase name="Markup #icon should set a new icon" time="0" classname="Coral.Button"/>
  <testcase name="Markup #icon should not be square when there is a label" time="0.001" classname="Coral.Button"/>
  <testcase name="Markup #icon should have default icon alt text when there is no label" time="0.001" classname="Coral.Button"/>
  <testcase name="Markup #icon should not have icon alt text when there is a label" time="0.001" classname="Coral.Button"/>
  <testcase name="Markup #icon should remove icon alt text if the label is added" time="0.006" classname="Coral.Button"/>
  <testcase name="Markup #icon should restore default icon alt text if the label is removed" time="0.008" classname="Coral.Button"/>
  <testcase name="Markup #icon should not create a new icon if the value is updated" time="0.007" classname="Coral.Button"/>
  <testcase name="Markup #icon should hide the icon element once the icon is set to empty string" time="0.001" classname="Coral.Button"/>
  <testcase name="Markup #iconsize should be initially the default" time="0.001" classname="Coral.Button"/>
  <testcase name="Markup #iconsize should set the new iconsize" time="0.001" classname="Coral.Button"/>
  <testcase name="Markup #iconsize should discard invalid iconsize" time="0.001" classname="Coral.Button"/>
  <testcase name="Markup #iconposition should generate icon per default on left when not defined" time="0.001" classname="Coral.Button"/>
  <testcase name="Markup #iconposition should generate icon on the left when defined in iconposition" time="0.001" classname="Coral.Button"/>
  <testcase name="Markup #iconposition should generate icon on the right when defined in iconposition" time="0.001" classname="Coral.Button"/>
  <testcase name="Markup #iconposition should move icon on the left iconposition is changed on runtime" time="0.001" classname="Coral.Button"/>
  <testcase name="Markup #iconposition should default to &quot;left&quot; when the attribute is removed" time="0.001" classname="Coral.Button"/>
  <testcase name="Markup #size should default to medium" time="0.001" classname="Coral.Button"/>
  <testcase name="Markup #size should set the size modifier" time="0.001" classname="Coral.Button"/>
  <testcase name="Markup #block should be initially false" time="0.001" classname="Coral.Button"/>
  <testcase name="Markup #block should set the size modifier" time="0.001" classname="Coral.Button"/>
  <testcase name="Markup #block should behave like an attribute boolean" time="0.001" classname="Coral.Button"/>
  <testcase name="Markup #variant should be initially Coral.Button.variant.DEFAULT" time="0.001" classname="Coral.Button"/>
  <testcase name="Markup #variant should set the new variant" time="0.001" classname="Coral.Button"/>
  <testcase name="Markup #variant should add the default class if variant is empty" time="0.001" classname="Coral.Button"/>
  <testcase name="Markup #variant should go back to default variant for invalid variant" time="0.001" classname="Coral.Button"/>
  <testcase name="Markup #variant should remove variant classnames when variant changes" time="0.001" classname="Coral.Button"/>
  <testcase name="Markup #selected should default to false" time="0.001" classname="Coral.Button"/>
  <testcase name="Markup #selected should be settable" time="0" classname="Coral.Button"/>
  <testcase name="API #icon should default to empty string" time="0" classname="Coral.Button"/>
  <testcase name="API #icon should set the new icon" time="0.001" classname="Coral.Button"/>
  <testcase name="API #icon should convert everything to string" time="0" classname="Coral.Button"/>
  <testcase name="API #icon should remove the icon with empty string" time="0" classname="Coral.Button"/>
  <testcase name="API #icon should remove the icon with null" time="0" classname="Coral.Button"/>
  <testcase name="API #icon should remove the icon with undefined" time="0" classname="Coral.Button"/>
  <testcase name="API #iconSize should default to Coral.Icon.size.SMALL" time="0.001" classname="Coral.Button"/>
  <testcase name="API #iconSize should sync the iconSize correctly" time="0.001" classname="Coral.Button"/>
  <testcase name="API #iconSize should set the new size even if icon is not set" time="0" classname="Coral.Button"/>
  <testcase name="API #iconSize should set the new size" time="0" classname="Coral.Button"/>
  <testcase name="API #iconSize should accept lowercase values" time="0" classname="Coral.Button"/>
  <testcase name="API #iconSize should be set with an attribute" time="0" classname="Coral.Button"/>
  <testcase name="API #iconSize should discard values not part of the enum" time="0.001" classname="Coral.Button"/>
  <testcase name="API #iconSize should discard unknonwn attribute" time="0" classname="Coral.Button"/>
  <testcase name="API #iconSize should keep the size after the icon is changed" time="0" classname="Coral.Button"/>
  <testcase name="API #iconPosition should default to left" time="0" classname="Coral.Button"/>
  <testcase name="API #selected should default to false" time="0" classname="Coral.Button"/>
  <testcase name="API #selected should be settable" time="0.001" classname="Coral.Button"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.ButtonGroup"/>
  <testcase name="Namespace should define the selection modes in an enum" time="0" classname="Coral.ButtonGroup"/>
  <testcase name="Instantiation should be possible to clone using markup" time="0" classname="Coral.ButtonGroup"/>
  <testcase name="Instantiation should be possible to clone using js" time="0.003" classname="Coral.ButtonGroup"/>
  <testcase name="API #items should be readOnly" time="0.001" classname="Coral.ButtonGroup"/>
  <testcase name="API #items should get all the items with getAll()" time="0" classname="Coral.ButtonGroup"/>
  <testcase name="API #items should remove all the items with clear()" time="0.002" classname="Coral.ButtonGroup"/>
  <testcase name="API #items should add items using add()" time="0" classname="Coral.ButtonGroup"/>
  <testcase name="API #items should allow adding using an object notation" time="0" classname="Coral.ButtonGroup"/>
  <testcase name="API #items should allow adding selected items using an object notation" time="0.005" classname="Coral.ButtonGroup"/>
  <testcase name="API #items should allow adding a selected button" time="0.001" classname="Coral.ButtonGroup"/>
  <testcase name="API #items should allow adding a selected button using appendChild" time="0.014" classname="Coral.ButtonGroup"/>
  <testcase name="API #selectionMode should default to none" time="0" classname="Coral.ButtonGroup"/>
  <testcase name="API #selectionMode should add select options when selection mode changed to single" time="0.001" classname="Coral.ButtonGroup"/>
  <testcase name="API #selectionMode should remove all options when selection mode changed to none" time="0" classname="Coral.ButtonGroup"/>
  <testcase name="API #selectionMode should clear the entire selection when selectionMode is set back to none" time="0.001" classname="Coral.ButtonGroup"/>
  <testcase name="API #name should have empty string as default" time="0" classname="Coral.ButtonGroup"/>
  <testcase name="API #name should set the name to the native select" time="0" classname="Coral.ButtonGroup"/>
  <testcase name="API #name should submit by default the first item" time="0.001" classname="Coral.ButtonGroup"/>
  <testcase name="API #name should submit nothing when name is not specified even though an item is selected" time="0" classname="Coral.ButtonGroup"/>
  <testcase name="API #name should submit nothing when selectionMode = none" time="0" classname="Coral.ButtonGroup"/>
  <testcase name="API #name should allow changing the selection" time="0" classname="Coral.ButtonGroup"/>
  <testcase name="API #name should remove associated option element" time="0.006" classname="Coral.ButtonGroup"/>
  <testcase name="API #name should allow removing the selected item" time="0.004" classname="Coral.ButtonGroup"/>
  <testcase name="API #name should submit multiple values with selectionMode = multiple" time="0.001" classname="Coral.ButtonGroup"/>
  <testcase name="API #name should remove associated option element when selectionMode = multiple" time="0.003" classname="Coral.ButtonGroup"/>
  <testcase name="API #name show allow removing a selected item when selectionMode = multiple" time="0.014" classname="Coral.ButtonGroup"/>
  <testcase name="API #disabled should disable the component and items as well" time="0.001" classname="Coral.ButtonGroup"/>
  <testcase name="API #readOnly should disable items as well" time="0" classname="Coral.ButtonGroup"/>
  <testcase name="API #readOnly with selectionMode=&quot;single&quot;, should add &quot;aria-disabled&quot; attribute to selected item" time="0.001" classname="Coral.ButtonGroup"/>
  <testcase name="API #readOnly with selectionMode=&quot;multiple&quot;, should add &quot;aria-disabled&quot; attribute to selected item" time="0" classname="Coral.ButtonGroup"/>
  <testcase name="API #labelledBy should default to null" time="0" classname="Coral.ButtonGroup"/>
  <testcase name="API #labelledBy should update to the selected value" time="0" classname="Coral.ButtonGroup"/>
  <testcase name="API #value should set value as selected" time="0.002" classname="Coral.ButtonGroup"/>
  <testcase name="API #value should set value as selected unselecting old values" time="0" classname="Coral.ButtonGroup"/>
  <testcase name="API #values should default to empty array when selectionMode = none" time="0" classname="Coral.ButtonGroup"/>
  <testcase name="API #values should ignore the setter when selectionMode = none" time="0" classname="Coral.ButtonGroup"/>
  <testcase name="API #values should default to the first item when selectionMode = single" time="0" classname="Coral.ButtonGroup"/>
  <testcase name="API #values should default to empty array when selectionMode = multiple" time="0" classname="Coral.ButtonGroup"/>
  <testcase name="API #values should set the values for selectionMode = single" time="0.001" classname="Coral.ButtonGroup"/>
  <testcase name="API #values should select first value as selected when passed multiple elements for selectionMode = single" time="0.001" classname="Coral.ButtonGroup"/>
  <testcase name="API #values should set all values as selected for selectionMode = multiple" time="0.001" classname="Coral.ButtonGroup"/>
  <testcase name="API #values should allow to clear the selection when selectionMode = multiple" time="0.001" classname="Coral.ButtonGroup"/>
  <testcase name="API #selectedItem should default to null" time="0" classname="Coral.ButtonGroup"/>
  <testcase name="API #selectedItem should update to the selected value" time="0.001" classname="Coral.ButtonGroup"/>
  <testcase name="API #selectedItem should return first selected item if selection mode = &quot;multiple&quot;" time="0.001" classname="Coral.ButtonGroup"/>
  <testcase name="API #selectedItem should be null if the selected is removed" time="0.007" classname="Coral.ButtonGroup"/>
  <testcase name="API #selectedItems should default to an empty array" time="0.001" classname="Coral.ButtonGroup"/>
  <testcase name="API #selectedItems should update to the selected values" time="0" classname="Coral.ButtonGroup"/>
  <testcase name="API #selectedItems should return all selected items if selection mode = &quot;multiple&quot;" time="0.001" classname="Coral.ButtonGroup"/>
  <testcase name="API #selectedItems should return an empty array if the selected is removed" time="0.008" classname="Coral.ButtonGroup"/>
  <testcase name="Markup #value should use the value attribute when available" time="0.004" classname="Coral.ButtonGroup"/>
  <testcase name="Markup #value should default to the text when value attribute is not available" time="0.003" classname="Coral.ButtonGroup"/>
  <testcase name="Markup #value should clean the fallback values to behave like the native options" time="0.005" classname="Coral.ButtonGroup"/>
  <testcase name="Markup #value should update the value when changed attribute is changed programatically" time="0.003" classname="Coral.ButtonGroup"/>
  <testcase name="Markup #value should to empty string if all items are removed" time="0.009" classname="Coral.ButtonGroup"/>
  <testcase name="Markup #values should select item with &quot;selected&quot; attribute" time="0.005" classname="Coral.ButtonGroup"/>
  <testcase name="Markup #values should reject multiple &quot;selected&quot; items" time="0.004" classname="Coral.ButtonGroup"/>
  <testcase name="Markup #values should select all items with &quot;selected&quot; attribute when selectionMode is &quot;multiple&quot;" time="0.005" classname="Coral.ButtonGroup"/>
  <testcase name="Markup #values should enforce the single selection when selected attribute is added" time="0.006" classname="Coral.ButtonGroup"/>
  <testcase name="Markup #values should find an item to select when the selected attribute is removed" time="0.005" classname="Coral.ButtonGroup"/>
  <testcase name="Markup #reset() initial items without an explicit value should get a valid value from the textContent" time="0.006" classname="Coral.ButtonGroup"/>
  <testcase name="Events #change should not trigger change while setting values programatically" time="0.003" classname="Coral.ButtonGroup"/>
  <testcase name="Events #change should trigger change when an unselected button is clicked" time="0.006" classname="Coral.ButtonGroup"/>
  <testcase name="Events #change should not trigger change when the selected button is clicked" time="0.004" classname="Coral.ButtonGroup"/>
  <testcase name="Events #change should trigger change when unselected buttons are clicked and selectionMode = multiple" time="0.004" classname="Coral.ButtonGroup"/>
  <testcase name="Events #change should trigger change when the selected button is clicked and selectionMode = multiple" time="0.017" classname="Coral.ButtonGroup"/>
  <testcase name="User Interaction nothing should happen when selectionMode = none" time="0.003" classname="Coral.ButtonGroup"/>
  <testcase name="User Interaction should select the clicked item when selectionMode = single" time="0.003" classname="Coral.ButtonGroup"/>
  <testcase name="User Interaction should ignore a click on selected item when selectionMode = single" time="0.003" classname="Coral.ButtonGroup"/>
  <testcase name="User Interaction should select the clicked item when selectionMode = multiple" time="0.004" classname="Coral.ButtonGroup"/>
  <testcase name="User Interaction should toggle a selected item by clicking it when selectionMode = multiple" time="0.003" classname="Coral.ButtonGroup"/>
  <testcase name="Accessibility should change role of buttons to &quot;radio&quot; when selection mode changed to single" time="0.004" classname="Coral.ButtonGroup"/>
  <testcase name="Accessibility should change role of buttons to &quot;checkbox&quot; when selection mode changed to multiple" time="0.003" classname="Coral.ButtonGroup"/>
  <testcase name="Accessibility should remove role attribute from buttons when selection mode changed to none" time="0.007" classname="Coral.ButtonGroup"/>
  <testcase name="Accessibility should update aria-checked value when an button is selected with single selectionMode" time="0.008" classname="Coral.ButtonGroup"/>
  <testcase name="Accessibility should permit navigation of enabled buttons using arrow keys with only one button within the group recieving tab focus at a time" time="0.007" classname="Coral.ButtonGroup"/>
  <testcase name="Accessibility should permit navigation with enabled buttons using home/end keys with only one button within the group recieving tab focus at a time" time="0.005" classname="Coral.ButtonGroup"/>
  <testcase name="Accessibility blur should set focus to last selected item when selectionMode is multiple" time="0.006" classname="Coral.ButtonGroup"/>
  <testcase name="Implementation Details should be possible to move buttonGroup in dom without losing the current set &quot;value&quot;" time="0.007" classname="Coral.ButtonGroup"/>
  <testcase name="Implementation Details should add &quot;coral3-ButtonGroup-item&quot; class to children" time="0" classname="Coral.ButtonGroup"/>
  <testcase name="Implementation Details should remove &quot;coral3-ButtonGroup-item&quot; class to children" time="0.007" classname="Coral.ButtonGroup"/>
  <testcase name="Implementation Details (compliance) #formField (multiple) testFormField API #value should be provided" time="0" classname="Coral.ButtonGroup"/>
  <testcase name="Implementation Details (compliance) #formField (multiple) testFormField API #value should have the correct default" time="0" classname="Coral.ButtonGroup"/>
  <testcase name="Implementation Details (compliance) #formField (multiple) testFormField API #value should not be reflected" time="0.001" classname="Coral.ButtonGroup"/>
  <testcase name="Implementation Details (compliance) #formField (multiple) testFormField API #name should have empty string as default" time="0" classname="Coral.ButtonGroup"/>
  <testcase name="Implementation Details (compliance) #formField (multiple) testFormField API #name should transform everything to a string" time="0" classname="Coral.ButtonGroup"/>
  <testcase name="Implementation Details (compliance) #formField (multiple) testFormField API #name should be set synchronously" time="0" classname="Coral.ButtonGroup"/>
  <testcase name="Implementation Details (compliance) #formField (multiple) testFormField API #name should not submit a value when the name is not specified even though there is a value" time="0.003" classname="Coral.ButtonGroup"/>
  <testcase name="Implementation Details (compliance) #formField (multiple) testFormField API #name should submit the one single value" time="0.002" classname="Coral.ButtonGroup"/>
  <testcase name="Implementation Details (compliance) #formField (multiple) testFormField API #required should default to false" time="0" classname="Coral.ButtonGroup"/>
  <testcase name="Implementation Details (compliance) #formField (multiple) testFormField API #invalid should default to false" time="0" classname="Coral.ButtonGroup"/>
  <testcase name="Implementation Details (compliance) #formField (multiple) testFormField API #invalid should be settable programmatically" time="0" classname="Coral.ButtonGroup"/>
  <testcase name="Implementation Details (compliance) #formField (multiple) testFormField API #disabled should default to false" time="0" classname="Coral.ButtonGroup"/>
  <testcase name="Implementation Details (compliance) #formField (multiple) testFormField API #disabled should behave like a boolean value" time="0" classname="Coral.ButtonGroup"/>
  <testcase name="Implementation Details (compliance) #formField (multiple) testFormField API #readOnly should default to false" time="0" classname="Coral.ButtonGroup"/>
  <testcase name="Implementation Details (compliance) #formField (multiple) testFormField API #labelledBy should remove labels with empty string" time="0" classname="Coral.ButtonGroup"/>
  <testcase name="Implementation Details (compliance) #formField (multiple) testFormField API #labelledBy should support multiple labels" time="0" classname="Coral.ButtonGroup"/>
  <testcase name="Implementation Details (compliance) #formField (multiple) testFormField API #clear() should set the valueProperty to the default when called" time="0.001" classname="Coral.ButtonGroup"/>
  <testcase name="Implementation Details (compliance) #formField (multiple) testFormField API #reset() should reset to the initial value when called" time="0.001" classname="Coral.ButtonGroup"/>
  <testcase name="Implementation Details (compliance) #formField (multiple) testFormField API #reset() should be called when form is reset programmatically" time="0.003" classname="Coral.ButtonGroup"/>
  <testcase name="Implementation Details (compliance) #formField (multiple) testFormField API #reset() should be called when form is reset via reset input" time="0.002" classname="Coral.ButtonGroup"/>
  <testcase name="Implementation Details (compliance) #formField (multiple) testFormField Markup #disabled should behave like a boolean value" time="0.001" classname="Coral.ButtonGroup"/>
  <testcase name="Implementation Details (compliance) #formField (multiple) testFormField Markup #labelledby should label component using attribute" time="0.002" classname="Coral.ButtonGroup"/>
  <testcase name="Implementation Details (compliance) #formField (multiple) testFormField Events #change should not be trigged when setting the value programmatically" time="0.001" classname="Coral.ButtonGroup"/>
  <testcase name="Implementation Details (compliance) #formField (multiple) testFormField Events #change should trigger a change event when we interact with the internal input" time="0" classname="Coral.ButtonGroup"/>
  <testcase name="Implementation Details (compliance) #formField (single) testFormField API #value should be provided" time="0.001" classname="Coral.ButtonGroup"/>
  <testcase name="Implementation Details (compliance) #formField (single) testFormField API #value should have the correct default" time="0" classname="Coral.ButtonGroup"/>
  <testcase name="Implementation Details (compliance) #formField (single) testFormField API #value should not be reflected" time="0.002" classname="Coral.ButtonGroup"/>
  <testcase name="Implementation Details (compliance) #formField (single) testFormField API #name should have empty string as default" time="0" classname="Coral.ButtonGroup"/>
  <testcase name="Implementation Details (compliance) #formField (single) testFormField API #name should transform everything to a string" time="0.001" classname="Coral.ButtonGroup"/>
  <testcase name="Implementation Details (compliance) #formField (single) testFormField API #name should be set synchronously" time="0" classname="Coral.ButtonGroup"/>
  <testcase name="Implementation Details (compliance) #formField (single) testFormField API #name should not submit a value when the name is not specified even though there is a value" time="0.002" classname="Coral.ButtonGroup"/>
  <testcase name="Implementation Details (compliance) #formField (single) testFormField API #name should submit the one single value" time="0.001" classname="Coral.ButtonGroup"/>
  <testcase name="Implementation Details (compliance) #formField (single) testFormField API #required should default to false" time="0" classname="Coral.ButtonGroup"/>
  <testcase name="Implementation Details (compliance) #formField (single) testFormField API #invalid should default to false" time="0" classname="Coral.ButtonGroup"/>
  <testcase name="Implementation Details (compliance) #formField (single) testFormField API #invalid should be settable programmatically" time="0" classname="Coral.ButtonGroup"/>
  <testcase name="Implementation Details (compliance) #formField (single) testFormField API #disabled should default to false" time="0" classname="Coral.ButtonGroup"/>
  <testcase name="Implementation Details (compliance) #formField (single) testFormField API #disabled should behave like a boolean value" time="0" classname="Coral.ButtonGroup"/>
  <testcase name="Implementation Details (compliance) #formField (single) testFormField API #readOnly should default to false" time="0" classname="Coral.ButtonGroup"/>
  <testcase name="Implementation Details (compliance) #formField (single) testFormField API #labelledBy should remove labels with empty string" time="0.001" classname="Coral.ButtonGroup"/>
  <testcase name="Implementation Details (compliance) #formField (single) testFormField API #labelledBy should support multiple labels" time="0.001" classname="Coral.ButtonGroup"/>
  <testcase name="Implementation Details (compliance) #formField (single) testFormField API #clear() should set the valueProperty to the default when called" time="0" classname="Coral.ButtonGroup"/>
  <testcase name="Implementation Details (compliance) #formField (single) testFormField API #reset() should reset to the initial value when called" time="0.001" classname="Coral.ButtonGroup"/>
  <testcase name="Implementation Details (compliance) #formField (single) testFormField API #reset() should be called when form is reset programmatically" time="0.003" classname="Coral.ButtonGroup"/>
  <testcase name="Implementation Details (compliance) #formField (single) testFormField API #reset() should be called when form is reset via reset input" time="0.002" classname="Coral.ButtonGroup"/>
  <testcase name="Implementation Details (compliance) #formField (single) testFormField Markup #disabled should behave like a boolean value" time="0.001" classname="Coral.ButtonGroup"/>
  <testcase name="Implementation Details (compliance) #formField (single) testFormField Markup #labelledby should label component using attribute" time="0.001" classname="Coral.ButtonGroup"/>
  <testcase name="Implementation Details (compliance) #formField (single) testFormField Events #change should not be trigged when setting the value programmatically" time="0.001" classname="Coral.ButtonGroup"/>
  <testcase name="Implementation Details (compliance) #formField (single) testFormField Events #change should trigger a change event when we interact with the internal input" time="0" classname="Coral.ButtonGroup"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.Calendar"/>
  <testcase name="Instantiation should be possible to clone the element using markup" time="0.039" classname="Coral.Calendar"/>
  <testcase name="Instantiation should be possible to clone the element using markup with a value" time="0.024" classname="Coral.Calendar"/>
  <testcase name="Instantiation should be possible via cloneNode using js" time="0.001" classname="Coral.Calendar"/>
  <testcase name="API #value changing value to &quot;1975-03-02&quot;, format: &quot;YYYY-MM-DD&quot; `value` should return set date" time="0" classname="Coral.Calendar"/>
  <testcase name="API #value changing value to &quot;1975-03-02&quot;, format: &quot;YYYY-MM-DD&quot; `value` should return today when set to &quot;today&quot;" time="0.01" classname="Coral.Calendar"/>
  <testcase name="API #value changing value to &quot;1975-03-02&quot;, format: &quot;YYYY-MM-DD&quot; `valueAsDate` should return set date" time="0.001" classname="Coral.Calendar"/>
  <testcase name="API #value changing value to &quot;1975-03-02&quot;, format: &quot;YYYY-MM-DD&quot; `input.value` should return set date" time="0" classname="Coral.Calendar"/>
  <testcase name="API #value changing value to &quot;1975-03-02&quot;, format: &quot;YYYY-MM-DD&quot; should NOT fire a change event when the value property is set programmatically" time="0" classname="Coral.Calendar"/>
  <testcase name="API #value changing value to &quot;1975-03-02&quot;, format: &quot;YYYY-MM-DD&quot; should NOT fire a change event when unchanged" time="0.001" classname="Coral.Calendar"/>
  <testcase name="API #valueAsDate changing valueAsDate to 1975-03-02, format: YYYY-MM-DD `value` should return set date" time="0" classname="Coral.Calendar"/>
  <testcase name="API #valueAsDate changing valueAsDate to 1975-03-02, format: YYYY-MM-DD `valueAsDate` should return set date" time="0" classname="Coral.Calendar"/>
  <testcase name="API #valueAsDate changing valueAsDate to 1975-03-02, format: YYYY-MM-DD `input.value` should return set date" time="0" classname="Coral.Calendar"/>
  <testcase name="API #valueAsDate changing valueAsDate to 1975-03-02, format: YYYY-MM-DD should NOT fire a change event when the valueAsDate property is set programmatically" time="0" classname="Coral.Calendar"/>
  <testcase name="API #valueAsDate changing valueAsDate to 1975-03-02, format: YYYY-MM-DD should NOT fire a change event when unchanged" time="0" classname="Coral.Calendar"/>
  <testcase name="API #invalid should never be invalid when min and max are null" time="0.009" classname="Coral.Calendar"/>
  <testcase name="API #invalid should be invalid when min is bigger than value (calculated only after a user interaction)" time="0.046" classname="Coral.Calendar"/>
  <testcase name="API #invalid should not be invalid when min is smaller than value" time="0.019" classname="Coral.Calendar"/>
  <testcase name="API #invalid should be invalid when max is less than value" time="0.052" classname="Coral.Calendar"/>
  <testcase name="API #invalid should not be invalid when max is more than value" time="0.016" classname="Coral.Calendar"/>
  <testcase name="API #invalid should not be invalid when value is between min and max" time="0.024" classname="Coral.Calendar"/>
  <testcase name="API #max should update max value with the new format" time="0" classname="Coral.Calendar"/>
  <testcase name="API #max should accept date objects for max" time="0.011" classname="Coral.Calendar"/>
  <testcase name="API #max should set max to null if value is invalid" time="0" classname="Coral.Calendar"/>
  <testcase name="API #max should default to max" time="0" classname="Coral.Calendar"/>
  <testcase name="API #min should update min value with the new format" time="0" classname="Coral.Calendar"/>
  <testcase name="API #min should accept date objects for min" time="0.006" classname="Coral.Calendar"/>
  <testcase name="API #min should set min to null if value is invalid" time="0" classname="Coral.Calendar"/>
  <testcase name="API #min should default to null" time="0" classname="Coral.Calendar"/>
  <testcase name="API #value should default to empty string" time="0" classname="Coral.Calendar"/>
  <testcase name="API #value should accept valid dates" time="0.016" classname="Coral.Calendar"/>
  <testcase name="API #value should accept &quot;today&quot; as a value" time="0.012" classname="Coral.Calendar"/>
  <testcase name="API #value should reject invalid value strings" time="0" classname="Coral.Calendar"/>
  <testcase name="API #value should reject invalid date strings" time="0" classname="Coral.Calendar"/>
  <testcase name="API #value should accept date objects" time="0.008" classname="Coral.Calendar"/>
  <testcase name="API #valueAsDate should default to null" time="0" classname="Coral.Calendar"/>
  <testcase name="API #valueAsDate should accept dates" time="0.007" classname="Coral.Calendar"/>
  <testcase name="API #valueAsDate should reject date strings" time="0.001" classname="Coral.Calendar"/>
  <testcase name="API #valueAsDate should be able to clear the value" time="0.028" classname="Coral.Calendar"/>
  <testcase name="API #focus() should set focus to calendar body if no other descendant has focus" time="0.013" classname="Coral.Calendar"/>
  <testcase name="API #disabled should not receive focus when disabled" time="0.024" classname="Coral.Calendar"/>
  <testcase name="Markup #min should default to null if not specified" time="0.007" classname="Coral.Calendar"/>
  <testcase name="Markup #min should accept valid dates as string" time="0.009" classname="Coral.Calendar"/>
  <testcase name="Markup #min should accept &quot;today&quot; as a value" time="0.009" classname="Coral.Calendar"/>
  <testcase name="Markup #min should set invalid values to null" time="0.008" classname="Coral.Calendar"/>
  <testcase name="Markup #max should default to null if not specified" time="0.012" classname="Coral.Calendar"/>
  <testcase name="Markup #max should accept valid dates as string" time="0.008" classname="Coral.Calendar"/>
  <testcase name="Markup #max should accept &quot;today&quot; as a value" time="0.008" classname="Coral.Calendar"/>
  <testcase name="Markup #max should set invalid values to null" time="0.013" classname="Coral.Calendar"/>
  <testcase name="User Interaction should display the month of the set date" time="0" classname="Coral.Calendar"/>
  <testcase name="User Interaction should go to next month on next month button click" time="0.018" classname="Coral.Calendar"/>
  <testcase name="User Interaction should go to next month on next month button click when max is set" time="0.042" classname="Coral.Calendar"/>
  <testcase name="User Interaction should go to previous month on previous month button click when min is set" time="0.057" classname="Coral.Calendar"/>
  <testcase name="User Interaction should calculate invalid only once the user interacted with the component" time="0.028" classname="Coral.Calendar"/>
  <testcase name="User Interaction should handle multiple next clicks correctly" time="0.075" classname="Coral.Calendar"/>
  <testcase name="User Interaction should go to previous month on prev month button click" time="0.02" classname="Coral.Calendar"/>
  <testcase name="User Interaction should handle multiple prev clicks correctly" time="0.092" classname="Coral.Calendar"/>
  <testcase name="User Interaction should handle multiple prev and next clicks correctly" time="0.079" classname="Coral.Calendar"/>
  <testcase name="User Interaction should select the clicked day" time="0.019" classname="Coral.Calendar"/>
  <testcase name="User Interaction should trigger a change event when a new date is selected" time="0.026" classname="Coral.Calendar"/>
  <testcase name="User Interaction should NOT trigger a change event when the same date is selected" time="0.013" classname="Coral.Calendar"/>
  <testcase name="Implementation Details rendering should render correctly out of range dates" time="0.016" classname="Coral.Calendar"/>
  <testcase name="Implementation Details #formfield testFormField API #value should be provided" time="0" classname="Coral.Calendar"/>
  <testcase name="Implementation Details #formfield testFormField API #value should have the correct default" time="0.007" classname="Coral.Calendar"/>
  <testcase name="Implementation Details #formfield testFormField API #value should not be reflected" time="0.009" classname="Coral.Calendar"/>
  <testcase name="Implementation Details #formfield testFormField API #name should have empty string as default" time="0" classname="Coral.Calendar"/>
  <testcase name="Implementation Details #formfield testFormField API #name should transform everything to a string" time="0" classname="Coral.Calendar"/>
  <testcase name="Implementation Details #formfield testFormField API #name should be set synchronously" time="0" classname="Coral.Calendar"/>
  <testcase name="Implementation Details #formfield testFormField API #name should not submit a value when the name is not specified even though there is a value" time="0.009" classname="Coral.Calendar"/>
  <testcase name="Implementation Details #formfield testFormField API #name should submit the one single value" time="0.008" classname="Coral.Calendar"/>
  <testcase name="Implementation Details #formfield testFormField API #required should default to false" time="0" classname="Coral.Calendar"/>
  <testcase name="Implementation Details #formfield testFormField API #invalid should default to false" time="0" classname="Coral.Calendar"/>
  <testcase name="Implementation Details #formfield testFormField API #invalid should be settable programmatically" time="0.007" classname="Coral.Calendar"/>
  <testcase name="Implementation Details #formfield testFormField API #disabled should default to false" time="0" classname="Coral.Calendar"/>
  <testcase name="Implementation Details #formfield testFormField API #disabled should behave like a boolean value" time="0.016" classname="Coral.Calendar"/>
  <testcase name="Implementation Details #formfield testFormField API #readOnly should default to false" time="0" classname="Coral.Calendar"/>
  <testcase name="Implementation Details #formfield testFormField API #labelledBy should remove labels with empty string" time="0" classname="Coral.Calendar"/>
  <testcase name="Implementation Details #formfield testFormField API #labelledBy should support multiple labels" time="0" classname="Coral.Calendar"/>
  <testcase name="Implementation Details #formfield testFormField API #clear() should set the valueProperty to the default when called" time="0.015" classname="Coral.Calendar"/>
  <testcase name="Implementation Details #formfield testFormField API #reset() should reset to the initial value when called" time="0.015" classname="Coral.Calendar"/>
  <testcase name="Implementation Details #formfield testFormField API #reset() should be called when form is reset programmatically" time="0.018" classname="Coral.Calendar"/>
  <testcase name="Implementation Details #formfield testFormField API #reset() should be called when form is reset via reset input" time="0.02" classname="Coral.Calendar"/>
  <testcase name="Implementation Details #formfield testFormField Markup #disabled should behave like a boolean value" time="0.036" classname="Coral.Calendar"/>
  <testcase name="Implementation Details #formfield testFormField Markup #labelledby should label component using attribute" time="0.001" classname="Coral.Calendar"/>
  <testcase name="Implementation Details #formfield testFormField Events #change should not be trigged when setting the value programmatically" time="0.015" classname="Coral.Calendar"/>
  <testcase name="Implementation Details #formfield testFormField Events #change should trigger a change event when we interact with the internal input" time="0" classname="Coral.Calendar"/>
  <testcase name="API #value changing value to &quot;1975-03-02&quot;, format: &quot;YYYY-MM-DD&quot; `value` should return set date" time="0" classname="Coral.Calendar"/>
  <testcase name="API #value changing value to &quot;1975-03-02&quot;, format: &quot;YYYY-MM-DD&quot; `value` should return today when set to &quot;today&quot;" time="0.006" classname="Coral.Calendar"/>
  <testcase name="API #value changing value to &quot;1975-03-02&quot;, format: &quot;YYYY-MM-DD&quot; `valueAsDate` should return set date" time="0" classname="Coral.Calendar"/>
  <testcase name="API #value changing value to &quot;1975-03-02&quot;, format: &quot;YYYY-MM-DD&quot; `input.value` should return set date" time="0" classname="Coral.Calendar"/>
  <testcase name="API #value changing value to &quot;1975-03-02&quot;, format: &quot;YYYY-MM-DD&quot; should NOT fire a change event when the value property is set programmatically" time="0" classname="Coral.Calendar"/>
  <testcase name="API #value changing value to &quot;1975-03-02&quot;, format: &quot;YYYY-MM-DD&quot; should NOT fire a change event when unchanged" time="0" classname="Coral.Calendar"/>
  <testcase name="API #valueAsDate changing valueAsDate to 1975-03-02, format: YYYY-MM-DD `value` should return set date" time="0" classname="Coral.Calendar"/>
  <testcase name="API #valueAsDate changing valueAsDate to 1975-03-02, format: YYYY-MM-DD `valueAsDate` should return set date" time="0" classname="Coral.Calendar"/>
  <testcase name="API #valueAsDate changing valueAsDate to 1975-03-02, format: YYYY-MM-DD `input.value` should return set date" time="0" classname="Coral.Calendar"/>
  <testcase name="API #valueAsDate changing valueAsDate to 1975-03-02, format: YYYY-MM-DD should NOT fire a change event when the valueAsDate property is set programmatically" time="0" classname="Coral.Calendar"/>
  <testcase name="API #valueAsDate changing valueAsDate to 1975-03-02, format: YYYY-MM-DD should NOT fire a change event when unchanged" time="0" classname="Coral.Calendar"/>
  <testcase name="API #value changing value to &quot;12-31-2000&quot;, format: &quot;MM-DD-YYYY&quot; `value` should return set date" time="0" classname="Coral.Calendar"/>
  <testcase name="API #value changing value to &quot;12-31-2000&quot;, format: &quot;MM-DD-YYYY&quot; `value` should return today when set to &quot;today&quot;" time="0.008" classname="Coral.Calendar"/>
  <testcase name="API #value changing value to &quot;12-31-2000&quot;, format: &quot;MM-DD-YYYY&quot; `valueAsDate` should return set date" time="0" classname="Coral.Calendar"/>
  <testcase name="API #value changing value to &quot;12-31-2000&quot;, format: &quot;MM-DD-YYYY&quot; `input.value` should return set date" time="0" classname="Coral.Calendar"/>
  <testcase name="API #value changing value to &quot;12-31-2000&quot;, format: &quot;MM-DD-YYYY&quot; should NOT fire a change event when the value property is set programmatically" time="0" classname="Coral.Calendar"/>
  <testcase name="API #value changing value to &quot;12-31-2000&quot;, format: &quot;MM-DD-YYYY&quot; should NOT fire a change event when unchanged" time="0" classname="Coral.Calendar"/>
  <testcase name="API #valueAsDate changing valueAsDate to 12-31-2000, format: MM-DD-YYYY `value` should return set date" time="0" classname="Coral.Calendar"/>
  <testcase name="API #valueAsDate changing valueAsDate to 12-31-2000, format: MM-DD-YYYY `valueAsDate` should return set date" time="0" classname="Coral.Calendar"/>
  <testcase name="API #valueAsDate changing valueAsDate to 12-31-2000, format: MM-DD-YYYY `input.value` should return set date" time="0" classname="Coral.Calendar"/>
  <testcase name="API #valueAsDate changing valueAsDate to 12-31-2000, format: MM-DD-YYYY should NOT fire a change event when the valueAsDate property is set programmatically" time="0" classname="Coral.Calendar"/>
  <testcase name="API #valueAsDate changing valueAsDate to 12-31-2000, format: MM-DD-YYYY should NOT fire a change event when unchanged" time="0" classname="Coral.Calendar"/>
  <testcase name="API #invalid should never be invalid when min and max are null" time="0.008" classname="Coral.Calendar"/>
  <testcase name="API #invalid should be invalid when min is bigger than value (calculated only after a user interaction)" time="0.028" classname="Coral.Calendar"/>
  <testcase name="API #invalid should not be invalid when min is smaller than value" time="0.017" classname="Coral.Calendar"/>
  <testcase name="API #invalid should be invalid when max is less than value" time="0.043" classname="Coral.Calendar"/>
  <testcase name="API #invalid should not be invalid when max is more than value" time="0.012" classname="Coral.Calendar"/>
  <testcase name="API #invalid should not be invalid when value is between min and max" time="0.019" classname="Coral.Calendar"/>
  <testcase name="API #max should update max value with the new format" time="0.006" classname="Coral.Calendar"/>
  <testcase name="API #max should accept date objects for max" time="0.004" classname="Coral.Calendar"/>
  <testcase name="API #max should set max to null if value is invalid" time="0" classname="Coral.Calendar"/>
  <testcase name="API #max should default to max" time="0" classname="Coral.Calendar"/>
  <testcase name="API #min should update min value with the new format" time="0.004" classname="Coral.Calendar"/>
  <testcase name="API #min should accept date objects for min" time="0.004" classname="Coral.Calendar"/>
  <testcase name="API #min should set min to null if value is invalid" time="0" classname="Coral.Calendar"/>
  <testcase name="API #min should default to null" time="0" classname="Coral.Calendar"/>
  <testcase name="API #value should default to empty string" time="0" classname="Coral.Calendar"/>
  <testcase name="API #value should accept valid dates" time="0.006" classname="Coral.Calendar"/>
  <testcase name="API #value should accept &quot;today&quot; as a value" time="0.005" classname="Coral.Calendar"/>
  <testcase name="API #value should reject invalid value strings" time="0" classname="Coral.Calendar"/>
  <testcase name="API #value should reject invalid date strings" time="0" classname="Coral.Calendar"/>
  <testcase name="API #value should accept date objects" time="0.007" classname="Coral.Calendar"/>
  <testcase name="API #valueAsDate should default to null" time="0" classname="Coral.Calendar"/>
  <testcase name="API #valueAsDate should accept dates" time="0.005" classname="Coral.Calendar"/>
  <testcase name="API #valueAsDate should reject date strings" time="0" classname="Coral.Calendar"/>
  <testcase name="API #valueAsDate should be able to clear the value" time="0.016" classname="Coral.Calendar"/>
  <testcase name="API #focus() should set focus to calendar body if no other descendant has focus" time="0.01" classname="Coral.Calendar"/>
  <testcase name="API #disabled should not receive focus when disabled" time="0.016" classname="Coral.Calendar"/>
  <testcase name="Markup #min should default to null if not specified" time="0.006" classname="Coral.Calendar"/>
  <testcase name="Markup #min should accept valid dates as string" time="0.007" classname="Coral.Calendar"/>
  <testcase name="Markup #min should accept &quot;today&quot; as a value" time="0.007" classname="Coral.Calendar"/>
  <testcase name="Markup #min should set invalid values to null" time="0.007" classname="Coral.Calendar"/>
  <testcase name="Markup #max should default to null if not specified" time="0.008" classname="Coral.Calendar"/>
  <testcase name="Markup #max should accept valid dates as string" time="0.007" classname="Coral.Calendar"/>
  <testcase name="Markup #max should accept &quot;today&quot; as a value" time="0.006" classname="Coral.Calendar"/>
  <testcase name="Markup #max should set invalid values to null" time="0.007" classname="Coral.Calendar"/>
  <testcase name="User Interaction should display the month of the set date" time="0" classname="Coral.Calendar"/>
  <testcase name="User Interaction should go to next month on next month button click" time="0.017" classname="Coral.Calendar"/>
  <testcase name="User Interaction should go to next month on next month button click when max is set" time="0.03" classname="Coral.Calendar"/>
  <testcase name="User Interaction should go to previous month on previous month button click when min is set" time="0.03" classname="Coral.Calendar"/>
  <testcase name="User Interaction should calculate invalid only once the user interacted with the component" time="0.028" classname="Coral.Calendar"/>
  <testcase name="User Interaction should handle multiple next clicks correctly" time="0.054" classname="Coral.Calendar"/>
  <testcase name="User Interaction should go to previous month on prev month button click" time="0.018" classname="Coral.Calendar"/>
  <testcase name="User Interaction should handle multiple prev clicks correctly" time="0.064" classname="Coral.Calendar"/>
  <testcase name="User Interaction should handle multiple prev and next clicks correctly" time="0.06" classname="Coral.Calendar"/>
  <testcase name="User Interaction should select the clicked day" time="0.017" classname="Coral.Calendar"/>
  <testcase name="User Interaction should trigger a change event when a new date is selected" time="0.024" classname="Coral.Calendar"/>
  <testcase name="User Interaction should NOT trigger a change event when the same date is selected" time="0.015" classname="Coral.Calendar"/>
  <testcase name="Implementation Details rendering should render correctly out of range dates" time="0.016" classname="Coral.Calendar"/>
  <testcase name="Implementation Details #formfield testFormField API #value should be provided" time="0" classname="Coral.Calendar"/>
  <testcase name="Implementation Details #formfield testFormField API #value should have the correct default" time="0.007" classname="Coral.Calendar"/>
  <testcase name="Implementation Details #formfield testFormField API #value should not be reflected" time="0.007" classname="Coral.Calendar"/>
  <testcase name="Implementation Details #formfield testFormField API #name should have empty string as default" time="0" classname="Coral.Calendar"/>
  <testcase name="Implementation Details #formfield testFormField API #name should transform everything to a string" time="0" classname="Coral.Calendar"/>
  <testcase name="Implementation Details #formfield testFormField API #name should be set synchronously" time="0" classname="Coral.Calendar"/>
  <testcase name="Implementation Details #formfield testFormField API #name should not submit a value when the name is not specified even though there is a value" time="0.013" classname="Coral.Calendar"/>
  <testcase name="Implementation Details #formfield testFormField API #name should submit the one single value" time="0.009" classname="Coral.Calendar"/>
  <testcase name="Implementation Details #formfield testFormField API #required should default to false" time="0" classname="Coral.Calendar"/>
  <testcase name="Implementation Details #formfield testFormField API #invalid should default to false" time="0.001" classname="Coral.Calendar"/>
  <testcase name="Implementation Details #formfield testFormField API #invalid should be settable programmatically" time="0.007" classname="Coral.Calendar"/>
  <testcase name="Implementation Details #formfield testFormField API #disabled should default to false" time="0" classname="Coral.Calendar"/>
  <testcase name="Implementation Details #formfield testFormField API #disabled should behave like a boolean value" time="0.015" classname="Coral.Calendar"/>
  <testcase name="Implementation Details #formfield testFormField API #readOnly should default to false" time="0" classname="Coral.Calendar"/>
  <testcase name="Implementation Details #formfield testFormField API #labelledBy should remove labels with empty string" time="0.001" classname="Coral.Calendar"/>
  <testcase name="Implementation Details #formfield testFormField API #labelledBy should support multiple labels" time="0" classname="Coral.Calendar"/>
  <testcase name="Implementation Details #formfield testFormField API #clear() should set the valueProperty to the default when called" time="0.018" classname="Coral.Calendar"/>
  <testcase name="Implementation Details #formfield testFormField API #reset() should reset to the initial value when called" time="0.019" classname="Coral.Calendar"/>
  <testcase name="Implementation Details #formfield testFormField API #reset() should be called when form is reset programmatically" time="0.029" classname="Coral.Calendar"/>
  <testcase name="Implementation Details #formfield testFormField API #reset() should be called when form is reset via reset input" time="0.023" classname="Coral.Calendar"/>
  <testcase name="Implementation Details #formfield testFormField Markup #disabled should behave like a boolean value" time="0.062" classname="Coral.Calendar"/>
  <testcase name="Implementation Details #formfield testFormField Markup #labelledby should label component using attribute" time="0.001" classname="Coral.Calendar"/>
  <testcase name="Implementation Details #formfield testFormField Events #change should not be trigged when setting the value programmatically" time="0.018" classname="Coral.Calendar"/>
  <testcase name="Implementation Details #formfield testFormField Events #change should trigger a change event when we interact with the internal input" time="0.001" classname="Coral.Calendar"/>
  <testcase name="Namespace should be defined" time="0.001" classname="Coral.Card"/>
  <testcase name="Namespace should define the variants in an enum" time="0" classname="Coral.Card"/>
  <testcase name="Instantiation should be possible to clone using markup" time="0.001" classname="Coral.Card"/>
  <testcase name="Instantiation should be possible to clone using js" time="0" classname="Coral.Card"/>
  <testcase name="Markup #variant should be initially Coral.Card.variant.DEFAULT" time="0.002" classname="Coral.Card"/>
  <testcase name="Markup #variant should set the new variant" time="0.001" classname="Coral.Card"/>
  <testcase name="Instantiation should be possible using new" time="0.001" classname="Coral.CharacterCount"/>
  <testcase name="Instantiation should be possible using createElement" time="0" classname="Coral.CharacterCount"/>
  <testcase name="Instantiation should be possible using markup" time="0.001" classname="Coral.CharacterCount"/>
  <testcase name="Instantiation should be possible to clone using markup" time="0" classname="Coral.CharacterCount"/>
  <testcase name="Instantiation should be possible to clone using js" time="0.001" classname="Coral.CharacterCount"/>
  <testcase name="Implementation Details should reduce counter for each character entered when maxLength not null" time="0" classname="Coral.CharacterCount"/>
  <testcase name="Implementation Details should reach 0 when characters entered == maxLength" time="0" classname="Coral.CharacterCount"/>
  <testcase name="Implementation Details should show a negative value when characters entered > maxLength" time="0" classname="Coral.CharacterCount"/>
  <testcase name="Implementation Details it should add is-invalid when character entered > maxLength" time="0" classname="Coral.CharacterCount"/>
  <testcase name="Implementation Details should start counter at 0 when maxLength is null" time="0" classname="Coral.CharacterCount"/>
  <testcase name="Implementation Details should increment counter for each character entered when maxLength is null" time="0" classname="Coral.CharacterCount"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.Checkbox"/>
  <testcase name="Instantiation should be possible using new" time="0.001" classname="Coral.Checkbox"/>
  <testcase name="Instantiation should be possible to clone the element using markup" time="0" classname="Coral.Checkbox"/>
  <testcase name="Instantiation should be possible to clone the element without label element using markup" time="0.001" classname="Coral.Checkbox"/>
  <testcase name="Instantiation should be possible to clone the element with label using markup" time="0" classname="Coral.Checkbox"/>
  <testcase name="Instantiation should be possible to clone using js" time="0" classname="Coral.Checkbox"/>
  <testcase name="Markup should be possible using markup" time="0" classname="Coral.Checkbox"/>
  <testcase name="Markup should be possible using markup with text" time="0.001" classname="Coral.Checkbox"/>
  <testcase name="Markup should be possible using markup with content zone" time="0.001" classname="Coral.Checkbox"/>
  <testcase name="API should have defaults" time="0" classname="Coral.Checkbox"/>
  <testcase name="API #value should reflect value changes" time="0" classname="Coral.Checkbox"/>
  <testcase name="API #checked should reflect checked value" time="0.001" classname="Coral.Checkbox"/>
  <testcase name="API #checked should reflect unchecked value" time="0" classname="Coral.Checkbox"/>
  <testcase name="API #checked should handle manipulating checked attribute" time="0.001" classname="Coral.Checkbox"/>
  <testcase name="API #indeterminate should reflect indeterminate value" time="0.001" classname="Coral.Checkbox"/>
  <testcase name="API #indeterminate should not affect checked state when indeterminate state is changed" time="0" classname="Coral.Checkbox"/>
  <testcase name="API #indeterminate should not affect indeterminate state when checked state is changed" time="0" classname="Coral.Checkbox"/>
  <testcase name="API #indeterminate should be removed on user interaction" time="0.002" classname="Coral.Checkbox"/>
  <testcase name="API #disabled should reflect disabled value" time="0.001" classname="Coral.Checkbox"/>
  <testcase name="API #disabled should reflect enabled value" time="0.001" classname="Coral.Checkbox"/>
  <testcase name="API #disabled should handle manipulating disabled attribute" time="0" classname="Coral.Checkbox"/>
  <testcase name="API #label should hide label by default" time="0" classname="Coral.Checkbox"/>
  <testcase name="API #label should show label when content is not empty" time="0.001" classname="Coral.Checkbox"/>
  <testcase name="API #label should hide label when content set to empty" time="0.02" classname="Coral.Checkbox"/>
  <testcase name="API #label should hide label when content set to empty when not in DOM" time="0.158" classname="Coral.Checkbox"/>
  <testcase name="API #rendering should render chechbox with only one input, checkbox, span and label element" time="0.001" classname="Coral.Checkbox"/>
  <testcase name="API #rendering should render clone of a checkbox with only one input, checkbox, span and label element" time="0.001" classname="Coral.Checkbox"/>
  <testcase name="Events should trigger change on click" time="0.001" classname="Coral.Checkbox"/>
  <testcase name="Events should trigger change on indeterminate set" time="0.001" classname="Coral.Checkbox"/>
  <testcase name="Events should not trigger change event, when checked property" time="0" classname="Coral.Checkbox"/>
  <testcase name="Events should trigger change event, when clicked" time="0" classname="Coral.Checkbox"/>
  <testcase name="Events should not trigger change event if value changed" time="0" classname="Coral.Checkbox"/>
  <testcase name="Implementation Details should allow replacing the content zone" time="0.012" classname="Coral.Checkbox"/>
  <testcase name="Implementation Details should support click()" time="0.002" classname="Coral.Checkbox"/>
  <testcase name="Implementation Details in a form should include the internal input value when checked" time="0" classname="Coral.Checkbox"/>
  <testcase name="Implementation Details in a form should not include the internal input value when not checked" time="0" classname="Coral.Checkbox"/>
  <testcase name="Implementation Details in a form should not include the internal input value when not named" time="0" classname="Coral.Checkbox"/>
  <testcase name="Implementation Details in a form should include the new value if the value was changed" time="0" classname="Coral.Checkbox"/>
  <testcase name="Implementation Details #formField testFormField API #value should be provided" time="0" classname="Coral.Checkbox"/>
  <testcase name="Implementation Details #formField testFormField API #value should have the correct default" time="0" classname="Coral.Checkbox"/>
  <testcase name="Implementation Details #formField testFormField API #value should not be reflected" time="0" classname="Coral.Checkbox"/>
  <testcase name="Implementation Details #formField testFormField API #name should have empty string as default" time="0" classname="Coral.Checkbox"/>
  <testcase name="Implementation Details #formField testFormField API #name should transform everything to a string" time="0" classname="Coral.Checkbox"/>
  <testcase name="Implementation Details #formField testFormField API #name should be set synchronously" time="0.001" classname="Coral.Checkbox"/>
  <testcase name="Implementation Details #formField testFormField API #name should not submit a value when the name is not specified even though there is a value" time="0" classname="Coral.Checkbox"/>
  <testcase name="Implementation Details #formField testFormField API #name should submit the one single value" time="0.001" classname="Coral.Checkbox"/>
  <testcase name="Implementation Details #formField testFormField API #required should default to false" time="0" classname="Coral.Checkbox"/>
  <testcase name="Implementation Details #formField testFormField API #invalid should default to false" time="0.001" classname="Coral.Checkbox"/>
  <testcase name="Implementation Details #formField testFormField API #invalid should be settable programmatically" time="0" classname="Coral.Checkbox"/>
  <testcase name="Implementation Details #formField testFormField API #disabled should default to false" time="0" classname="Coral.Checkbox"/>
  <testcase name="Implementation Details #formField testFormField API #disabled should behave like a boolean value" time="0.001" classname="Coral.Checkbox"/>
  <testcase name="Implementation Details #formField testFormField API #readOnly should default to false" time="0" classname="Coral.Checkbox"/>
  <testcase name="Implementation Details #formField testFormField API #labelledBy should remove labels with empty string" time="0.001" classname="Coral.Checkbox"/>
  <testcase name="Implementation Details #formField testFormField API #labelledBy should support multiple labels" time="0.001" classname="Coral.Checkbox"/>
  <testcase name="Implementation Details #formField testFormField API #clear() should set the valueProperty to the default when called" time="0" classname="Coral.Checkbox"/>
  <testcase name="Implementation Details #formField testFormField API #reset() should reset to the initial value when called" time="0" classname="Coral.Checkbox"/>
  <testcase name="Implementation Details #formField testFormField API #reset() should be called when form is reset programmatically" time="0.001" classname="Coral.Checkbox"/>
  <testcase name="Implementation Details #formField testFormField API #reset() should be called when form is reset via reset input" time="0.001" classname="Coral.Checkbox"/>
  <testcase name="Implementation Details #formField testFormField Markup #disabled should behave like a boolean value" time="0.001" classname="Coral.Checkbox"/>
  <testcase name="Implementation Details #formField testFormField Markup #labelledby should label component using attribute" time="0" classname="Coral.Checkbox"/>
  <testcase name="Implementation Details #formField testFormField Events #change should not be trigged when setting the value programmatically" time="0" classname="Coral.Checkbox"/>
  <testcase name="Implementation Details #formField testFormField Events #change should trigger a change event when we interact with the internal input" time="0" classname="Coral.Checkbox"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.Clock"/>
  <testcase name="Namespace should define the variants in an enum" time="0" classname="Coral.Clock"/>
  <testcase name="Instantiation should be possible to clone using markup" time="0" classname="Coral.Clock"/>
  <testcase name="Instantiation should be possible to clone with markup with value preset" time="0.001" classname="Coral.Clock"/>
  <testcase name="API #name should have empty string as default" time="0" classname="Coral.Clock"/>
  <testcase name="API #name should submit nothing when name is not specified" time="0.008" classname="Coral.Clock"/>
  <testcase name="API #name should set the name to the hidden input" time="0" classname="Coral.Clock"/>
  <testcase name="API #name should submit the one single value" time="0.005" classname="Coral.Clock"/>
  <testcase name="API #value should default to empty" time="0" classname="Coral.Clock"/>
  <testcase name="API #value should be settable" time="0.001" classname="Coral.Clock"/>
  <testcase name="API #value should accept empty string" time="0.002" classname="Coral.Clock"/>
  <testcase name="API #value should accept 24h time" time="0.002" classname="Coral.Clock"/>
  <testcase name="API #value should ignore invalid values" time="0.005" classname="Coral.Clock"/>
  <testcase name="API #value should reset value if a Date object is given" time="0.001" classname="Coral.Clock"/>
  <testcase name="API #value should reset value if a moment object is given" time="0.001" classname="Coral.Clock"/>
  <testcase name="API #value should update textContent of _elements.valueAsText element" time="0.002" classname="Coral.Clock"/>
  <testcase name="API #disabled should have false as default" time="0" classname="Coral.Clock"/>
  <testcase name="API #disabled should not submit when disabled is not specified" time="0.009" classname="Coral.Clock"/>
  <testcase name="API #valueAsDate should default to null" time="0" classname="Coral.Clock"/>
  <testcase name="API #valueAsDate should accept dates" time="0.001" classname="Coral.Clock"/>
  <testcase name="API #valueAsDate should reject date strings" time="0" classname="Coral.Clock"/>
  <testcase name="API #valueAsDate should be able to clear the value" time="0.001" classname="Coral.Clock"/>
  <testcase name="API #valueAsDate should not accept moment values" time="0" classname="Coral.Clock"/>
  <testcase name="API #valueFormat should default to HH:mm" time="0" classname="Coral.Clock"/>
  <testcase name="API #valueFormat should support different formats" time="0" classname="Coral.Clock"/>
  <testcase name="API #valueFormat should reset to default when setting to empty string" time="0.001" classname="Coral.Clock"/>
  <testcase name="API #valueFormat should support AM/PM" time="0" classname="Coral.Clock"/>
  <testcase name="API #displayFormat should update textContent of _elements.valueAsText element" time="0.001" classname="Coral.Clock"/>
  <testcase name="API #variant should be set to &quot;default&quot; by default" time="0" classname="Coral.Clock"/>
  <testcase name="API #variant should be possible to set the variant" time="0.002" classname="Coral.Clock"/>
  <testcase name="API #focus() should set focus to hours input if no other descendant has focus" time="0.001" classname="Coral.Clock"/>
  <testcase name="API #focus() should not recieve focus when disabled" time="0.001" classname="Coral.Clock"/>
  <testcase name="API #labelledby property should default to null" time="0" classname="Coral.Clock"/>
  <testcase name="API #labelledby should combine labelledby and _elements.valueAsText.id in the aria-labelledby attribute" time="0.002" classname="Coral.Clock"/>
  <testcase name="Markup #valueAsDate should be ignored as an attribute" time="0.006" classname="Coral.Clock"/>
  <testcase name="Markup #displayFormat should default to HH:mm" time="0.006" classname="Coral.Clock"/>
  <testcase name="Markup #displayFormat should support different formats (1)" time="0" classname="Coral.Clock"/>
  <testcase name="Markup #displayFormat should support different formats (2)" time="0" classname="Coral.Clock"/>
  <testcase name="Markup #displayFormat should support different formats (3)" time="0" classname="Coral.Clock"/>
  <testcase name="Markup #displayFormat should reset to default when setting to empty string" time="0.009" classname="Coral.Clock"/>
  <testcase name="Markup #displayFormat should show the AM/PM selector" time="0" classname="Coral.Clock"/>
  <testcase name="Markup #displayFormat should switch from PM to AM" time="0" classname="Coral.Clock"/>
  <testcase name="Markup #displayFormat should switch from AM to PM" time="0" classname="Coral.Clock"/>
  <testcase name="Markup #displayFormat should allow AM/PM lowercase and uppercase format" time="0" classname="Coral.Clock"/>
  <testcase name="Markup #displayFormat should support changing the value with AM/PM set" time="0" classname="Coral.Clock"/>
  <testcase name="Markup #displayFormat should stay empty when value is empty and AM/PM is set" time="0" classname="Coral.Clock"/>
  <testcase name="Markup #displayFormat should not change display nor value if AM/PM is set but hours format is 24 hours clock" time="0" classname="Coral.Clock"/>
  <testcase name="Markup #labelledby should combine labelledby and _elements.valueAsText.id in the aria-labelledby attribute" time="0.009" classname="Coral.Clock"/>
  <testcase name="Events change should NOT trigger a change event when the value property is programmatically set" time="0.008" classname="Coral.Clock"/>
  <testcase name="Events change should NOT trigger a change event when the valueAsDate property is programmatically set" time="0.009" classname="Coral.Clock"/>
  <testcase name="Events change should NOT trigger a change event when the same time is selected" time="0.011" classname="Coral.Clock"/>
  <testcase name="Events change should trigger a change event when the minutes are changed" time="0.01" classname="Coral.Clock"/>
  <testcase name="Events change should trigger a change event when the hours are changed" time="0.018" classname="Coral.Clock"/>
  <testcase name="Events change should trigger a change event when a field is cleared" time="0.009" classname="Coral.Clock"/>
  <testcase name="Events change should trigger change when a full time was added" time="0.008" classname="Coral.Clock"/>
  <testcase name="Events change should trigger change when the period is changed" time="0.062" classname="Coral.Clock"/>
  <testcase name="Implementation Details should allow numeric values to be typed" time="0.009" classname="Coral.Clock"/>
  <testcase name="Implementation Details #formField testFormField API #value should be provided" time="0" classname="Coral.Clock"/>
  <testcase name="Implementation Details #formField testFormField API #value should have the correct default" time="0" classname="Coral.Clock"/>
  <testcase name="Implementation Details #formField testFormField API #value should not be reflected" time="0.001" classname="Coral.Clock"/>
  <testcase name="Implementation Details #formField testFormField API #name should have empty string as default" time="0.001" classname="Coral.Clock"/>
  <testcase name="Implementation Details #formField testFormField API #name should transform everything to a string" time="0" classname="Coral.Clock"/>
  <testcase name="Implementation Details #formField testFormField API #name should be set synchronously" time="0" classname="Coral.Clock"/>
  <testcase name="Implementation Details #formField testFormField API #name should not submit a value when the name is not specified even though there is a value" time="0.006" classname="Coral.Clock"/>
  <testcase name="Implementation Details #formField testFormField API #name should submit the one single value" time="0.009" classname="Coral.Clock"/>
  <testcase name="Implementation Details #formField testFormField API #required should default to false" time="0" classname="Coral.Clock"/>
  <testcase name="Implementation Details #formField testFormField API #invalid should default to false" time="0" classname="Coral.Clock"/>
  <testcase name="Implementation Details #formField testFormField API #invalid should be settable programmatically" time="0" classname="Coral.Clock"/>
  <testcase name="Implementation Details #formField testFormField API #disabled should default to false" time="0" classname="Coral.Clock"/>
  <testcase name="Implementation Details #formField testFormField API #disabled should behave like a boolean value" time="0.001" classname="Coral.Clock"/>
  <testcase name="Implementation Details #formField testFormField API #readOnly should default to false" time="0" classname="Coral.Clock"/>
  <testcase name="Implementation Details #formField testFormField API #labelledBy should remove labels with empty string" time="0" classname="Coral.Clock"/>
  <testcase name="Implementation Details #formField testFormField API #labelledBy should support multiple labels" time="0" classname="Coral.Clock"/>
  <testcase name="Implementation Details #formField testFormField API #clear() should set the valueProperty to the default when called" time="0.001" classname="Coral.Clock"/>
  <testcase name="Implementation Details #formField testFormField API #reset() should reset to the initial value when called" time="0.001" classname="Coral.Clock"/>
  <testcase name="Implementation Details #formField testFormField API #reset() should be called when form is reset programmatically" time="0.011" classname="Coral.Clock"/>
  <testcase name="Implementation Details #formField testFormField API #reset() should be called when form is reset via reset input" time="0.009" classname="Coral.Clock"/>
  <testcase name="Implementation Details #formField testFormField Markup #disabled should behave like a boolean value" time="0.001" classname="Coral.Clock"/>
  <testcase name="Implementation Details #formField testFormField Markup #labelledby should label component using attribute" time="0.001" classname="Coral.Clock"/>
  <testcase name="Implementation Details #formField testFormField Events #change should not be trigged when setting the value programmatically" time="0.001" classname="Coral.Clock"/>
  <testcase name="Implementation Details #formField testFormField Events #change should trigger a change event when we interact with the internal input" time="0" classname="Coral.Clock"/>
  <testcase name="API #name should have empty string as default" time="0" classname="Coral.Clock"/>
  <testcase name="API #name should submit nothing when name is not specified" time="0.006" classname="Coral.Clock"/>
  <testcase name="API #name should set the name to the hidden input" time="0" classname="Coral.Clock"/>
  <testcase name="API #name should submit the one single value" time="0.006" classname="Coral.Clock"/>
  <testcase name="API #value should default to empty" time="0" classname="Coral.Clock"/>
  <testcase name="API #value should be settable" time="0.001" classname="Coral.Clock"/>
  <testcase name="API #value should accept empty string" time="0.001" classname="Coral.Clock"/>
  <testcase name="API #value should accept 24h time" time="0.002" classname="Coral.Clock"/>
  <testcase name="API #value should ignore invalid values" time="0.004" classname="Coral.Clock"/>
  <testcase name="API #value should reset value if a Date object is given" time="0.002" classname="Coral.Clock"/>
  <testcase name="API #value should reset value if a moment object is given" time="0.001" classname="Coral.Clock"/>
  <testcase name="API #value should update textContent of _elements.valueAsText element" time="0.004" classname="Coral.Clock"/>
  <testcase name="API #disabled should have false as default" time="0" classname="Coral.Clock"/>
  <testcase name="API #disabled should not submit when disabled is not specified" time="0.005" classname="Coral.Clock"/>
  <testcase name="API #valueAsDate should default to null" time="0" classname="Coral.Clock"/>
  <testcase name="API #valueAsDate should accept dates" time="0.001" classname="Coral.Clock"/>
  <testcase name="API #valueAsDate should reject date strings" time="0.001" classname="Coral.Clock"/>
  <testcase name="API #valueAsDate should be able to clear the value" time="0.001" classname="Coral.Clock"/>
  <testcase name="API #valueAsDate should not accept moment values" time="0" classname="Coral.Clock"/>
  <testcase name="API #valueFormat should default to HH:mm" time="0" classname="Coral.Clock"/>
  <testcase name="API #valueFormat should support different formats" time="0.002" classname="Coral.Clock"/>
  <testcase name="API #valueFormat should reset to default when setting to empty string" time="0.001" classname="Coral.Clock"/>
  <testcase name="API #valueFormat should support AM/PM" time="0.005" classname="Coral.Clock"/>
  <testcase name="API #displayFormat should update textContent of _elements.valueAsText element" time="0.003" classname="Coral.Clock"/>
  <testcase name="API #variant should be set to &quot;default&quot; by default" time="0" classname="Coral.Clock"/>
  <testcase name="API #variant should be possible to set the variant" time="0" classname="Coral.Clock"/>
  <testcase name="API #focus() should set focus to hours input if no other descendant has focus" time="0.002" classname="Coral.Clock"/>
  <testcase name="API #focus() should not recieve focus when disabled" time="0.001" classname="Coral.Clock"/>
  <testcase name="API #labelledby property should default to null" time="0.001" classname="Coral.Clock"/>
  <testcase name="API #labelledby should combine labelledby and _elements.valueAsText.id in the aria-labelledby attribute" time="0.002" classname="Coral.Clock"/>
  <testcase name="Markup #valueAsDate should be ignored as an attribute" time="0.009" classname="Coral.Clock"/>
  <testcase name="Markup #displayFormat should default to HH:mm" time="0.008" classname="Coral.Clock"/>
  <testcase name="Markup #displayFormat should support different formats (1)" time="0.01" classname="Coral.Clock"/>
  <testcase name="Markup #displayFormat should support different formats (2)" time="0.008" classname="Coral.Clock"/>
  <testcase name="Markup #displayFormat should support different formats (3)" time="0.009" classname="Coral.Clock"/>
  <testcase name="Markup #displayFormat should reset to default when setting to empty string" time="0.01" classname="Coral.Clock"/>
  <testcase name="Markup #displayFormat should show the AM/PM selector" time="0.011" classname="Coral.Clock"/>
  <testcase name="Markup #displayFormat should switch from PM to AM" time="0.042" classname="Coral.Clock"/>
  <testcase name="Markup #displayFormat should switch from AM to PM" time="0.036" classname="Coral.Clock"/>
  <testcase name="Markup #displayFormat should allow AM/PM lowercase and uppercase format" time="0.009" classname="Coral.Clock"/>
  <testcase name="Markup #displayFormat should support changing the value with AM/PM set" time="0.016" classname="Coral.Clock"/>
  <testcase name="Markup #displayFormat should stay empty when value is empty and AM/PM is set" time="0.05" classname="Coral.Clock"/>
  <testcase name="Markup #displayFormat should not change display nor value if AM/PM is set but hours format is 24 hours clock" time="0.033" classname="Coral.Clock"/>
  <testcase name="Markup #labelledby should combine labelledby and _elements.valueAsText.id in the aria-labelledby attribute" time="0.008" classname="Coral.Clock"/>
  <testcase name="Events change should NOT trigger a change event when the value property is programmatically set" time="0.009" classname="Coral.Clock"/>
  <testcase name="Events change should NOT trigger a change event when the valueAsDate property is programmatically set" time="0.011" classname="Coral.Clock"/>
  <testcase name="Events change should NOT trigger a change event when the same time is selected" time="0.007" classname="Coral.Clock"/>
  <testcase name="Events change should trigger a change event when the minutes are changed" time="0.009" classname="Coral.Clock"/>
  <testcase name="Events change should trigger a change event when the hours are changed" time="0.009" classname="Coral.Clock"/>
  <testcase name="Events change should trigger a change event when a field is cleared" time="0.012" classname="Coral.Clock"/>
  <testcase name="Events change should trigger change when a full time was added" time="0.011" classname="Coral.Clock"/>
  <testcase name="Events change should trigger change when the period is changed" time="0.045" classname="Coral.Clock"/>
  <testcase name="Implementation Details should allow numeric values to be typed" time="0.007" classname="Coral.Clock"/>
  <testcase name="Implementation Details #formField testFormField API #value should be provided" time="0" classname="Coral.Clock"/>
  <testcase name="Implementation Details #formField testFormField API #value should have the correct default" time="0.001" classname="Coral.Clock"/>
  <testcase name="Implementation Details #formField testFormField API #value should not be reflected" time="0.001" classname="Coral.Clock"/>
  <testcase name="Implementation Details #formField testFormField API #name should have empty string as default" time="0" classname="Coral.Clock"/>
  <testcase name="Implementation Details #formField testFormField API #name should transform everything to a string" time="0.001" classname="Coral.Clock"/>
  <testcase name="Implementation Details #formField testFormField API #name should be set synchronously" time="0" classname="Coral.Clock"/>
  <testcase name="Implementation Details #formField testFormField API #name should not submit a value when the name is not specified even though there is a value" time="0.008" classname="Coral.Clock"/>
  <testcase name="Implementation Details #formField testFormField API #name should submit the one single value" time="0.012" classname="Coral.Clock"/>
  <testcase name="Implementation Details #formField testFormField API #required should default to false" time="0.001" classname="Coral.Clock"/>
  <testcase name="Implementation Details #formField testFormField API #invalid should default to false" time="0" classname="Coral.Clock"/>
  <testcase name="Implementation Details #formField testFormField API #invalid should be settable programmatically" time="0" classname="Coral.Clock"/>
  <testcase name="Implementation Details #formField testFormField API #disabled should default to false" time="0" classname="Coral.Clock"/>
  <testcase name="Implementation Details #formField testFormField API #disabled should behave like a boolean value" time="0.001" classname="Coral.Clock"/>
  <testcase name="Implementation Details #formField testFormField API #readOnly should default to false" time="0" classname="Coral.Clock"/>
  <testcase name="Implementation Details #formField testFormField API #labelledBy should remove labels with empty string" time="0.001" classname="Coral.Clock"/>
  <testcase name="Implementation Details #formField testFormField API #labelledBy should support multiple labels" time="0.001" classname="Coral.Clock"/>
  <testcase name="Implementation Details #formField testFormField API #clear() should set the valueProperty to the default when called" time="0.001" classname="Coral.Clock"/>
  <testcase name="Implementation Details #formField testFormField API #reset() should reset to the initial value when called" time="0.001" classname="Coral.Clock"/>
  <testcase name="Implementation Details #formField testFormField API #reset() should be called when form is reset programmatically" time="0.006" classname="Coral.Clock"/>
  <testcase name="Implementation Details #formField testFormField API #reset() should be called when form is reset via reset input" time="0.007" classname="Coral.Clock"/>
  <testcase name="Implementation Details #formField testFormField Markup #disabled should behave like a boolean value" time="0.001" classname="Coral.Clock"/>
  <testcase name="Implementation Details #formField testFormField Markup #labelledby should label component using attribute" time="0" classname="Coral.Clock"/>
  <testcase name="Implementation Details #formField testFormField Events #change should not be trigged when setting the value programmatically" time="0.001" classname="Coral.Clock"/>
  <testcase name="Implementation Details #formField testFormField Events #change should trigger a change event when we interact with the internal input" time="0" classname="Coral.Clock"/>
  <testcase name="namespace should be defined" time="0" classname="Coral.Color"/>
  <testcase name="API should be set up with default values" time="0.002" classname="Coral.Color"/>
  <testcase name="API should be possible to get/set alpha" time="0" classname="Coral.Color"/>
  <testcase name="API should be possible to set rgb values" time="0.001" classname="Coral.Color"/>
  <testcase name="API should be possible to set an rgb string as value" time="0.001" classname="Coral.Color"/>
  <testcase name="API should be possible to parse an rgba" time="0" classname="Coral.Color"/>
  <testcase name="API should be possible to use isSimilarTo" time="0" classname="Coral.Color"/>
  <testcase name="API should be possible to parse a cmyk" time="0" classname="Coral.Color"/>
  <testcase name="API should be possible to parse a hex color" time="0" classname="Coral.Color"/>
  <testcase name="API should be possible to parse a hsb color" time="0" classname="Coral.Color"/>
  <testcase name="API should be possible to parse a hsl color" time="0" classname="Coral.Color"/>
  <testcase name="API should be possible to parse a hsla color" time="0" classname="Coral.Color"/>
  <testcase name="API should be possible to get/set rgbValue" time="0" classname="Coral.Color"/>
  <testcase name="API should be possible to get/set rgbaValue" time="0" classname="Coral.Color"/>
  <testcase name="API should be possible to get/set hexValue" time="0" classname="Coral.Color"/>
  <testcase name="API should be possible to get/set cmykValue" time="0" classname="Coral.Color"/>
  <testcase name="API should be possible to get/set hsbValue" time="0" classname="Coral.Color"/>
  <testcase name="API should be possible to get/set hslValue" time="0" classname="Coral.Color"/>
  <testcase name="API should be possible to get/set hslaValue" time="0" classname="Coral.Color"/>
  <testcase name="API should be able to parse valid colors (generic test)" time="0.001" classname="Coral.Color"/>
  <testcase name="API should not be to parse all invalid colors (generic test)" time="0" classname="Coral.Color"/>
  <testcase name="API should be possible to check if colors are similar (generic test)" time="0.002" classname="Coral.Color"/>
  <testcase name="API should be possible to easily convert colors without loss (generic test)" time="0.017" classname="Coral.Color"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.ColorInput.Item"/>
  <testcase name="API #value should be set up with default values" time="0" classname="Coral.ColorInput.Item"/>
  <testcase name="API #value should be possible to get/set a valid color values (generic test)" time="0.004" classname="Coral.ColorInput.Item"/>
  <testcase name="API #value should not be possible to get/set a invalid color values (generic test)" time="0.001" classname="Coral.ColorInput.Item"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.ColorInput"/>
  <testcase name="Instantiation should be possible to clone the element using markup" time="0.001" classname="Coral.ColorInput"/>
  <testcase name="Instantiation should be possible via cloneNode using js" time="0.015" classname="Coral.ColorInput"/>
  <testcase name="API #name should be possible to set the name" time="0" classname="Coral.ColorInput"/>
  <testcase name="API #value should be possible to set the value" time="0.003" classname="Coral.ColorInput"/>
  <testcase name="API #disabled should be possible to disable the colorinput" time="0.002" classname="Coral.ColorInput"/>
  <testcase name="API #invalid should be possible to force a value to be invalid" time="0.001" classname="Coral.ColorInput"/>
  <testcase name="API #readOnly should be possible to make colorinput readonly" time="0" classname="Coral.ColorInput"/>
  <testcase name="API #required should be possible to make it required to set a value" time="0" classname="Coral.ColorInput"/>
  <testcase name="API #labelledBy should default to null" time="0.001" classname="Coral.ColorInput"/>
  <testcase name="API #placeholder should default to &quot;&quot;" time="0" classname="Coral.ColorInput"/>
  <testcase name="API #placeholder should be set and reflected" time="0" classname="Coral.ColorInput"/>
  <testcase name="API #variant should default to &quot;default&quot;" time="0" classname="Coral.ColorInput"/>
  <testcase name="API #variant should be possible to set the variant" time="0" classname="Coral.ColorInput"/>
  <testcase name="API #valueAsColor should default to null" time="0" classname="Coral.ColorInput"/>
  <testcase name="API #valueAsColor should be possible to get/set the value as Coral.Color instead of a string" time="0.005" classname="Coral.ColorInput"/>
  <testcase name="API #autoGenerateColors should default to &quot;off&quot;" time="0" classname="Coral.ColorInput"/>
  <testcase name="API #autoGenerateColors should be possible to auto generate colors and remove them again " time="0.019" classname="Coral.ColorInput"/>
  <testcase name="API #showSwatches should default to &quot;on&quot;" time="0" classname="Coral.ColorInput"/>
  <testcase name="API #showSwatches should be possible to enable/disable the swatches view" time="0" classname="Coral.ColorInput"/>
  <testcase name="API #showProperties should default to &quot;on&quot;" time="0" classname="Coral.ColorInput"/>
  <testcase name="API #showProperties should be possible to enable/disable the color properties view" time="0.001" classname="Coral.ColorInput"/>
  <testcase name="API #showDefaultColors should default to &quot;on&quot;" time="0" classname="Coral.ColorInput"/>
  <testcase name="API #showDefaultColors should be possible to add/remove default colors" time="0" classname="Coral.ColorInput"/>
  <testcase name="API #selectedItem should default to null" time="0" classname="Coral.ColorInput"/>
  <testcase name="API #selectedItem should select one of the preconfigured colors if the value specified is one of them (or very similar)" time="0.002" classname="Coral.ColorInput"/>
  <testcase name="API #items should start with the initial default colors" time="0" classname="Coral.ColorInput"/>
  <testcase name="Markup #value should be possible to set the value using markup" time="0.014" classname="Coral.ColorInput"/>
  <testcase name="Markup #name should be possible to set the name using markup" time="0.015" classname="Coral.ColorInput"/>
  <testcase name="Markup #disabled should be possible to disable using markup" time="0.011" classname="Coral.ColorInput"/>
  <testcase name="Markup #invalid should be possible to &quot;force&quot; colorinput to be invalid using markup" time="0.009" classname="Coral.ColorInput"/>
  <testcase name="Markup #readonly should be possible to set readOnly using markup" time="0.009" classname="Coral.ColorInput"/>
  <testcase name="Markup #required should be possible to set required using markup" time="0.009" classname="Coral.ColorInput"/>
  <testcase name="Markup #labelledby should be possible to set labelledBy using markup" time="0.027" classname="Coral.ColorInput"/>
  <testcase name="Markup #variant should be possible to set the variant using markup" time="0.011" classname="Coral.ColorInput"/>
  <testcase name="Markup #autogeneratecolors should be possible to autogenerate colors using markup" time="0.018" classname="Coral.ColorInput"/>
  <testcase name="Markup #showSwatches should be possible to turn on/off the different views using markup" time="0.011" classname="Coral.ColorInput"/>
  <testcase name="Markup #showProperties should be possible to turn on/off the different views using markup" time="0.01" classname="Coral.ColorInput"/>
  <testcase name="Markup #showDefaultColors should be possible to add custom color with default colors using markup" time="0.009" classname="Coral.ColorInput"/>
  <testcase name="Markup #showDefaultColors should be possible to add custom color without default colors using markup" time="0.009" classname="Coral.ColorInput"/>
  <testcase name="User Interaction should open a overlay on click on the colorinput button" time="0.026" classname="Coral.ColorInput"/>
  <testcase name="User Interaction should update all its views if form field is changed directly via input colorinput never the less + select right colors" time="0.014" classname="Coral.ColorInput"/>
  <testcase name="User Interaction should set invalid if wrong value is set by user" time="0.017" classname="Coral.ColorInput"/>
  <testcase name="User Interaction should select corresponding swatch on pressing arrow keys" time="0.042" classname="Coral.ColorInput"/>
  <testcase name="Implementation Details should have right classes set" time="0.012" classname="Coral.ColorInput"/>
  <testcase name="Implementation Details should have the right role set" time="0.014" classname="Coral.ColorInput"/>
  <testcase name="Implementation Details should generate a swatches subview for the colorinput" time="0.073" classname="Coral.ColorInput"/>
  <testcase name="Implementation Details should generate a properties subview for the colorinput" time="0.021" classname="Coral.ColorInput"/>
  <testcase name="Implementation Details should update swatches when value is changed" time="0.026" classname="Coral.ColorInput"/>
  <testcase name="Implementation Details #formField testFormField API #value should be provided" time="0" classname="Coral.ColorInput"/>
  <testcase name="Implementation Details #formField testFormField API #value should have the correct default" time="0.001" classname="Coral.ColorInput"/>
  <testcase name="Implementation Details #formField testFormField API #value should not be reflected" time="0.002" classname="Coral.ColorInput"/>
  <testcase name="Implementation Details #formField testFormField API #name should have empty string as default" time="0" classname="Coral.ColorInput"/>
  <testcase name="Implementation Details #formField testFormField API #name should transform everything to a string" time="0" classname="Coral.ColorInput"/>
  <testcase name="Implementation Details #formField testFormField API #name should be set synchronously" time="0" classname="Coral.ColorInput"/>
  <testcase name="Implementation Details #formField testFormField API #name should not submit a value when the name is not specified even though there is a value" time="0.016" classname="Coral.ColorInput"/>
  <testcase name="Implementation Details #formField testFormField API #name should submit the one single value" time="0.017" classname="Coral.ColorInput"/>
  <testcase name="Implementation Details #formField testFormField API #required should default to false" time="0" classname="Coral.ColorInput"/>
  <testcase name="Implementation Details #formField testFormField API #invalid should default to false" time="0" classname="Coral.ColorInput"/>
  <testcase name="Implementation Details #formField testFormField API #invalid should be settable programmatically" time="0" classname="Coral.ColorInput"/>
  <testcase name="Implementation Details #formField testFormField API #disabled should default to false" time="0" classname="Coral.ColorInput"/>
  <testcase name="Implementation Details #formField testFormField API #disabled should behave like a boolean value" time="0" classname="Coral.ColorInput"/>
  <testcase name="Implementation Details #formField testFormField API #readOnly should default to false" time="0.001" classname="Coral.ColorInput"/>
  <testcase name="Implementation Details #formField testFormField API #labelledBy should remove labels with empty string" time="0.001" classname="Coral.ColorInput"/>
  <testcase name="Implementation Details #formField testFormField API #labelledBy should support multiple labels" time="0.001" classname="Coral.ColorInput"/>
  <testcase name="Implementation Details #formField testFormField API #clear() should set the valueProperty to the default when called" time="0.002" classname="Coral.ColorInput"/>
  <testcase name="Implementation Details #formField testFormField API #reset() should reset to the initial value when called" time="0.004" classname="Coral.ColorInput"/>
  <testcase name="Implementation Details #formField testFormField API #reset() should be called when form is reset programmatically" time="0.016" classname="Coral.ColorInput"/>
  <testcase name="Implementation Details #formField testFormField API #reset() should be called when form is reset via reset input" time="0.027" classname="Coral.ColorInput"/>
  <testcase name="Implementation Details #formField testFormField Markup #disabled should behave like a boolean value" time="0.002" classname="Coral.ColorInput"/>
  <testcase name="Implementation Details #formField testFormField Markup #labelledby should label component using attribute" time="0.001" classname="Coral.ColorInput"/>
  <testcase name="Implementation Details #formField testFormField Events #change should not be trigged when setting the value programmatically" time="0.002" classname="Coral.ColorInput"/>
  <testcase name="Implementation Details #formField testFormField Events #change should trigger a change event when we interact with the internal input" time="0.001" classname="Coral.ColorInput"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.ColumnView.Column"/>
  <testcase name="API #activeItem it should default to null" time="0" classname="Coral.ColumnView.Column"/>
  <testcase name="API #activeItem should not be settable" time="0" classname="Coral.ColumnView.Column"/>
  <testcase name="API #activeItem should return an active item" time="0" classname="Coral.ColumnView.Column"/>
  <testcase name="API #items should not be settable" time="0" classname="Coral.ColumnView.Column"/>
  <testcase name="API #selectedItem it should default to null" time="0" classname="Coral.ColumnView.Column"/>
  <testcase name="API #selectedItem should not be settable" time="0" classname="Coral.ColumnView.Column"/>
  <testcase name="API #selectedItem should return a selected item" time="0" classname="Coral.ColumnView.Column"/>
  <testcase name="API #selectedItem should return null when _selectionMode == null" time="0" classname="Coral.ColumnView.Column"/>
  <testcase name="API #selectedItems should default to null" time="0.001" classname="Coral.ColumnView.Column"/>
  <testcase name="API #selectedItems should not be settable" time="0.001" classname="Coral.ColumnView.Column"/>
  <testcase name="API #selectedItems should return a selected item" time="0" classname="Coral.ColumnView.Column"/>
  <testcase name="Markup #content should not move items into the content zone if tag is explicitely given" time="0.003" classname="Coral.ColumnView.Column"/>
  <testcase name="Markup #content should move items into the content zone if tag is not given" time="0.002" classname="Coral.ColumnView.Column"/>
  <testcase name="User Interaction should selected an item when the thumbnail is clicked" time="0.004" classname="Coral.ColumnView.Column"/>
  <testcase name="User Interaction should ignore selection when _selectionMode = NONE" time="0.004" classname="Coral.ColumnView.Column"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.ColumnView.Item"/>
  <testcase name="Namespace should define the variants in an enum" time="0" classname="Coral.ColumnView.Item"/>
  <testcase name="API #icon should default to empty string" time="0" classname="Coral.ColumnView.Item"/>
  <testcase name="API #icon should be settable" time="0.001" classname="Coral.ColumnView.Item"/>
  <testcase name="API #icon should remove the contents of the thumbnail if set" time="0" classname="Coral.ColumnView.Item"/>
  <testcase name="API #selected should default to false" time="0" classname="Coral.ColumnView.Item"/>
  <testcase name="API #selected should be settable" time="0" classname="Coral.ColumnView.Item"/>
  <testcase name="Namespace should be defined" time="0.001" classname="Coral.ColumnView.Preview"/>
  <testcase name="Markup #content should not move items into the content zone if tag is explicitly given" time="0.001" classname="Coral.ColumnView.Preview"/>
  <testcase name="Markup #content should move items into the content zone if tag is not given" time="0.001" classname="Coral.ColumnView.Preview"/>
  <testcase name="Namespace should be defined in the Coral namespace" time="0.001" classname="Coral.ColumnView"/>
  <testcase name="Namespace should define the selection mode in an enum" time="0" classname="Coral.ColumnView"/>
  <testcase name="Instantiation should be possible to clone via markup" time="0" classname="Coral.ColumnView"/>
  <testcase name="API #selectionMode should default to false" time="0" classname="Coral.ColumnView"/>
  <testcase name="API #selectionMode should set the selectionMode on the internal columns" time="0.006" classname="Coral.ColumnView"/>
  <testcase name="Events #coral-columnview:loaditems should fire a &quot;coral-columnview:loaditems&quot; event after initial load if there is space on screen for more items" time="0.005" classname="Coral.ColumnView"/>
  <testcase name="Events #coral-columnview:loaditems should fire a &quot;coral-columnview:loaditems&quot; event until there is no more space on screen" time="0.004" classname="Coral.ColumnView"/>
  <testcase name="Events #coral-columnview:change should not be triggered when the column content is clicked an nothing was active" time="0.011" classname="Coral.ColumnView"/>
  <testcase name="Events #coral-columnview:change should be triggered when an item is selected" time="0.005" classname="Coral.ColumnView"/>
  <testcase name="Events #coral-columnview:change should be triggered when an item is activated" time="0.007" classname="Coral.ColumnView"/>
  <testcase name="Events #coral-columnview:change should be triggered when an item is activated (selectionMode=single)" time="0.006" classname="Coral.ColumnView"/>
  <testcase name="Events #coral-columnview:change should not be triggered if selectionMode=NONE" time="0.002" classname="Coral.ColumnView"/>
  <testcase name="Events #coral-columnview:change should be triggered when selection is in a different column" time="0.019" classname="Coral.ColumnView"/>
  <testcase name="Events #coral-columnview:change should be triggered when another column is activated" time="0.012" classname="Coral.ColumnView"/>
  <testcase name="Events #coral-columnview:change should be triggered when the the content background is clicked" time="0.009" classname="Coral.ColumnView"/>
  <testcase name="Events #coral-columnview:change should be triggered when the the content background of a column without selection is clicked" time="0.015" classname="Coral.ColumnView"/>
  <testcase name="Events #coral-columnview:change should trigger an event when a selected item is removed" time="0.025" classname="Coral.ColumnView"/>
  <testcase name="Events #coral-columnview:navigate should not be triggered when the column view initializes" time="0.01" classname="Coral.ColumnView"/>
  <testcase name="Events #coral-columnview:navigate should be triggered when a new column is added and it is ready" time="0.009" classname="Coral.ColumnView"/>
  <testcase name="Events #coral-columnview:navigate should be triggered when a column is removed" time="0.229" classname="Coral.ColumnView"/>
  <testcase name="Events #coral-columnview:activeitemchange should be triggered when an item is activated" time="0.011" classname="Coral.ColumnView"/>
  <testcase name="Events #coral-columnview:activeitemchange should support activating an item in a previous column" time="0.015" classname="Coral.ColumnView"/>
  <testcase name="Events #coral-columnview:activeitemchange should not trigger an event when the same item is activated" time="0.013" classname="Coral.ColumnView"/>
  <testcase name="Events #coral-columnview:activeitemchange should trigger an event when the active parent is activated again" time="0.011" classname="Coral.ColumnView"/>
  <testcase name="Events #coral-columnview:activeitemchange should be triggered when the the content background is clicked" time="0.011" classname="Coral.ColumnView"/>
  <testcase name="Implementation Details should clear the columns to the right when an item is programmatically activated" time="0.012" classname="Coral.ColumnView"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.CycleButton.Item"/>
  <testcase name="Namespace should define the displayMode in an enum" time="0.002" classname="Coral.CycleButton.Item"/>
  <testcase name="Instantiation should be possible to clone the element using markup" time="0.001" classname="Coral.CycleButton.Item"/>
  <testcase name="Instantiation should be possible via cloneNode using js" time="0" classname="Coral.CycleButton.Item"/>
  <testcase name="API #displayMode should exist" time="0" classname="Coral.CycleButton.Item"/>
  <testcase name="API #displayMode should have default set to inherit" time="0" classname="Coral.CycleButton.Item"/>
  <testcase name="API #displayMode should not accept invalid value" time="0.001" classname="Coral.CycleButton.Item"/>
  <testcase name="API #icon should exist" time="0" classname="Coral.CycleButton.Item"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.CycleButton.Action"/>
  <testcase name="Instantiation should be possible to clone the element using markup" time="0" classname="Coral.CycleButton.Action"/>
  <testcase name="Instantiation should be possible via cloneNode using js" time="0.001" classname="Coral.CycleButton.Action"/>
  <testcase name="API #content should default to empty string" time="0" classname="Coral.CycleButton.Action"/>
  <testcase name="API #content should support HTML content" time="0.001" classname="Coral.CycleButton.Action"/>
  <testcase name="API #content should not be settable" time="0" classname="Coral.CycleButton.Action"/>
  <testcase name="API #icon should default to empty string" time="0" classname="Coral.CycleButton.Action"/>
  <testcase name="API #icon should be reflected to the DOM" time="0" classname="Coral.CycleButton.Action"/>
  <testcase name="API #icon should convert any value to string" time="0" classname="Coral.CycleButton.Action"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.CycleButton"/>
  <testcase name="Namespace should define the displayMode in an enum" time="0" classname="Coral.CycleButton"/>
  <testcase name="Instantiation should be possible to clone the element using markup" time="0.001" classname="Coral.CycleButton"/>
  <testcase name="Instantiation should be possible via cloneNode using js" time="0.004" classname="Coral.CycleButton"/>
  <testcase name="API #icon should have the general icon" time="0.007" classname="Coral.CycleButton"/>
  <testcase name="API #threshold should have default threshold" time="0.004" classname="Coral.CycleButton"/>
  <testcase name="API #displayMode should have default displayMode set to icon" time="0.003" classname="Coral.CycleButton"/>
  <testcase name="API #displayMode should display only icon when in icon mode and icon and text is in item object" time="0.005" classname="Coral.CycleButton"/>
  <testcase name="API #displayMode should display icon and text when in icontext mode and icon and text is in item object" time="0.009" classname="Coral.CycleButton"/>
  <testcase name="API #displayMode should display only icon when component in icontext mode and item in icon mode" time="0.006" classname="Coral.CycleButton"/>
  <testcase name="API #displayMode should display only text when in text mode and icon and text is in item object" time="0.004" classname="Coral.CycleButton"/>
  <testcase name="API #displayMode should display text when in icon mode and only text is in item object" time="0.005" classname="Coral.CycleButton"/>
  <testcase name="API #displayMode should display icon when in text mode and only icon is in item object" time="0.005" classname="Coral.CycleButton"/>
  <testcase name="API #selectedItem should return null when there are 0 buttons" time="0.004" classname="Coral.CycleButton"/>
  <testcase name="API #selectedItem should return the selected item" time="0.005" classname="Coral.CycleButton"/>
  <testcase name="API #selectedItem should be readonly" time="0.003" classname="Coral.CycleButton"/>
  <testcase name="API #selectedItem should return the first element after a child got added" time="0.018" classname="Coral.CycleButton"/>
  <testcase name="API #selectedItem should stay on the current item when the only item present got clicked" time="0.006" classname="Coral.CycleButton"/>
  <testcase name="API #selectedItem should return the id of the 2nd child, after the 1st child got removed, using removeChild" time="0.01" classname="Coral.CycleButton"/>
  <testcase name="API #selectedItem should return the id of the 2nd child, after the 1st child got removed" time="0.012" classname="Coral.CycleButton"/>
  <testcase name="API #selectedItem should select the next available item on removing the current selection" time="0.032" classname="Coral.CycleButton"/>
  <testcase name="API #selectedItem removing all items should set selectedItem to null" time="0.005" classname="Coral.CycleButton"/>
  <testcase name="API #selectedItem preset selection should be honoured" time="0.005" classname="Coral.CycleButton"/>
  <testcase name="API #items should exist and be readonly" time="0.005" classname="Coral.CycleButton"/>
  <testcase name="API #items #length should return the number of items" time="0.005" classname="Coral.CycleButton"/>
  <testcase name="API #items #add should allow adding a node before the desired one" time="0.012" classname="Coral.CycleButton"/>
  <testcase name="API #items #add should allow adding a node at the end" time="0.01" classname="Coral.CycleButton"/>
  <testcase name="API #items #add should return the added node" time="0.006" classname="Coral.CycleButton"/>
  <testcase name="API #items #add should support adding an object" time="0.007" classname="Coral.CycleButton"/>
  <testcase name="API #items #add should do nothing if the added node is not a cyclebutton-item element" time="0.005" classname="Coral.CycleButton"/>
  <testcase name="API #items #add should trigger coral-collection:add" time="0.042" classname="Coral.CycleButton"/>
  <testcase name="API #items #remove should remove the desired node" time="0.008" classname="Coral.CycleButton"/>
  <testcase name="API #items #remove should return the removed node" time="0.006" classname="Coral.CycleButton"/>
  <testcase name="API #items #remove should do nothing if the removed is not a dom element" time="0.005" classname="Coral.CycleButton"/>
  <testcase name="API #items #remove should trigger coral-collection:remove" time="0.012" classname="Coral.CycleButton"/>
  <testcase name="API #items #getAll should return all nodes" time="0.006" classname="Coral.CycleButton"/>
  <testcase name="API #items #clear should remove all nodes" time="0.009" classname="Coral.CycleButton"/>
  <testcase name="API #items #clear should trigger coral-collection:remove for each removed node" time="0.035" classname="Coral.CycleButton"/>
  <testcase name="API #actions should exist and be readonly" time="0.006" classname="Coral.CycleButton"/>
  <testcase name="API #actions #length should return the number of items" time="0.005" classname="Coral.CycleButton"/>
  <testcase name="API #actions #add should allow adding a node before the desired one" time="0.004" classname="Coral.CycleButton"/>
  <testcase name="API #actions #add should allow adding a node at the end" time="0.004" classname="Coral.CycleButton"/>
  <testcase name="API #actions #add should return the added node" time="0.005" classname="Coral.CycleButton"/>
  <testcase name="API #actions #add should support adding an object" time="0.005" classname="Coral.CycleButton"/>
  <testcase name="API #actions #add should do nothing if the added node is not a cyclebutton-action element" time="0.006" classname="Coral.CycleButton"/>
  <testcase name="API #actions #remove should remove the desired node" time="0.005" classname="Coral.CycleButton"/>
  <testcase name="API #actions #remove should return the removed node" time="0.007" classname="Coral.CycleButton"/>
  <testcase name="API #actions #remove should do nothing if the removed is not a dom element" time="0.005" classname="Coral.CycleButton"/>
  <testcase name="API #actions #getAll should return all nodes" time="0.004" classname="Coral.CycleButton"/>
  <testcase name="API #actions #clear should remove all nodes" time="0.004" classname="Coral.CycleButton"/>
  <testcase name="Markup #threshold should be in normal mode if itemCount less than threshold" time="0.005" classname="Coral.CycleButton"/>
  <testcase name="Markup #threshold should enable extended mode if itemCount greater than threshold" time="0.008" classname="Coral.CycleButton"/>
  <testcase name="Markup #threshold should change extended mode if itemCount gets greater than threshold" time="0.019" classname="Coral.CycleButton"/>
  <testcase name="Markup #threshold should change extended mode if itemCount gets less than threshold" time="0.007" classname="Coral.CycleButton"/>
  <testcase name="Events should not trigger change when appended" time="0.041" classname="Coral.CycleButton"/>
  <testcase name="Events should trigger change on click" time="0.007" classname="Coral.CycleButton"/>
  <testcase name="Events should proxy click event on action when selected by clicking an actionList item" time="0.013" classname="Coral.CycleButton"/>
  <testcase name="User Interaction should open the overlay when there are more than 3 items and keep the focus on the item" time="0.069" classname="Coral.CycleButton"/>
  <testcase name="User Interaction overlay should be open following a click of a child of the button element" time="0.009" classname="Coral.CycleButton"/>
  <testcase name="User Interaction should close the overlay when the selected item is clicked again" time="0.013" classname="Coral.CycleButton"/>
  <testcase name="User Interaction should close the overlay, update the selected item and focus the button when an item is clicked" time="0.075" classname="Coral.CycleButton"/>
  <testcase name="User Interaction should close the overlay, when there is a global click outside of the overlay" time="0.011" classname="Coral.CycleButton"/>
  <testcase name="User Interaction should move to the next item when the current item gets clicked and focus it" time="0.007" classname="Coral.CycleButton"/>
  <testcase name="User Interaction should keep the actions selectList hidden when there are no actions" time="0.005" classname="Coral.CycleButton"/>
  <testcase name="User Interaction should show the actions selectList when there are actions" time="0.01" classname="Coral.CycleButton"/>
  <testcase name="User Interaction should switch between inline/overlay selection when adding/removing nodes" time="0.041" classname="Coral.CycleButton"/>
  <testcase name="User Interaction should allow changing the number of nodes after which to switch to overlay selection" time="0.015" classname="Coral.CycleButton"/>
  <testcase name="User Interaction should update the overlay content when adding/removing more items" time="0.015" classname="Coral.CycleButton"/>
  <testcase name="User Interaction should have the general icon when item is clicked and has no icon defined" time="0.012" classname="Coral.CycleButton"/>
  <testcase name="User Interaction should have the item icon when item is clicked and has a icon defined" time="0.008" classname="Coral.CycleButton"/>
  <testcase name="Implementation Details should keep selection when moved around" time="0.01" classname="Coral.CycleButton"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.Datepicker"/>
  <testcase name="Namespace should define the types in an enum" time="0" classname="Coral.Datepicker"/>
  <testcase name="Instantiation should be possible to clone the element using markup" time="0.001" classname="Coral.Datepicker"/>
  <testcase name="Instantiation should be possible to clone the element using markup type=&quot;time&quot;" time="0.002" classname="Coral.Datepicker"/>
  <testcase name="API #displayFormat should default to YYYY-MM-DD" time="0" classname="Coral.Datepicker"/>
  <testcase name="API #displayFormat should change the default based on the type" time="0.001" classname="Coral.Datepicker"/>
  <testcase name="API #displayFormat should allow a custom value" time="0.001" classname="Coral.Datepicker"/>
  <testcase name="API #displayFormat should fallback empty strings to the defaults" time="0" classname="Coral.Datepicker"/>
  <testcase name="API #displayFormat should allow the user to type dates in the displayFormat" time="0" classname="Coral.Datepicker"/>
  <testcase name="API #displayFormat should reject the value if it does not match the format" time="0.004" classname="Coral.Datepicker"/>
  <testcase name="API #displayFormat should update the input with the new value based on the format" time="0.016" classname="Coral.Datepicker"/>
  <testcase name="API #displayFormat should allow setting a format with am/pm" time="0" classname="Coral.Datepicker"/>
  <testcase name="API #labelledBy should label the input" time="0.001" classname="Coral.Datepicker"/>
  <testcase name="API #name should have empty string as default" time="0.001" classname="Coral.Datepicker"/>
  <testcase name="API #name should set the name" time="0" classname="Coral.Datepicker"/>
  <testcase name="API #name should submit nothing when the name is not specified" time="0.052" classname="Coral.Datepicker"/>
  <testcase name="API #name should submit the value" time="0.05" classname="Coral.Datepicker"/>
  <testcase name="API #name should use the valueformat for the submitted value" time="0" classname="Coral.Datepicker"/>
  <testcase name="API #placeholder should default to &quot;&quot;" time="0" classname="Coral.Datepicker"/>
  <testcase name="API #placeholder should be set and reflected" time="0" classname="Coral.Datepicker"/>
  <testcase name="API #readOnly should default to false" time="0.001" classname="Coral.Datepicker"/>
  <testcase name="API #readOnly should set readonly" time="0" classname="Coral.Datepicker"/>
  <testcase name="API #type should default to false" time="0" classname="Coral.Datepicker"/>
  <testcase name="API #type should set the new type" time="0.001" classname="Coral.Datepicker"/>
  <testcase name="API #value should default to empty string" time="0" classname="Coral.Datepicker"/>
  <testcase name="API #value should accept valid dates" time="0.011" classname="Coral.Datepicker"/>
  <testcase name="API #value should accept &quot;today&quot; as a value" time="0.008" classname="Coral.Datepicker"/>
  <testcase name="API #value should reject invalid value strings" time="0" classname="Coral.Datepicker"/>
  <testcase name="API #value should reject invalid date strings" time="0" classname="Coral.Datepicker"/>
  <testcase name="API #value should accept date objects" time="0.007" classname="Coral.Datepicker"/>
  <testcase name="API #value should accept moment objects" time="0.008" classname="Coral.Datepicker"/>
  <testcase name="API #valueAsDate should default to null" time="0" classname="Coral.Datepicker"/>
  <testcase name="API #valueAsDate should accept dates" time="0.006" classname="Coral.Datepicker"/>
  <testcase name="API #valueAsDate should reject date strings" time="0.001" classname="Coral.Datepicker"/>
  <testcase name="API #valueAsDate should be able to clear the value" time="0.012" classname="Coral.Datepicker"/>
  <testcase name="API #valueFormat should default to YYYY-MM-DD" time="0" classname="Coral.Datepicker"/>
  <testcase name="API #valueFormat should change the default based on the type" time="0.001" classname="Coral.Datepicker"/>
  <testcase name="API #valueFormat should allow a custom value" time="0" classname="Coral.Datepicker"/>
  <testcase name="API #valueFormat should fallback empty strings to the defaults" time="0.001" classname="Coral.Datepicker"/>
  <testcase name="API #valueFormat should accept values with the new format" time="0" classname="Coral.Datepicker"/>
  <testcase name="API #valueFormat should update the hidden input with the new value based on the format" time="0.007" classname="Coral.Datepicker"/>
  <testcase name="API #valueFormat should update Min and Max values with the new format" time="0" classname="Coral.Datepicker"/>
  <testcase name="API #variant should be set to &quot;default&quot; by default" time="0" classname="Coral.Datepicker"/>
  <testcase name="API #variant should be possible to set the variant" time="0" classname="Coral.Datepicker"/>
  <testcase name="Markup #invalid should consider the markup as the truth until user interaction happened" time="0.087" classname="Coral.Datepicker"/>
  <testcase name="Markup #type should default to &quot;date&quot;" time="0.013" classname="Coral.Datepicker"/>
  <testcase name="Markup #type should accept &quot;datetime&quot;" time="0.008" classname="Coral.Datepicker"/>
  <testcase name="Markup #type should accept &quot;time&quot;" time="0.007" classname="Coral.Datepicker"/>
  <testcase name="Markup #type should accept custom value format" time="0.007" classname="Coral.Datepicker"/>
  <testcase name="Markup #type should accept custom display format" time="0.006" classname="Coral.Datepicker"/>
  <testcase name="Markup #value should default to empty string" time="0.007" classname="Coral.Datepicker"/>
  <testcase name="Markup #value should accept valid dates" time="0.02" classname="Coral.Datepicker"/>
  <testcase name="Markup #value should accept &quot;today&quot; as a value" time="0.014" classname="Coral.Datepicker"/>
  <testcase name="Markup #value should automatically initialize the clock to &quot;now&quot; if the type is &quot;time&quot; and value &quot;today&quot;" time="0.014" classname="Coral.Datepicker"/>
  <testcase name="Markup #value should automatically initialize the clock to &quot;now&quot; if the type is &quot;datetime&quot; and value &quot;today&quot;" time="0.031" classname="Coral.Datepicker"/>
  <testcase name="Markup #value should initialize the clock to 0am if the type is &quot;date&quot; and value &quot;today&quot;" time="0.021" classname="Coral.Datepicker"/>
  <testcase name="Markup #value should reject invalid value strings" time="0.007" classname="Coral.Datepicker"/>
  <testcase name="Markup #valueAsDate should default to null" time="0.006" classname="Coral.Datepicker"/>
  <testcase name="Markup #valueAsDate should return assigned value as Date" time="0.018" classname="Coral.Datepicker"/>
  <testcase name="Markup #valueAsDate should not accept valueAsDate as an attribute" time="0.007" classname="Coral.Datepicker"/>
  <testcase name="Events #change should not trigger a change event at instantiation" time="0.152" classname="Coral.Datepicker"/>
  <testcase name="Events #change should not trigger a change event when a value is set programmatically" time="0.029" classname="Coral.Datepicker"/>
  <testcase name="Events #change should trigger a change event when a date is selected" time="0.044" classname="Coral.Datepicker"/>
  <testcase name="Events #change should trigger a change event when a time is selected" time="0.041" classname="Coral.Datepicker"/>
  <testcase name="Events #change should trigger a change event when a datetime is selected" time="0.037" classname="Coral.Datepicker"/>
  <testcase name="Events #change should trigger a change event when a datetime (with no initial value) is selected" time="0.041" classname="Coral.Datepicker"/>
  <testcase name="User Interaction should show the invalid style if the user sets the date manually" time="0.067" classname="Coral.Datepicker"/>
  <testcase name="User Interaction should show set the current time as default when no time is set, but a date was chosen" time="0.055" classname="Coral.Datepicker"/>
  <testcase name="User Interaction toggle should open calendar" time="0.209" classname="Coral.Datepicker"/>
  <testcase name="User Interaction should not toggle the calendar when readonly" time="0.007" classname="Coral.Datepicker"/>
  <testcase name="User Interaction should recheck the invalid state after a user interaction happened" time="0.091" classname="Coral.Datepicker"/>
  <testcase name="User Interaction should restore focus to toggle when closed using ESC key" time="0.065" classname="Coral.Datepicker"/>
  <testcase name="Implementation details should show different controls depending on the type" time="0.044" classname="Coral.Datepicker"/>
  <testcase name="Implementation details should close the popover when a date is clicked" time="0.042" classname="Coral.Datepicker"/>
  <testcase name="Implementation details should close the popover when the same date is clicked" time="0.03" classname="Coral.Datepicker"/>
  <testcase name="Implementation details should close the popover when the same date is clicked" time="0.044" classname="Coral.Datepicker"/>
  <testcase name="Implementation details #formField testFormField API #value should be provided" time="0" classname="Coral.Datepicker"/>
  <testcase name="Implementation details #formField testFormField API #value should have the correct default" time="0.007" classname="Coral.Datepicker"/>
  <testcase name="Implementation details #formField testFormField API #value should not be reflected" time="0.007" classname="Coral.Datepicker"/>
  <testcase name="Implementation details #formField testFormField API #name should have empty string as default" time="0.001" classname="Coral.Datepicker"/>
  <testcase name="Implementation details #formField testFormField API #name should transform everything to a string" time="0.001" classname="Coral.Datepicker"/>
  <testcase name="Implementation details #formField testFormField API #name should be set synchronously" time="0" classname="Coral.Datepicker"/>
  <testcase name="Implementation details #formField testFormField API #name should not submit a value when the name is not specified even though there is a value" time="0.017" classname="Coral.Datepicker"/>
  <testcase name="Implementation details #formField testFormField API #name should submit the one single value" time="0.011" classname="Coral.Datepicker"/>
  <testcase name="Implementation details #formField testFormField API #required should default to false" time="0.001" classname="Coral.Datepicker"/>
  <testcase name="Implementation details #formField testFormField API #invalid should default to false" time="0.001" classname="Coral.Datepicker"/>
  <testcase name="Implementation details #formField testFormField API #invalid should be settable programmatically" time="0" classname="Coral.Datepicker"/>
  <testcase name="Implementation details #formField testFormField API #disabled should default to false" time="0" classname="Coral.Datepicker"/>
  <testcase name="Implementation details #formField testFormField API #disabled should behave like a boolean value" time="0.001" classname="Coral.Datepicker"/>
  <testcase name="Implementation details #formField testFormField API #readOnly should default to false" time="0" classname="Coral.Datepicker"/>
  <testcase name="Implementation details #formField testFormField API #labelledBy should remove labels with empty string" time="0.001" classname="Coral.Datepicker"/>
  <testcase name="Implementation details #formField testFormField API #labelledBy should support multiple labels" time="0" classname="Coral.Datepicker"/>
  <testcase name="Implementation details #formField testFormField API #clear() should set the valueProperty to the default when called" time="0.015" classname="Coral.Datepicker"/>
  <testcase name="Implementation details #formField testFormField API #reset() should reset to the initial value when called" time="0.015" classname="Coral.Datepicker"/>
  <testcase name="Implementation details #formField testFormField API #reset() should be called when form is reset programmatically" time="0.019" classname="Coral.Datepicker"/>
  <testcase name="Implementation details #formField testFormField API #reset() should be called when form is reset via reset input" time="0.021" classname="Coral.Datepicker"/>
  <testcase name="Implementation details #formField testFormField Markup #disabled should behave like a boolean value" time="0.001" classname="Coral.Datepicker"/>
  <testcase name="Implementation details #formField testFormField Markup #labelledby should label component using attribute" time="0.001" classname="Coral.Datepicker"/>
  <testcase name="Implementation details #formField testFormField Events #change should not be trigged when setting the value programmatically" time="0.012" classname="Coral.Datepicker"/>
  <testcase name="Implementation details #formField testFormField Events #change should trigger a change event when we interact with the internal input" time="0.009" classname="Coral.Datepicker"/>
  <testcase name="API #displayFormat should default to YYYY-MM-DD" time="0.001" classname="Coral.Datepicker"/>
  <testcase name="API #displayFormat should change the default based on the type" time="0" classname="Coral.Datepicker"/>
  <testcase name="API #displayFormat should allow a custom value" time="0" classname="Coral.Datepicker"/>
  <testcase name="API #displayFormat should fallback empty strings to the defaults" time="0.001" classname="Coral.Datepicker"/>
  <testcase name="API #displayFormat should allow the user to type dates in the displayFormat" time="0.011" classname="Coral.Datepicker"/>
  <testcase name="API #displayFormat should reject the value if it does not match the format" time="0" classname="Coral.Datepicker"/>
  <testcase name="API #displayFormat should update the input with the new value based on the format" time="0.008" classname="Coral.Datepicker"/>
  <testcase name="API #displayFormat should allow setting a format with am/pm" time="0.018" classname="Coral.Datepicker"/>
  <testcase name="API #labelledBy should label the input" time="0.001" classname="Coral.Datepicker"/>
  <testcase name="API #name should have empty string as default" time="0.001" classname="Coral.Datepicker"/>
  <testcase name="API #name should set the name" time="0" classname="Coral.Datepicker"/>
  <testcase name="API #name should submit nothing when the name is not specified" time="0.049" classname="Coral.Datepicker"/>
  <testcase name="API #name should submit the value" time="0.039" classname="Coral.Datepicker"/>
  <testcase name="API #name should use the valueformat for the submitted value" time="0.053" classname="Coral.Datepicker"/>
  <testcase name="API #placeholder should default to &quot;&quot;" time="0" classname="Coral.Datepicker"/>
  <testcase name="API #placeholder should be set and reflected" time="0.001" classname="Coral.Datepicker"/>
  <testcase name="API #readOnly should default to false" time="0" classname="Coral.Datepicker"/>
  <testcase name="API #readOnly should set readonly" time="0.001" classname="Coral.Datepicker"/>
  <testcase name="API #type should default to false" time="0" classname="Coral.Datepicker"/>
  <testcase name="API #type should set the new type" time="0.001" classname="Coral.Datepicker"/>
  <testcase name="API #value should default to empty string" time="0" classname="Coral.Datepicker"/>
  <testcase name="API #value should accept valid dates" time="0.012" classname="Coral.Datepicker"/>
  <testcase name="API #value should accept &quot;today&quot; as a value" time="0.009" classname="Coral.Datepicker"/>
  <testcase name="API #value should reject invalid value strings" time="0.001" classname="Coral.Datepicker"/>
  <testcase name="API #value should reject invalid date strings" time="0.001" classname="Coral.Datepicker"/>
  <testcase name="API #value should accept date objects" time="0.007" classname="Coral.Datepicker"/>
  <testcase name="API #value should accept moment objects" time="0.018" classname="Coral.Datepicker"/>
  <testcase name="API #valueAsDate should default to null" time="0" classname="Coral.Datepicker"/>
  <testcase name="API #valueAsDate should accept dates" time="0.006" classname="Coral.Datepicker"/>
  <testcase name="API #valueAsDate should reject date strings" time="0" classname="Coral.Datepicker"/>
  <testcase name="API #valueAsDate should be able to clear the value" time="0.011" classname="Coral.Datepicker"/>
  <testcase name="API #valueFormat should default to YYYY-MM-DD" time="0" classname="Coral.Datepicker"/>
  <testcase name="API #valueFormat should change the default based on the type" time="0.001" classname="Coral.Datepicker"/>
  <testcase name="API #valueFormat should allow a custom value" time="0.001" classname="Coral.Datepicker"/>
  <testcase name="API #valueFormat should fallback empty strings to the defaults" time="0" classname="Coral.Datepicker"/>
  <testcase name="API #valueFormat should accept values with the new format" time="0.01" classname="Coral.Datepicker"/>
  <testcase name="API #valueFormat should update the hidden input with the new value based on the format" time="0.008" classname="Coral.Datepicker"/>
  <testcase name="API #valueFormat should update Min and Max values with the new format" time="0.011" classname="Coral.Datepicker"/>
  <testcase name="API #variant should be set to &quot;default&quot; by default" time="0" classname="Coral.Datepicker"/>
  <testcase name="API #variant should be possible to set the variant" time="0" classname="Coral.Datepicker"/>
  <testcase name="Markup #invalid should consider the markup as the truth until user interaction happened" time="0.07" classname="Coral.Datepicker"/>
  <testcase name="Markup #type should default to &quot;date&quot;" time="0.013" classname="Coral.Datepicker"/>
  <testcase name="Markup #type should accept &quot;datetime&quot;" time="0.011" classname="Coral.Datepicker"/>
  <testcase name="Markup #type should accept &quot;time&quot;" time="0.006" classname="Coral.Datepicker"/>
  <testcase name="Markup #type should accept custom value format" time="0.006" classname="Coral.Datepicker"/>
  <testcase name="Markup #type should accept custom display format" time="0.017" classname="Coral.Datepicker"/>
  <testcase name="Markup #value should default to empty string" time="0.006" classname="Coral.Datepicker"/>
  <testcase name="Markup #value should accept valid dates" time="0.017" classname="Coral.Datepicker"/>
  <testcase name="Markup #value should accept &quot;today&quot; as a value" time="0.013" classname="Coral.Datepicker"/>
  <testcase name="Markup #value should automatically initialize the clock to &quot;now&quot; if the type is &quot;time&quot; and value &quot;today&quot;" time="0.014" classname="Coral.Datepicker"/>
  <testcase name="Markup #value should automatically initialize the clock to &quot;now&quot; if the type is &quot;datetime&quot; and value &quot;today&quot;" time="0.014" classname="Coral.Datepicker"/>
  <testcase name="Markup #value should initialize the clock to 0am if the type is &quot;date&quot; and value &quot;today&quot;" time="0.017" classname="Coral.Datepicker"/>
  <testcase name="Markup #value should reject invalid value strings" time="0.01" classname="Coral.Datepicker"/>
  <testcase name="Markup #valueAsDate should default to null" time="0.01" classname="Coral.Datepicker"/>
  <testcase name="Markup #valueAsDate should return assigned value as Date" time="0.015" classname="Coral.Datepicker"/>
  <testcase name="Markup #valueAsDate should not accept valueAsDate as an attribute" time="0.012" classname="Coral.Datepicker"/>
  <testcase name="Events #change should not trigger a change event at instantiation" time="0.017" classname="Coral.Datepicker"/>
  <testcase name="Events #change should not trigger a change event when a value is set programmatically" time="0.021" classname="Coral.Datepicker"/>
  <testcase name="Events #change should trigger a change event when a date is selected" time="0.039" classname="Coral.Datepicker"/>
  <testcase name="Events #change should trigger a change event when a time is selected" time="0.037" classname="Coral.Datepicker"/>
  <testcase name="Events #change should trigger a change event when a datetime is selected" time="0.038" classname="Coral.Datepicker"/>
  <testcase name="Events #change should trigger a change event when a datetime (with no initial value) is selected" time="0.044" classname="Coral.Datepicker"/>
  <testcase name="User Interaction should show the invalid style if the user sets the date manually" time="0.046" classname="Coral.Datepicker"/>
  <testcase name="User Interaction should show set the current time as default when no time is set, but a date was chosen" time="0.044" classname="Coral.Datepicker"/>
  <testcase name="User Interaction toggle should open calendar" time="0.235" classname="Coral.Datepicker"/>
  <testcase name="User Interaction should not toggle the calendar when readonly" time="0.007" classname="Coral.Datepicker"/>
  <testcase name="User Interaction should recheck the invalid state after a user interaction happened" time="0.1" classname="Coral.Datepicker"/>
  <testcase name="User Interaction should restore focus to toggle when closed using ESC key" time="0.07" classname="Coral.Datepicker"/>
  <testcase name="Implementation details should show different controls depending on the type" time="0.036" classname="Coral.Datepicker"/>
  <testcase name="Implementation details should close the popover when a date is clicked" time="0.044" classname="Coral.Datepicker"/>
  <testcase name="Implementation details should close the popover when the same date is clicked" time="0.045" classname="Coral.Datepicker"/>
  <testcase name="Implementation details should close the popover when the same date is clicked" time="0.049" classname="Coral.Datepicker"/>
  <testcase name="Implementation details #formField testFormField API #value should be provided" time="0" classname="Coral.Datepicker"/>
  <testcase name="Implementation details #formField testFormField API #value should have the correct default" time="0.006" classname="Coral.Datepicker"/>
  <testcase name="Implementation details #formField testFormField API #value should not be reflected" time="0.008" classname="Coral.Datepicker"/>
  <testcase name="Implementation details #formField testFormField API #name should have empty string as default" time="0" classname="Coral.Datepicker"/>
  <testcase name="Implementation details #formField testFormField API #name should transform everything to a string" time="0" classname="Coral.Datepicker"/>
  <testcase name="Implementation details #formField testFormField API #name should be set synchronously" time="0" classname="Coral.Datepicker"/>
  <testcase name="Implementation details #formField testFormField API #name should not submit a value when the name is not specified even though there is a value" time="0.012" classname="Coral.Datepicker"/>
  <testcase name="Implementation details #formField testFormField API #name should submit the one single value" time="0.015" classname="Coral.Datepicker"/>
  <testcase name="Implementation details #formField testFormField API #required should default to false" time="0" classname="Coral.Datepicker"/>
  <testcase name="Implementation details #formField testFormField API #invalid should default to false" time="0" classname="Coral.Datepicker"/>
  <testcase name="Implementation details #formField testFormField API #invalid should be settable programmatically" time="0" classname="Coral.Datepicker"/>
  <testcase name="Implementation details #formField testFormField API #disabled should default to false" time="0" classname="Coral.Datepicker"/>
  <testcase name="Implementation details #formField testFormField API #disabled should behave like a boolean value" time="0" classname="Coral.Datepicker"/>
  <testcase name="Implementation details #formField testFormField API #readOnly should default to false" time="0" classname="Coral.Datepicker"/>
  <testcase name="Implementation details #formField testFormField API #labelledBy should remove labels with empty string" time="0.001" classname="Coral.Datepicker"/>
  <testcase name="Implementation details #formField testFormField API #labelledBy should support multiple labels" time="0" classname="Coral.Datepicker"/>
  <testcase name="Implementation details #formField testFormField API #clear() should set the valueProperty to the default when called" time="0.017" classname="Coral.Datepicker"/>
  <testcase name="Implementation details #formField testFormField API #reset() should reset to the initial value when called" time="0.016" classname="Coral.Datepicker"/>
  <testcase name="Implementation details #formField testFormField API #reset() should be called when form is reset programmatically" time="0.021" classname="Coral.Datepicker"/>
  <testcase name="Implementation details #formField testFormField API #reset() should be called when form is reset via reset input" time="0.057" classname="Coral.Datepicker"/>
  <testcase name="Implementation details #formField testFormField Markup #disabled should behave like a boolean value" time="0.002" classname="Coral.Datepicker"/>
  <testcase name="Implementation details #formField testFormField Markup #labelledby should label component using attribute" time="0" classname="Coral.Datepicker"/>
  <testcase name="Implementation details #formField testFormField Events #change should not be trigged when setting the value programmatically" time="0.018" classname="Coral.Datepicker"/>
  <testcase name="Implementation details #formField testFormField Events #change should trigger a change event when we interact with the internal input" time="0.008" classname="Coral.Datepicker"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.Dialog"/>
  <testcase name="Namespace should expose enumerations" time="0.001" classname="Coral.Dialog"/>
  <testcase name="Instantiation should be possible via cloneNode using markup" time="0.004" classname="Coral.Dialog"/>
  <testcase name="Instantiation should be possible via cloneNode using markup (wrapper)" time="0.002" classname="Coral.Dialog"/>
  <testcase name="Instantiation should be possible via cloneNode using js" time="0.001" classname="Coral.Dialog"/>
  <testcase name="API should have the correct default attributes" time="0" classname="Coral.Dialog"/>
  <testcase name="API #variant should support error variant" time="0.001" classname="Coral.Dialog"/>
  <testcase name="API #variant should support warning variant" time="0" classname="Coral.Dialog"/>
  <testcase name="API #variant should support success variant" time="0" classname="Coral.Dialog"/>
  <testcase name="API #variant should support help variant" time="0" classname="Coral.Dialog"/>
  <testcase name="API #variant should support info variant" time="0.001" classname="Coral.Dialog"/>
  <testcase name="API #variant should support switching variants" time="0.001" classname="Coral.Dialog"/>
  <testcase name="API #focusOnShow should default to ON" time="0" classname="Coral.Dialog"/>
  <testcase name="API #movable should create a drag action instance" time="0.004" classname="Coral.Dialog"/>
  <testcase name="API #movable should be movable by dragging the dialog header" time="0.016" classname="Coral.Dialog"/>
  <testcase name="API #movable should not be possible to have fullscreen and movable set to true" time="0.006" classname="Coral.Dialog"/>
  <testcase name="API #movable should not be possible to have movable and fullscreen set to true" time="0.004" classname="Coral.Dialog"/>
  <testcase name="API #movable should be possible to center a moved dialog" time="0.007" classname="Coral.Dialog"/>
  <testcase name="API #movable should destroy the drag action instance" time="0.004" classname="Coral.Dialog"/>
  <testcase name="API #movable should center the dialog if not movable anymore" time="0.007" classname="Coral.Dialog"/>
  <testcase name="API #backdrop should not take the whole screen if backdrop is set to none" time="0.002" classname="Coral.Dialog"/>
  <testcase name="Markup should focus the focusOnShow element when opened" time="0.201" classname="Coral.Dialog"/>
  <testcase name="Markup should not focus the close button" time="0.195" classname="Coral.Dialog"/>
  <testcase name="User Interaction #ESC should close when escape pressed and interaction=ON" time="0.02" classname="Coral.Dialog"/>
  <testcase name="User Interaction #ESC should not close when ESC pressed and interaction=OFF" time="0.016" classname="Coral.Dialog"/>
  <testcase name="User Interaction #ESC should only close the topmost dialog" time="0.209" classname="Coral.Dialog"/>
  <testcase name="User Interaction [coral-close] should close when close button clicked" time="0.019" classname="Coral.Dialog"/>
  <testcase name="User Interaction [coral-close] should hide when any element with [coral-close] clicked" time="0.012" classname="Coral.Dialog"/>
  <testcase name="User Interaction [coral-close] should only hide if selector matches value of [coral-close], should not let events bubble" time="0.017" classname="Coral.Dialog"/>
  <testcase name="Implementation details Positioning should cause the dialog to scroll when contents are large" time="0.036" classname="Coral.Dialog"/>
  <testcase name="Implementation details Positioning should allow vertical scroll if the dialog is bigger than the window" time="0.021" classname="Coral.Dialog"/>
  <testcase name="Implementation details Positioning should take the whole screen in fullscreen" time="0.006" classname="Coral.Dialog"/>
  <testcase name="Implementation details Positioning should be centered when contents are small" time="0.007" classname="Coral.Dialog"/>
  <testcase name="Implementation details Backdrop should remove backdrop when dialog is detached" time="0.008" classname="Coral.Dialog"/>
  <testcase name="Implementation details Backdrop should remove backdrop when dialog is detached (even if dialog was closed)" time="0.007" classname="Coral.Dialog"/>
  <testcase name="Implementation details Backdrop should support inner-wrapper elements" time="0.005" classname="Coral.Dialog"/>
  <testcase name="Implementation details Backdrop should support inner-wrapper elements" time="0.002" classname="Coral.Dialog"/>
  <testcase name="Implementation details Backdrop should wrap internal elements" time="0.001" classname="Coral.Dialog"/>
  <testcase name="Implementation details Backdrop should create wrapper when no content zones are provided" time="0.001" classname="Coral.Dialog"/>
  <testcase name="Implementation details Backdrop should keep all extra elements when content zones are provided" time="0.003" classname="Coral.Dialog"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.Drawer"/>
  <testcase name="Instantiation should be possible using new" time="0.002" classname="Coral.Drawer"/>
  <testcase name="Instantiation should be possible to clone the element using markup" time="0" classname="Coral.Drawer"/>
  <testcase name="Instantiation should be possible to clone the element with open using markup" time="0" classname="Coral.Drawer"/>
  <testcase name="Instantiation should be possible to clone the element direction using markup" time="0.001" classname="Coral.Drawer"/>
  <testcase name="Instantiation should be possible to clone using js" time="0.001" classname="Coral.Drawer"/>
  <testcase name="Markup #open should be closed by default" time="0.001" classname="Coral.Drawer"/>
  <testcase name="Markup #open should update icon accordingly (open=false and direction=down)" time="0.001" classname="Coral.Drawer"/>
  <testcase name="Markup #open should update icon accordingly (open=true and direction=down)" time="0.003" classname="Coral.Drawer"/>
  <testcase name="Markup #open should update icon accordingly (open=false and direction=up)" time="0.001" classname="Coral.Drawer"/>
  <testcase name="Markup #open should open the drawer if open is set to true" time="0.022" classname="Coral.Drawer"/>
  <testcase name="Markup #open should close the drawer if open is set to false" time="0.015" classname="Coral.Drawer"/>
  <testcase name="Markup #direction should set direction class up" time="0.003" classname="Coral.Drawer"/>
  <testcase name="Markup #direction should set direction class down" time="0.003" classname="Coral.Drawer"/>
  <testcase name="Markup #direction should update icon accordingly (open=true and direction=up)" time="0.006" classname="Coral.Drawer"/>
  <testcase name="Markup #disabled should disable the button and set the class name is-disable and aria-disabled" time="0.002" classname="Coral.Drawer"/>
  <testcase name="Markup #content should use the innerHTML of the drawer to set its content" time="0.001" classname="Coral.Drawer"/>
  <testcase name="API #open should default to false" time="0" classname="Coral.Drawer"/>
  <testcase name="API #direction should default to down" time="0" classname="Coral.Drawer"/>
  <testcase name="API #disabled should default to false" time="0" classname="Coral.Drawer"/>
  <testcase name="API #content should have an empty content zone" time="0.001" classname="Coral.Drawer"/>
  <testcase name="Events should trigger coral-drawer:open" time="0.103" classname="Coral.Drawer"/>
  <testcase name="Events should not trigger coral-drawer:open if silenced" time="0.103" classname="Coral.Drawer"/>
  <testcase name="Events should trigger coral-drawer:close" time="0.102" classname="Coral.Drawer"/>
  <testcase name="Events should toggle coral-drawer on toggle click" time="0.004" classname="Coral.Drawer"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.FileUpload.Item"/>
  <testcase name="API #file should expose file properties" time="0" classname="Coral.FileUpload.Item"/>
  <testcase name="API #file should be readonly" time="0" classname="Coral.FileUpload.Item"/>
  <testcase name="API #parameters should set additional parameters that have name and value property" time="0" classname="Coral.FileUpload.Item"/>
  <testcase name="API #parameters should not allow additional parameters without name and value or not an array" time="0" classname="Coral.FileUpload.Item"/>
  <testcase name="API #withCredentials should be false by default and of type boolean" time="0" classname="Coral.FileUpload.Item"/>
  <testcase name="API #timeout should be 0 by default and of type number" time="0" classname="Coral.FileUpload.Item"/>
  <testcase name="API #responseType should be Coral.FileUpload.Item.responseType.TEXT by default and only accept related enum" time="0.001" classname="Coral.FileUpload.Item"/>
  <testcase name="API #readyState should be 0 by default and readonly" time="0" classname="Coral.FileUpload.Item"/>
  <testcase name="API #response should be empty string by default and readonly" time="0" classname="Coral.FileUpload.Item"/>
  <testcase name="API #responseText should be empty string by default and readonly" time="0" classname="Coral.FileUpload.Item"/>
  <testcase name="API #responseXML should be null by default and readonly" time="0" classname="Coral.FileUpload.Item"/>
  <testcase name="API #statusText should be empty string by default and readonly" time="0" classname="Coral.FileUpload.Item"/>
  <testcase name="API #_xhr should reflect xhr properties" time="0.005" classname="Coral.FileUpload.Item"/>
  <testcase name="Implementation Details _isMimeTypeAllowed should be able to reject files based on their mimetype" time="0.001" classname="Coral.FileUpload.Item"/>
  <testcase name="Implementation Details _isMimeTypeAllowed should allow wildcard mime type" time="0" classname="Coral.FileUpload.Item"/>
  <testcase name="Implementation Details _isMimeTypeAllowed should allow multiple mimetypes for a single file extension" time="0" classname="Coral.FileUpload.Item"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.FileUpload"/>
  <testcase name="Instantiation should be possible to clone the element using markup" time="0.001" classname="Coral.FileUpload"/>
  <testcase name="Instantiation should be possible to clone the element with special attributes" time="0" classname="Coral.FileUpload"/>
  <testcase name="Markup #parameters should retrieve and set additional parameters" time="0.002" classname="Coral.FileUpload"/>
  <testcase name="API should throw an error if trying to abort a file upload on synchronous mode" time="0.001" classname="Coral.FileUpload"/>
  <testcase name="API #parameters should set additional parameters that have name and value property" time="0.003" classname="Coral.FileUpload"/>
  <testcase name="API #parameters should add hidden inputs mapped to parameters on synchronous mode" time="0.001" classname="Coral.FileUpload"/>
  <testcase name="API #parameters should not allow additional parameters without name and value or not an array" time="0.002" classname="Coral.FileUpload"/>
  <testcase name="API #disabled should disable the file input" time="0.001" classname="Coral.FileUpload"/>
  <testcase name="API #invalid should invalid the file input" time="0" classname="Coral.FileUpload"/>
  <testcase name="API #invalid should set file input to required" time="0.001" classname="Coral.FileUpload"/>
  <testcase name="API #readOnly should set the file input to readonly" time="0.001" classname="Coral.FileUpload"/>
  <testcase name="API #multiple should set multiple attribute to the input file" time="0.001" classname="Coral.FileUpload"/>
  <testcase name="API #multiple should not be possible to select multiple files if multiple is false" time="0.001" classname="Coral.FileUpload"/>
  <testcase name="API #uploadQueue should not be possible to set uploadQueue" time="0.001" classname="Coral.FileUpload"/>
  <testcase name="API #value should throw an exception if setting a value different than empty string" time="0" classname="Coral.FileUpload"/>
  <testcase name="API #value should throw an exception if setting values different than empty string" time="0.001" classname="Coral.FileUpload"/>
  <testcase name="API #value should retrieve filename values for all selected items if multiple is true" time="0.001" classname="Coral.FileUpload"/>
  <testcase name="API #value should retrieve single filename from values for selected item if multiple is false" time="0.001" classname="Coral.FileUpload"/>
  <testcase name="API #value #values should clear all selected files if setting values to empty array or [&quot;&quot;] or [null]" time="0.002" classname="Coral.FileUpload"/>
  <testcase name="API #name should set the name of the file input" time="0.001" classname="Coral.FileUpload"/>
  <testcase name="API #name should set the default name &quot;file&quot; to the files uploading" time="0.002" classname="Coral.FileUpload"/>
  <testcase name="API #accept should set mimetype restrictions to the file input" time="0" classname="Coral.FileUpload"/>
  <testcase name="API #autoStart should set autoStart to false by default" time="0.001" classname="Coral.FileUpload"/>
  <testcase name="API #clear() should clear the file selection if calling clear() whether async or not" time="0.001" classname="Coral.FileUpload"/>
  <testcase name="API #async should remove all selected files if setting async to a new value" time="0.001" classname="Coral.FileUpload"/>
  <testcase name="API #async should throw an error if trying to remove a file from the upload queue on synchronous mode" time="0.001" classname="Coral.FileUpload"/>
  <testcase name="API #async should throw an error if trying to upload a file on synchronous mode" time="0" classname="Coral.FileUpload"/>
  <testcase name="API #labelledBy should set aria-labelledby on input" time="0.001" classname="Coral.FileUpload"/>
  <testcase name="API #[coral-fileupload-submit] should trigger upload when a [coral-fileupload-submit] element is clicked" time="0.002" classname="Coral.FileUpload"/>
  <testcase name="API #[coral-fileupload-submit] should set the upload URL when a [coral-fileupload-submit][formaction] element is clicked" time="0.005" classname="Coral.FileUpload"/>
  <testcase name="API #[coral-fileupload-submit] should set the upload method when a [coral-fileupload-submit][formmethod] element is clicked" time="0.005" classname="Coral.FileUpload"/>
  <testcase name="API #[coral-fileupload-abortfile] should abort the file upload when a [coral-fileupload-abortfile][filename] element is clicked" time="0.002" classname="Coral.FileUpload"/>
  <testcase name="API #[coral-fileupload-removefile] should remove the file from the queue when a [coral-fileupload-removefile][filename] element is clicked" time="0.002" classname="Coral.FileUpload"/>
  <testcase name="API #[coral-fileupload-uploadfile] should state the file upload when a [coral-fileupload-uploadfile][filename] element is clicked" time="0.002" classname="Coral.FileUpload"/>
  <testcase name="Events should trigger change event" time="0" classname="Coral.FileUpload"/>
  <testcase name="Events should not be possible to select items if disabled" time="0" classname="Coral.FileUpload"/>
  <testcase name="Events should trigger coral-fileupload:fileadded event" time="0" classname="Coral.FileUpload"/>
  <testcase name="Events should trigger coral-fileupload:loadstart if calling upload()" time="0.001" classname="Coral.FileUpload"/>
  <testcase name="Events should trigger coral-fileupload:loadstart if autoStart is set to true" time="0.001" classname="Coral.FileUpload"/>
  <testcase name="Events should trigger coral-fileupload:loadstart if calling upload(filename)" time="0.001" classname="Coral.FileUpload"/>
  <testcase name="Events should trigger coral-fileupload:abort if calling abort()" time="0.002" classname="Coral.FileUpload"/>
  <testcase name="Events should trigger coral-fileupload:abort if calling abort(filename)" time="0.002" classname="Coral.FileUpload"/>
  <testcase name="Events should trigger coral-fileupload:fileremoved if calling clear(filename)" time="0.001" classname="Coral.FileUpload"/>
  <testcase name="Events should trigger coral-fileupload:filesizeexceeded event" time="0.001" classname="Coral.FileUpload"/>
  <testcase name="Events should detect if mime type is allowed or not and trigger accordingly" time="0.001" classname="Coral.FileUpload"/>
  <testcase name="Events should allow wildcard mime types" time="0.001" classname="Coral.FileUpload"/>
  <testcase name="Events should allow to add files with unrecognized browser mime types" time="0.002" classname="Coral.FileUpload"/>
  <testcase name="Events should trigger coral-fileupload:[dragenter, dragover, dragleave, drop]" time="0.002" classname="Coral.FileUpload"/>
  <testcase name="Events should trigger coral-fileupload:progress" time="0" classname="Coral.FileUpload">
    <skipped/>
  </testcase>
  <testcase name="Events should trigger coral-fileupload:error" time="0" classname="Coral.FileUpload">
    <skipped/>
  </testcase>
  <testcase name="Implementation Details should set classes and enable/disable when state changes" time="0.002" classname="Coral.FileUpload"/>
  <testcase name="Implementation Details should not stop propagation of inputs that are not controlled by the component" time="0.002" classname="Coral.FileUpload"/>
  <testcase name="Implementation Details should position the file input under the dropzone" time="0.008" classname="Coral.FileUpload"/>
  <testcase name="Implementation Details #formField testFormField API #value should be provided" time="0" classname="Coral.FileUpload"/>
  <testcase name="Implementation Details #formField testFormField API #value should have the correct default" time="0" classname="Coral.FileUpload"/>
  <testcase name="Implementation Details #formField testFormField API #value should not be reflected" time="0" classname="Coral.FileUpload"/>
  <testcase name="Implementation Details #formField testFormField API #name should have empty string as default" time="0" classname="Coral.FileUpload"/>
  <testcase name="Implementation Details #formField testFormField API #name should transform everything to a string" time="0" classname="Coral.FileUpload"/>
  <testcase name="Implementation Details #formField testFormField API #name should be set synchronously" time="0" classname="Coral.FileUpload"/>
  <testcase name="Implementation Details #formField testFormField API #name should not submit a value when the name is not specified even though there is a value" time="0" classname="Coral.FileUpload"/>
  <testcase name="Implementation Details #formField testFormField API #name should submit the one single value" time="0.001" classname="Coral.FileUpload"/>
  <testcase name="Implementation Details #formField testFormField API #required should default to false" time="0" classname="Coral.FileUpload"/>
  <testcase name="Implementation Details #formField testFormField API #invalid should default to false" time="0" classname="Coral.FileUpload"/>
  <testcase name="Implementation Details #formField testFormField API #invalid should be settable programmatically" time="0.001" classname="Coral.FileUpload"/>
  <testcase name="Implementation Details #formField testFormField API #disabled should default to false" time="0" classname="Coral.FileUpload"/>
  <testcase name="Implementation Details #formField testFormField API #disabled should behave like a boolean value" time="0.001" classname="Coral.FileUpload"/>
  <testcase name="Implementation Details #formField testFormField API #readOnly should default to false" time="0" classname="Coral.FileUpload"/>
  <testcase name="Implementation Details #formField testFormField API #labelledBy should remove labels with empty string" time="0" classname="Coral.FileUpload"/>
  <testcase name="Implementation Details #formField testFormField API #labelledBy should support multiple labels" time="0" classname="Coral.FileUpload"/>
  <testcase name="Implementation Details #formField testFormField API #clear() should set the valueProperty to the default when called" time="0" classname="Coral.FileUpload"/>
  <testcase name="Implementation Details #formField testFormField API #reset() should reset to the initial value when called" time="0" classname="Coral.FileUpload"/>
  <testcase name="Implementation Details #formField testFormField API #reset() should be called when form is reset programmatically" time="0.004" classname="Coral.FileUpload"/>
  <testcase name="Implementation Details #formField testFormField API #reset() should be called when form is reset via reset input" time="0.003" classname="Coral.FileUpload"/>
  <testcase name="Implementation Details #formField testFormField Markup #disabled should behave like a boolean value" time="0.001" classname="Coral.FileUpload"/>
  <testcase name="Implementation Details #formField testFormField Markup #labelledby should label component using attribute" time="0.001" classname="Coral.FileUpload"/>
  <testcase name="Implementation Details #formField testFormField Events #change should not be trigged when setting the value programmatically" time="0" classname="Coral.FileUpload"/>
  <testcase name="Implementation Details #formField testFormField Events #change should trigger a change event when we interact with the internal input" time="0" classname="Coral.FileUpload"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.Icon"/>
  <testcase name="Namespace should define the sizes in an enum" time="0.001" classname="Coral.Icon"/>
  <testcase name="Instantiation should be possible using new" time="0" classname="Coral.Icon"/>
  <testcase name="Instantiation should be possible using createElement" time="0" classname="Coral.Icon"/>
  <testcase name="Instantiation should be possible using markup" time="0" classname="Coral.Icon"/>
  <testcase name="Instantiation should be possible to clone using markup" time="0.001" classname="Coral.Icon"/>
  <testcase name="Instantiation should be possible to clone using js" time="0.001" classname="Coral.Icon"/>
  <testcase name="Markup #icon should be empty string initially" time="0" classname="Coral.Icon"/>
  <testcase name="Markup #icon should set the new icon" time="0.001" classname="Coral.Icon"/>
  <testcase name="Markup #icon should not have class for empty icon" time="0" classname="Coral.Icon"/>
  <testcase name="Markup #icon should support arbitrary relative URLs" time="0.001" classname="Coral.Icon"/>
  <testcase name="Markup #icon should support arbitrary relative URLs with paths" time="0" classname="Coral.Icon"/>
  <testcase name="Markup #icon should support root relative URLs" time="0.001" classname="Coral.Icon"/>
  <testcase name="Markup #icon should support arbitrary absolute URLs" time="0" classname="Coral.Icon"/>
  <testcase name="Markup #size should be initially Coral.Icon.size.SMALL" time="0" classname="Coral.Icon"/>
  <testcase name="Markup #size should set the new size" time="0.001" classname="Coral.Icon"/>
  <testcase name="Markup #size should default empty to default" time="0" classname="Coral.Icon"/>
  <testcase name="Markup #size should default invalid values to default" time="0.001" classname="Coral.Icon"/>
  <testcase name="Markup #size should accept lowercase values" time="0" classname="Coral.Icon"/>
  <testcase name="Markup #hidden should hide component on false" time="0.001" classname="Coral.Icon"/>
  <testcase name="API #icon should default to null" time="0" classname="Coral.Icon"/>
  <testcase name="API #icon should set the new icon" time="0" classname="Coral.Icon"/>
  <testcase name="API #icon should trim the value" time="0" classname="Coral.Icon"/>
  <testcase name="API #icon should convert everything to a string" time="0" classname="Coral.Icon"/>
  <testcase name="API #icon should set with an attribute" time="0.001" classname="Coral.Icon"/>
  <testcase name="API #icon should not leave class traces" time="0" classname="Coral.Icon"/>
  <testcase name="API #icon should remove the icon with null" time="0" classname="Coral.Icon"/>
  <testcase name="API #icon should remove the icon with undefined" time="0" classname="Coral.Icon"/>
  <testcase name="API #icon should remove the icon with empty string" time="0" classname="Coral.Icon"/>
  <testcase name="API #icon should remove the icon when the attribute is removed" time="0" classname="Coral.Icon"/>
  <testcase name="API #size should default to Coral.Icon.size.SMALL" time="0" classname="Coral.Icon"/>
  <testcase name="API #size should set the new size" time="0.001" classname="Coral.Icon"/>
  <testcase name="API #size should accept lowercase values" time="0" classname="Coral.Icon"/>
  <testcase name="API #size should be set with an attribute" time="0" classname="Coral.Icon"/>
  <testcase name="API #size should discard values not part of the enum" time="0" classname="Coral.Icon"/>
  <testcase name="API #size should discard unknown attribute" time="0.001" classname="Coral.Icon"/>
  <testcase name="API #size should not remove unknown size classes" time="0" classname="Coral.Icon"/>
  <testcase name="Implementation details alt should add an aria-label equal to the value of the alt property" time="0" classname="Coral.Icon"/>
  <testcase name="Implementation details alt should add an aria-label equal to the value of the icon property when not set and when no title attribute is present" time="0.001" classname="Coral.Icon"/>
  <testcase name="Implementation details alt should add an aria-label equal to the value of the title attribute property when not set and when a title attribute is present" time="0" classname="Coral.Icon"/>
  <testcase name="Implementation details alt should have no aria-label attribute when explicitly set to an empty string" time="0" classname="Coral.Icon"/>
  <testcase name="Implementation details alt should have role=&quot;img&quot; when icon property is not a URL" time="0" classname="Coral.Icon"/>
  <testcase name="Implementation details alt should have role=&quot;presentation&quot; when icon property is a URL" time="0" classname="Coral.Icon"/>
  <testcase name="Implementation details alt should update alt text on child image when icon property is a URL" time="0" classname="Coral.Icon"/>
  <testcase name="Implementation details alt should set alt text on child image to value of title attribute empty string when icon property is a URL and alt is null" time="0" classname="Coral.Icon"/>
  <testcase name="Implementation details alt should set alt text on child image to an empty string when icon property is a URL and alt is an empty string" time="0" classname="Coral.Icon"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.List"/>
  <testcase name="Instantiation should support creation from markup" time="0" classname="Coral.List"/>
  <testcase name="Instantiation should support creation from markup" time="0" classname="Coral.List"/>
  <testcase name="Instantiation should support creation from markup" time="0.001" classname="Coral.List"/>
  <testcase name="Instantiation should support co-existing anchor/button/list items" time="0.002" classname="Coral.List"/>
  <testcase name="Instantiation should be possible via cloneNode using markup" time="0.001" classname="Coral.List"/>
  <testcase name="API #focus should focus on the first selectable element, thus ignoring the hidden elements" time="0.003" classname="Coral.List"/>
  <testcase name="API #focus should move focus on the last selectable element, thus ignoring the hidden elements" time="0.004" classname="Coral.List"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.Masonry.Item"/>
  <testcase name="Instantiation should be possible using new" time="0.001" classname="Coral.Masonry.Item"/>
  <testcase name="Instantiation should be possible using createElement" time="0" classname="Coral.Masonry.Item"/>
  <testcase name="Instantiation should be possible using markup" time="0" classname="Coral.Masonry.Item"/>
  <testcase name="API #selected should be false by default" time="0" classname="Coral.Masonry.Item"/>
  <testcase name="API #selected should toggle attribute and class" time="0" classname="Coral.Masonry.Item"/>
  <testcase name="API #content should not be null" time="0" classname="Coral.Masonry.Item"/>
  <testcase name="API #content should be possible to set content" time="0" classname="Coral.Masonry.Item"/>
  <testcase name="API #_removing should add is-removing class" time="0.009" classname="Coral.Masonry.Item"/>
  <testcase name="API #_removing should temporarily add the item again but flag it as being removed" time="0" classname="Coral.Masonry.Item"/>
  <testcase name="API #_removing should remove the item transition classes" time="0.101" classname="Coral.Masonry.Item"/>
  <testcase name="API #connectedCallback should add the is-managed class" time="0.102" classname="Coral.Masonry.Item"/>
  <testcase name="API #coral-masonry-draghandle should allow to initialize drag action" time="0.001" classname="Coral.Masonry.Item"/>
  <testcase name="API #coral-masonry-draghandle should allow to use the item itself as the handle" time="0.001" classname="Coral.Masonry.Item"/>
  <testcase name="API #coral-masonry-draghandle should allow to destroy drag action" time="0.002" classname="Coral.Masonry.Item"/>
  <testcase name="API #coral-masonry-draghandle should disable drag action if handle cannot be found" time="0" classname="Coral.Masonry.Item"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.Masonry.Layout"/>
  <testcase name="API #destroy should remove the item data" time="0.001" classname="Coral.Masonry.Layout"/>
  <testcase name="API #detach should allow to position an item differently" time="0.002" classname="Coral.Masonry.Layout"/>
  <testcase name="API #itemAt should return null if the position is outside the masonry" time="0.001" classname="Coral.Masonry.Layout"/>
  <testcase name="API #itemAt should return the item for a given relative position" time="0.001" classname="Coral.Masonry.Layout"/>
  <testcase name="Implementation Details should be centered" time="0.008" classname="Coral.Masonry.Layout"/>
  <testcase name="Implementation Details should be centered" time="0.016" classname="Coral.Masonry.Layout"/>
  <testcase name="Implementation Details should be centered" time="0.011" classname="Coral.Masonry.Layout"/>
  <testcase name="Implementation Details should be centered" time="0.021" classname="Coral.Masonry.Layout"/>
  <testcase name="Implementation Details should support columnwidth" time="0.012" classname="Coral.Masonry.Layout"/>
  <testcase name="Implementation Details should support spacing" time="0.005" classname="Coral.Masonry.Layout"/>
  <testcase name="Implementation Details should support multi-columns" time="0.024" classname="Coral.Masonry.Layout"/>
  <testcase name="Implementation Details should support dashboard layout" time="0.014" classname="Coral.Masonry.Layout"/>
  <testcase name="Implementation Details should support fixed-spread layout" time="0.014" classname="Coral.Masonry.Layout"/>
  <testcase name="Implementation Details should support fixed-centered layout" time="0.007" classname="Coral.Masonry.Layout"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.Masonry.Layout"/>
  <testcase name="Instantiation should be possible using new" time="0.002" classname="Coral.Masonry.Layout"/>
  <testcase name="Instantiation should be possible using createElement" time="0.001" classname="Coral.Masonry.Layout"/>
  <testcase name="Instantiation should be possible using markup" time="0.001" classname="Coral.Masonry.Layout"/>
  <testcase name="Instantiation should be possible to clone via markup" time="0.001" classname="Coral.Masonry.Layout"/>
  <testcase name="API #layout should have 4 default layouts defined" time="0.005" classname="Coral.Masonry.Layout"/>
  <testcase name="API #layout should be set and reflected" time="0" classname="Coral.Masonry.Layout"/>
  <testcase name="API #layout should not change the layout if it does not exist" time="0" classname="Coral.Masonry.Layout"/>
  <testcase name="API #selectedItem should be read-only" time="0" classname="Coral.Masonry.Layout"/>
  <testcase name="API #selectedItem should return the selected item" time="0" classname="Coral.Masonry.Layout"/>
  <testcase name="API #selectedItem should return the first selected item" time="0.001" classname="Coral.Masonry.Layout"/>
  <testcase name="API #selectedItem should return null if there are no items selected" time="0" classname="Coral.Masonry.Layout"/>
  <testcase name="API #items should be read-only" time="0" classname="Coral.Masonry.Layout"/>
  <testcase name="API #selectedItems should be read-only" time="0.001" classname="Coral.Masonry.Layout"/>
  <testcase name="API #selectedItems should return all selected items" time="0.001" classname="Coral.Masonry.Layout"/>
  <testcase name="API #selectedItems should return an empty array if there are no items selected" time="0" classname="Coral.Masonry.Layout"/>
  <testcase name="API #orderable should be disabled by default" time="0" classname="Coral.Masonry.Layout"/>
  <testcase name="API #orderable should allow to enable drag &amp; drop for all items" time="0.002" classname="Coral.Masonry.Layout"/>
  <testcase name="API #orderable should allow to disable drag &amp; drop for all items" time="0.002" classname="Coral.Masonry.Layout"/>
  <testcase name="API #spacing should allow to set spacing" time="0.005" classname="Coral.Masonry.Layout"/>
  <testcase name="Events #coral-collection:add should trigger when adding an item" time="0.004" classname="Coral.Masonry.Layout"/>
  <testcase name="Events #coral-collection:remove should trigger when removing an item" time="0.104" classname="Coral.Masonry.Layout"/>
  <testcase name="User Interaction should be possible to focus the first item with tab" time="0.011" classname="Coral.Masonry.Layout"/>
  <testcase name="Implementation Details #resizable should resize the masonry when the container changes its width" time="0.01" classname="Coral.Masonry.Layout"/>
  <testcase name="Implementation Details #resizable should resize the masonry when the container becomes visible" time="0.011" classname="Coral.Masonry.Layout"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.Multifield"/>
  <testcase name="Instantation should be possible to clone the element using markup" time="0.001" classname="Coral.Multifield"/>
  <testcase name="Instantation should be possible to clone using js" time="0.002" classname="Coral.Multifield"/>
  <testcase name="Collection API #items cannot be set" time="0.001" classname="Coral.Multifield"/>
  <testcase name="Collection API triggers coral-collection:add on appendChild" time="0.007" classname="Coral.Multifield"/>
  <testcase name="Collection API triggers coral-collection:remove on removeChild" time="0.028" classname="Coral.Multifield"/>
  <testcase name="Collection API #add with before null should insert at the beginning if there are no items" time="0.002" classname="Coral.Multifield"/>
  <testcase name="Collection API #add with before null should insert at the end of the last item if at least one item" time="0.008" classname="Coral.Multifield"/>
  <testcase name="Collection API #add is able to insert before" time="0.007" classname="Coral.Multifield"/>
  <testcase name="Collection API #add should also support config" time="0.006" classname="Coral.Multifield"/>
  <testcase name="Collection API should trigger coral-collection:add event when adding an item" time="0.008" classname="Coral.Multifield"/>
  <testcase name="Collection API should trigger coral-collection:remove event when removing an item" time="0.028" classname="Coral.Multifield"/>
  <testcase name="Collection API #getAll should be empty initially" time="0.002" classname="Coral.Multifield"/>
  <testcase name="Collection API #getAll should retrieve 1 item" time="0.004" classname="Coral.Multifield"/>
  <testcase name="Collection API #clear should remove all items" time="0.008" classname="Coral.Multifield"/>
  <testcase name="User Interaction should add an item if clicking the add content zone" time="0.005" classname="Coral.Multifield"/>
  <testcase name="User Interaction should remove an item if clicking the remove button" time="0.008" classname="Coral.Multifield"/>
  <testcase name="Events #change should not trigger change event if item is removed and parent is not multifield" time="0.005" classname="Coral.Multifield"/>
  <testcase name="Events #change should trigger a change event if removing a button by clicking the remove button" time="0.006" classname="Coral.Multifield"/>
  <testcase name="Events #change should trigger a change event if reordering the items by drag and drop to bottom" time="0.024" classname="Coral.Multifield"/>
  <testcase name="Events #change should trigger a change event if reordering the items by drag and drop to top" time="0.018" classname="Coral.Multifield"/>
  <testcase name="Implementation Details should support nested multifield" time="0.037" classname="Coral.Multifield"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.NumberInput"/>
  <testcase name="Instantiation should be possible using new" time="0.005" classname="Coral.NumberInput"/>
  <testcase name="Instantiation should be possible using createElement" time="0.013" classname="Coral.NumberInput"/>
  <testcase name="Instantiation should be possible using markup" time="0.003" classname="Coral.NumberInput"/>
  <testcase name="Instantiation should be possible to clone using markup" time="0.006" classname="Coral.NumberInput"/>
  <testcase name="Instantiation should be possible to clone using js" time="0.002" classname="Coral.NumberInput"/>
  <testcase name="Markup #invalid should be settable from markup" time="0.004" classname="Coral.NumberInput"/>
  <testcase name="Markup #invalid should remain invalid after setting a valid number programmatically" time="0.002" classname="Coral.NumberInput"/>
  <testcase name="Markup #invalid should remove invalid after user interaction" time="0.007" classname="Coral.NumberInput"/>
  <testcase name="Markup #invalid should remove invalid after button click" time="0.006" classname="Coral.NumberInput"/>
  <testcase name="API #stepUp() should increment value by step amount" time="0.001" classname="Coral.NumberInput"/>
  <testcase name="API #stepUp() should consider empty value as 0" time="0" classname="Coral.NumberInput"/>
  <testcase name="API #stepUp() should work with 0 as initial value" time="0" classname="Coral.NumberInput"/>
  <testcase name="API #stepUp() should respect max value" time="0.001" classname="Coral.NumberInput"/>
  <testcase name="API #stepUp() should still work while disabled" time="0.001" classname="Coral.NumberInput"/>
  <testcase name="API #stepDown() should decrement value by step amount" time="0" classname="Coral.NumberInput"/>
  <testcase name="API #stepDown() should consider empty value as 0" time="0" classname="Coral.NumberInput"/>
  <testcase name="API #stepDown() should work with 0 as initial value" time="0.001" classname="Coral.NumberInput"/>
  <testcase name="API #stepDown() should respect min value" time="0.001" classname="Coral.NumberInput"/>
  <testcase name="API #stepDown() should still work while disabled" time="0.001" classname="Coral.NumberInput"/>
  <testcase name="API #reset() should allow setting the value attribute and then reseting" time="0.001" classname="Coral.NumberInput"/>
  <testcase name="API #clear() should clear any type of value" time="0" classname="Coral.NumberInput"/>
  <testcase name="API #step should default to 1" time="0.001" classname="Coral.NumberInput"/>
  <testcase name="API #step should change step amount" time="0.001" classname="Coral.NumberInput"/>
  <testcase name="API #step should be ignored if the input is not a number" time="0" classname="Coral.NumberInput"/>
  <testcase name="API #step should ignore invalid values" time="0" classname="Coral.NumberInput"/>
  <testcase name="API #step should accept any as value" time="0.001" classname="Coral.NumberInput"/>
  <testcase name="API #min should default to null" time="0" classname="Coral.NumberInput"/>
  <testcase name="API #min should set min value" time="0" classname="Coral.NumberInput"/>
  <testcase name="API #min should remove the min with null" time="0" classname="Coral.NumberInput"/>
  <testcase name="API #min should remove the min with undefined" time="0.001" classname="Coral.NumberInput"/>
  <testcase name="API #max should default to null" time="0" classname="Coral.NumberInput"/>
  <testcase name="API #max should set max value" time="0" classname="Coral.NumberInput"/>
  <testcase name="API #max should remove the max with null" time="0" classname="Coral.NumberInput"/>
  <testcase name="API #max should remove the max with undefined" time="0" classname="Coral.NumberInput"/>
  <testcase name="API #value should default to empty string" time="0" classname="Coral.NumberInput"/>
  <testcase name="API #value should set the new value" time="0" classname="Coral.NumberInput"/>
  <testcase name="API #value should ignore null" time="0" classname="Coral.NumberInput"/>
  <testcase name="API #value should ignore boolean values" time="0.001" classname="Coral.NumberInput"/>
  <testcase name="API #value should set the value regardless of the max and not set it invalid" time="0.001" classname="Coral.NumberInput"/>
  <testcase name="API #value should set the value regardless of the min and not set it invalid" time="0.001" classname="Coral.NumberInput"/>
  <testcase name="API #value should allow empty value" time="0" classname="Coral.NumberInput"/>
  <testcase name="API #value will parseFloat input values" time="0.001" classname="Coral.NumberInput"/>
  <testcase name="API #value should set NaN if non-empty input cannot be parsed to number" time="0" classname="Coral.NumberInput"/>
  <testcase name="API #valueAsNumber should default to null" time="0" classname="Coral.NumberInput"/>
  <testcase name="API #valueAsNumber should set the new value" time="0" classname="Coral.NumberInput"/>
  <testcase name="API #valueAsNumber should set to NaN when conversion to number is not possible" time="0" classname="Coral.NumberInput"/>
  <testcase name="API #valueAsNumber should get the new value" time="0.001" classname="Coral.NumberInput"/>
  <testcase name="API #name should default to empty string" time="0" classname="Coral.NumberInput"/>
  <testcase name="API #name should be set and reflected" time="0" classname="Coral.NumberInput"/>
  <testcase name="API #name should submit the value when the name is set" time="0" classname="Coral.NumberInput"/>
  <testcase name="API #invalid should default to false" time="0" classname="Coral.NumberInput"/>
  <testcase name="API #invalid should set &quot;invalid&quot; on true" time="0" classname="Coral.NumberInput"/>
  <testcase name="API #disabled should default to false" time="0" classname="Coral.NumberInput"/>
  <testcase name="API #disabled should disable with true" time="0" classname="Coral.NumberInput"/>
  <testcase name="API #disabled should enable it with false" time="0" classname="Coral.NumberInput"/>
  <testcase name="API #disabled should preserve the disabled buttons state when it is re-enabled" time="0" classname="Coral.NumberInput"/>
  <testcase name="API #disabled should handle manipulating disabled attribute" time="0" classname="Coral.NumberInput"/>
  <testcase name="API #readOnly should default to false" time="0" classname="Coral.NumberInput"/>
  <testcase name="API #readOnly should block keys on readOnly" time="0.001" classname="Coral.NumberInput"/>
  <testcase name="API #readOnly should ignore readOnly on stepUp() and stepDown()" time="0" classname="Coral.NumberInput"/>
  <testcase name="API #labelledby should label the input" time="0.001" classname="Coral.NumberInput"/>
  <testcase name="API #placeholder should default to &quot;&quot;" time="0" classname="Coral.NumberInput"/>
  <testcase name="API #placeholder should be set and reflected" time="0" classname="Coral.NumberInput"/>
  <testcase name="Events #change should not trigger change while setting values programmatically" time="0.004" classname="Coral.NumberInput"/>
  <testcase name="Events #change should trigger change when interacted with the input" time="0.004" classname="Coral.NumberInput"/>
  <testcase name="Events #change should trigger change when interacted with the buttons" time="0.007" classname="Coral.NumberInput"/>
  <testcase name="Events #change should trigger change when interacted with the mousewheel" time="0.005" classname="Coral.NumberInput"/>
  <testcase name="Events #change should trigger change when interacted with the keyboard" time="0.016" classname="Coral.NumberInput"/>
  <testcase name="User Interaction should go up when up is pressed" time="0.003" classname="Coral.NumberInput"/>
  <testcase name="User Interaction should ignore up while disabled/readonly" time="0.004" classname="Coral.NumberInput"/>
  <testcase name="User Interaction should go down when down is pressed" time="0.003" classname="Coral.NumberInput"/>
  <testcase name="User Interaction should ignore down while disabled/readonly" time="0.004" classname="Coral.NumberInput"/>
  <testcase name="User Interaction should go down when page down is pressed" time="0.002" classname="Coral.NumberInput"/>
  <testcase name="User Interaction should go down when page up is pressed" time="0.002" classname="Coral.NumberInput"/>
  <testcase name="User Interaction should go to max when home is pressed" time="0.003" classname="Coral.NumberInput"/>
  <testcase name="User Interaction should ignore home while disabled/readonly" time="0.003" classname="Coral.NumberInput"/>
  <testcase name="User Interaction should go to min when end is pressed" time="0.003" classname="Coral.NumberInput"/>
  <testcase name="User Interaction should ignore end while disabled/readonly" time="0.002" classname="Coral.NumberInput"/>
  <testcase name="User Interaction should update the value on input trigger" time="0" classname="Coral.NumberInput"/>
  <testcase name="User Interaction should disable the stepDown button when input equals min value" time="0" classname="Coral.NumberInput"/>
  <testcase name="User Interaction should disable the stepUp button when input equals max value" time="0" classname="Coral.NumberInput"/>
  <testcase name="User Interaction should enable the stepDown and stepUp button when input between min and max value" time="0.001" classname="Coral.NumberInput"/>
  <testcase name="User Interaction should update the value with the mouse wheel" time="0.002" classname="Coral.NumberInput"/>
  <testcase name="User Interaction should not stop the user from scrolling the page if not focused" time="0" classname="Coral.NumberInput"/>
  <testcase name="User Interaction should not stop the user from scrolling the page if readOnly" time="0.002" classname="Coral.NumberInput"/>
  <testcase name="User Interaction should not stop the user from scrolling the page if disabled" time="0.002" classname="Coral.NumberInput"/>
  <testcase name="User Interaction should fallback an invalid input to empty string" time="0" classname="Coral.NumberInput"/>
  <testcase name="User Interaction should have the is-focused class when it becomes focused" time="0.006" classname="Coral.NumberInput"/>
  <testcase name="User Interaction should not have the is-focused class when it becomes blurred" time="0.008" classname="Coral.NumberInput"/>
  <testcase name="Implementation Details #decimals should not return fancy decimal value when increasing the actual value" time="0.002" classname="Coral.NumberInput"/>
  <testcase name="Implementation Details #decimals should not return fancy decimal value when decreasing the actual value" time="0.001" classname="Coral.NumberInput"/>
  <testcase name="Implementation Details #decimals should still work with integers" time="0.001" classname="Coral.NumberInput"/>
  <testcase name="Implementation Details #decimals should not return fancy decimal due to multiplier" time="0.001" classname="Coral.NumberInput"/>
  <testcase name="Implementation Details #formField testFormField API #value should be provided" time="0" classname="Coral.NumberInput"/>
  <testcase name="Implementation Details #formField testFormField API #value should have the correct default" time="0" classname="Coral.NumberInput"/>
  <testcase name="Implementation Details #formField testFormField API #value should not be reflected" time="0" classname="Coral.NumberInput"/>
  <testcase name="Implementation Details #formField testFormField API #name should have empty string as default" time="0" classname="Coral.NumberInput"/>
  <testcase name="Implementation Details #formField testFormField API #name should transform everything to a string" time="0" classname="Coral.NumberInput"/>
  <testcase name="Implementation Details #formField testFormField API #name should be set synchronously" time="0.001" classname="Coral.NumberInput"/>
  <testcase name="Implementation Details #formField testFormField API #name should not submit a value when the name is not specified even though there is a value" time="0.003" classname="Coral.NumberInput"/>
  <testcase name="Implementation Details #formField testFormField API #name should submit the one single value" time="0.002" classname="Coral.NumberInput"/>
  <testcase name="Implementation Details #formField testFormField API #required should default to false" time="0" classname="Coral.NumberInput"/>
  <testcase name="Implementation Details #formField testFormField API #invalid should default to false" time="0" classname="Coral.NumberInput"/>
  <testcase name="Implementation Details #formField testFormField API #invalid should be settable programmatically" time="0.001" classname="Coral.NumberInput"/>
  <testcase name="Implementation Details #formField testFormField API #disabled should default to false" time="0" classname="Coral.NumberInput"/>
  <testcase name="Implementation Details #formField testFormField API #disabled should behave like a boolean value" time="0.001" classname="Coral.NumberInput"/>
  <testcase name="Implementation Details #formField testFormField API #readOnly should default to false" time="0" classname="Coral.NumberInput"/>
  <testcase name="Implementation Details #formField testFormField API #labelledBy should remove labels with empty string" time="0" classname="Coral.NumberInput"/>
  <testcase name="Implementation Details #formField testFormField API #labelledBy should support multiple labels" time="0" classname="Coral.NumberInput"/>
  <testcase name="Implementation Details #formField testFormField API #clear() should set the valueProperty to the default when called" time="0" classname="Coral.NumberInput"/>
  <testcase name="Implementation Details #formField testFormField API #reset() should reset to the initial value when called" time="0.001" classname="Coral.NumberInput"/>
  <testcase name="Implementation Details #formField testFormField API #reset() should be called when form is reset programmatically" time="0.004" classname="Coral.NumberInput"/>
  <testcase name="Implementation Details #formField testFormField API #reset() should be called when form is reset via reset input" time="0.006" classname="Coral.NumberInput"/>
  <testcase name="Implementation Details #formField testFormField Markup #disabled should behave like a boolean value" time="0.001" classname="Coral.NumberInput"/>
  <testcase name="Implementation Details #formField testFormField Markup #labelledby should label component using attribute" time="0.001" classname="Coral.NumberInput"/>
  <testcase name="Implementation Details #formField testFormField Events #change should not be trigged when setting the value programmatically" time="0.001" classname="Coral.NumberInput"/>
  <testcase name="Implementation Details #formField testFormField Events #change should trigger a change event when we interact with the internal input" time="0.001" classname="Coral.NumberInput"/>
  <testcase name="Namespace should be defined in the Coral namespace" time="0" classname="Coral.Overlay"/>
  <testcase name="Namespace should define the align in an enum" time="0" classname="Coral.Overlay"/>
  <testcase name="Namespace should define the collision in an enum" time="0" classname="Coral.Overlay"/>
  <testcase name="Namespace should define the target in an enum" time="0" classname="Coral.Overlay"/>
  <testcase name="Namespace should define the placement in an enum" time="0" classname="Coral.Overlay"/>
  <testcase name="Namespace should define the interaction in an enum" time="0" classname="Coral.Overlay"/>
  <testcase name="Instantiation should be possible to clone the element using markup" time="0" classname="Coral.Overlay"/>
  <testcase name="Instantiation should be possible to clone using js" time="0" classname="Coral.Overlay"/>
  <testcase name="API #smart should default to false" time="0" classname="Coral.Overlay"/>
  <testcase name="API #focusOnShow should default to ON" time="0" classname="Coral.Overlay"/>
  <testcase name="API #alignMy should be deprecated" time="0" classname="Coral.Overlay"/>
  <testcase name="API #alignAt should be deprecated" time="0" classname="Coral.Overlay"/>
  <testcase name="API #placement should default to Coral.Overlay.placement.RIGHT" time="0" classname="Coral.Overlay"/>
  <testcase name="API #placement should be settable and reflected in popper" time="0" classname="Coral.Overlay"/>
  <testcase name="API #target should support DOM elements" time="0.001" classname="Coral.Overlay"/>
  <testcase name="API #target should support _prev" time="0" classname="Coral.Overlay"/>
  <testcase name="API #target should support _next" time="0" classname="Coral.Overlay"/>
  <testcase name="API #target should support CSS selectors" time="0" classname="Coral.Overlay"/>
  <testcase name="API #target should store null when null provided" time="0" classname="Coral.Overlay"/>
  <testcase name="API #target should be reflected in popper" time="0" classname="Coral.Overlay"/>
  <testcase name="API #collision should default to Coral.Overlay.collision.FLIP" time="0" classname="Coral.Overlay"/>
  <testcase name="API #collision should be settable and reflected in popper" time="0.001" classname="Coral.Overlay"/>
  <testcase name="API #within should default to &quot;scrollParent&quot;" time="0" classname="Coral.Overlay"/>
  <testcase name="API #within should be settable and reflected in popper" time="0" classname="Coral.Overlay"/>
  <testcase name="API #inner should default to false" time="0" classname="Coral.Overlay"/>
  <testcase name="API #inner should be settable and reflected in popper" time="0.001" classname="Coral.Overlay"/>
  <testcase name="API #offset should default to 0" time="0.001" classname="Coral.Overlay"/>
  <testcase name="API #offset should correspond to length offset" time="0" classname="Coral.Overlay"/>
  <testcase name="API #offset should set length and breadth offset" time="0" classname="Coral.Overlay"/>
  <testcase name="API #lengthOffset should default to 0px" time="0" classname="Coral.Overlay"/>
  <testcase name="API #lengthOffset should be settable and reflected in popper" time="0" classname="Coral.Overlay"/>
  <testcase name="API #breadthOffset should default to 0px" time="0.001" classname="Coral.Overlay"/>
  <testcase name="API #breadthOffset should be settable and reflected in popper" time="0" classname="Coral.Overlay"/>
  <testcase name="API #interaction should default to Coral.Overlay.interaction.ON" time="0" classname="Coral.Overlay"/>
  <testcase name="API #interaction should be settable" time="0" classname="Coral.Overlay"/>
  <testcase name="Markup #smart should move outside of its parent when opened" time="0.001" classname="Coral.Overlay"/>
  <testcase name="Markup #focusOnShow should try to focus the overlay" time="0.016" classname="Coral.Overlay"/>
  <testcase name="Markup #focusOnShow should focus the overlay when no element is focusable (trapfocus=on)" time="0.018" classname="Coral.Overlay"/>
  <testcase name="Markup #focusOnShow should focus the focussable descendent" time="0.002" classname="Coral.Overlay"/>
  <testcase name="Markup #[coral-close] should hide when any element with [coral-close] clicked" time="0.001" classname="Coral.Overlay"/>
  <testcase name="Markup #[coral-close] should only hide if selector matches value of [coral-close], should not let events bubble" time="0.003" classname="Coral.Overlay"/>
  <testcase name="Events #coral-overlay:positioned should trigger when the overlay is opened" time="0.015" classname="Coral.Overlay"/>
  <testcase name="Implementation Details should support most common alignMy and alignAt combinations" time="0.002" classname="Coral.Overlay"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.Panel"/>
  <testcase name="API #selected should have correct defaults" time="0" classname="Coral.Panel"/>
  <testcase name="API #selected should be settable to truthy" time="0.001" classname="Coral.Panel"/>
  <testcase name="API #selected should be settable to falsy" time="0" classname="Coral.Panel"/>
  <testcase name="API #content should not be null" time="0" classname="Coral.Panel"/>
  <testcase name="Implementation Details should have a role" time="0.001" classname="Coral.Panel"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.PanelStack"/>
  <testcase name="Instantiation should be possible using new" time="0.002" classname="Coral.PanelStack"/>
  <testcase name="Instantiation should be possible using createElement" time="0.001" classname="Coral.PanelStack"/>
  <testcase name="Instantiation should be possible using markup" time="0.001" classname="Coral.PanelStack"/>
  <testcase name="Instantiation should be possible to clone the element using markup" time="0" classname="Coral.PanelStack"/>
  <testcase name="Instantiation should be possible via cloneNode using js" time="0" classname="Coral.PanelStack"/>
  <testcase name="API should not automatically select an item if the current selected item is removed" time="0.005" classname="Coral.PanelStack"/>
  <testcase name="API should trigger a coral-panelstack:change event when an item is selected" time="0.004" classname="Coral.PanelStack"/>
  <testcase name="API #selectedItem should default to null" time="0" classname="Coral.PanelStack"/>
  <testcase name="API #selectedItem should not automatically select an item" time="0" classname="Coral.PanelStack"/>
  <testcase name="API #selectedItem selecting another item should modify #selectedItem" time="0.001" classname="Coral.PanelStack"/>
  <testcase name="API #selectedItem removing an unselected item should not modify #selectedItem" time="0.001" classname="Coral.PanelStack"/>
  <testcase name="API #selectedItem should be null if all items are removed" time="0.001" classname="Coral.PanelStack"/>
  <testcase name="Markup #selectedItem should not automatically select an item" time="0.003" classname="Coral.PanelStack"/>
  <testcase name="Markup #selectedItem should take the last selected" time="0.001" classname="Coral.PanelStack"/>
  <testcase name="Markup #selectedItem should read the selected from the markup" time="0.001" classname="Coral.PanelStack"/>
  <testcase name="Collection API #items cannot be set" time="0.001" classname="Coral.PanelStack"/>
  <testcase name="Collection API triggers coral-collection:add on appendChild" time="0.004" classname="Coral.PanelStack"/>
  <testcase name="Collection API triggers coral-collection:remove on removeChild" time="0.006" classname="Coral.PanelStack"/>
  <testcase name="Collection API triggers coral-collection:remove on removeChild" time="0.008" classname="Coral.PanelStack"/>
  <testcase name="Collection API #add should add the item" time="0.031" classname="Coral.PanelStack"/>
  <testcase name="Collection API #add should also support config" time="0.011" classname="Coral.PanelStack"/>
  <testcase name="Collection API #add with before null should insert at the end" time="0.014" classname="Coral.PanelStack"/>
  <testcase name="Collection API #add is able to insert before" time="0.014" classname="Coral.PanelStack"/>
  <testcase name="Collection API #remove should remove the item" time="0.011" classname="Coral.PanelStack"/>
  <testcase name="Collection API #getAll should be empty initially" time="0.011" classname="Coral.PanelStack"/>
  <testcase name="Collection API #clear should clear all the items" time="0.019" classname="Coral.PanelStack"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.Popover"/>
  <testcase name="Namespace should define the closable in an enum" time="0" classname="Coral.Popover"/>
  <testcase name="Namespace should define the interation in an enum" time="0" classname="Coral.Popover"/>
  <testcase name="Namespace should define the variants in an enum" time="0" classname="Coral.Popover"/>
  <testcase name="Instantiation should be possible via cloneNode using markup" time="0.002" classname="Coral.Popover"/>
  <testcase name="Instantiation should be possible via cloneNode using js" time="0" classname="Coral.Popover"/>
  <testcase name="API #closable should have correct default value" time="0" classname="Coral.Popover"/>
  <testcase name="API #variant should have correct default value" time="0" classname="Coral.Popover"/>
  <testcase name="API #header should hide header when content set to empty" time="0.017" classname="Coral.Popover"/>
  <testcase name="Markup #header should position the rendered header above content" time="0.002" classname="Coral.Popover"/>
  <testcase name="Markup #content should support creating a popover from markup without providing coral-popover-content" time="0.002" classname="Coral.Popover"/>
  <testcase name="Events should not trigger a &quot;close&quot; event when the element is injected into the dom" time="0.001" classname="Coral.Popover"/>
  <testcase name="User Interaction should close when a clicking outside of the popover" time="0.003" classname="Coral.Popover"/>
  <testcase name="User Interaction should close when target is clicked again" time="0.003" classname="Coral.Popover"/>
  <testcase name="User Interaction should close when a child element of target is clicked" time="0.003" classname="Coral.Popover"/>
  <testcase name="User Interaction should open when target is clicked" time="0.003" classname="Coral.Popover"/>
  <testcase name="User Interaction should open when enabled target button is clicked" time="0.008" classname="Coral.Popover"/>
  <testcase name="User Interaction should not open when disabled target button is clicked" time="0.006" classname="Coral.Popover"/>
  <testcase name="User Interaction should not open when child element of disabled target button is clicked" time="0.006" classname="Coral.Popover"/>
  <testcase name="User Interaction should close when target is clicked and already open" time="0.006" classname="Coral.Popover"/>
  <testcase name="User Interaction should not open when target changed and previous target is clicked" time="0.006" classname="Coral.Popover"/>
  <testcase name="User Interaction should not open on target click when interaction=&quot;off&quot;" time="0.003" classname="Coral.Popover"/>
  <testcase name="Implementation details should set .is-selected on target when opened/closed" time="0.003" classname="Coral.Popover"/>
  <testcase name="Implementation details should not blow away .is-selected on target if it already has it" time="0.001" classname="Coral.Popover"/>
  <testcase name="Implementation details should not close for clicks on elements that are subsequently removed" time="0.005" classname="Coral.Popover"/>
  <testcase name="Implementation details should focus the focusOnShow element when opened" time="0.196" classname="Coral.Popover"/>
  <testcase name="Namespace should be defined" time="0.001" classname="Coral.Progress"/>
  <testcase name="Namespace should define the sizes in an enum" time="0.001" classname="Coral.Progress"/>
  <testcase name="Instantiation should be possible to clone using markup" time="0.001" classname="Coral.Progress"/>
  <testcase name="Instantiation should be possible to clone using js" time="0.002" classname="Coral.Progress"/>
  <testcase name="API #label should have a label content zone" time="0" classname="Coral.Progress"/>
  <testcase name="API #value should be equal to 0 by default" time="0" classname="Coral.Progress"/>
  <testcase name="API #indeterminate should be false by default" time="0" classname="Coral.Progress"/>
  <testcase name="API #showPercent should be false by default" time="0" classname="Coral.Progress"/>
  <testcase name="API #size should be equal to medium by default" time="0" classname="Coral.Progress"/>
  <testcase name="API #labelPosition should be equal to right by default" time="0" classname="Coral.Progress"/>
  <testcase name="Markup #value should reflect value changes" time="0.003" classname="Coral.Progress"/>
  <testcase name="Markup #value should set minimum value when value set to null" time="0.002" classname="Coral.Progress"/>
  <testcase name="Markup #value should set maximum value when value set to greater than maximum" time="0.001" classname="Coral.Progress"/>
  <testcase name="Markup #value should set minimum value when value set to greater than minimum" time="0.001" classname="Coral.Progress"/>
  <testcase name="Markup #indeterminate should reflect indeterminate state as DOM attribute" time="0.001" classname="Coral.Progress"/>
  <testcase name="Markup #indeterminate should set value to 0 when mode is indeterminate" time="0.001" classname="Coral.Progress"/>
  <testcase name="Markup #label should move child text content into the label content zone" time="0.001" classname="Coral.Progress"/>
  <testcase name="Markup #showPercent label should be hidden when showPercent is off and label has no text content" time="0.001" classname="Coral.Progress"/>
  <testcase name="Markup #showPercent label should be visible when showPercent false and label has content" time="0.001" classname="Coral.Progress"/>
  <testcase name="Markup #showPercent should set correct classname when showpercent === false" time="0" classname="Coral.Progress"/>
  <testcase name="Markup #showPercent should set correct classname when showpercent === true" time="0.001" classname="Coral.Progress"/>
  <testcase name="Markup #size should set the correct classname when switching sizes" time="0" classname="Coral.Progress"/>
  <testcase name="Markup #size should accept lowercase size values" time="0" classname="Coral.Progress"/>
  <testcase name="Markup #labelPosition should set the correct className when switching label positions" time="0.001" classname="Coral.Progress"/>
  <testcase name="Accessibility should remove relevant ARIA attributes when mode is indeterminate" time="0.002" classname="Coral.Progress"/>
  <testcase name="Namespace should have QuickActions defined" time="0" classname="Coral.QuickActions"/>
  <testcase name="Namespace should expose the interaction in an enum" time="0" classname="Coral.QuickActions"/>
  <testcase name="Namespace should expose the placement in an enum" time="0" classname="Coral.QuickActions"/>
  <testcase name="Instantiation should be possible to clone using markup" time="0" classname="Coral.QuickActions"/>
  <testcase name="Instantiation should be possible to clone using js" time="0.006" classname="Coral.QuickActions"/>
  <testcase name="API #threshold should default to 4" time="0" classname="Coral.QuickActions"/>
  <testcase name="API #interaction should default to on" time="0" classname="Coral.QuickActions"/>
  <testcase name="API #offset should default to 10" time="0" classname="Coral.QuickActions"/>
  <testcase name="API #alignMy should default to &quot;center top&quot;" time="0" classname="Coral.QuickActions"/>
  <testcase name="API #alignAt should default to &quot;center top&quot;" time="0" classname="Coral.QuickActions"/>
  <testcase name="API #items should be possible to add/remove items via Collection API" time="0.004" classname="Coral.QuickActions"/>
  <testcase name="Markup #items should sync buttons and buttonList when items are added/removed via Collection API" time="0.029" classname="Coral.QuickActions"/>
  <testcase name="Markup #items should support anchorButtons and anchorButtonList items" time="0.026" classname="Coral.QuickActions"/>
  <testcase name="Markup #focus should move the focus inside the component" time="0.416" classname="Coral.QuickActions"/>
  <testcase name="Markup #focus should not shift focus if already inside the component" time="0.398" classname="Coral.QuickActions"/>
  <testcase name="Markup #focus should not focus the component if not shown" time="0.015" classname="Coral.QuickActions"/>
  <testcase name="Events should trigger click event when an item is selected by clicking a button" time="0.018" classname="Coral.QuickActions"/>
  <testcase name="Events should trigger click event when an item is selected by clicking a ButtonList item" time="0.012" classname="Coral.QuickActions"/>
  <testcase name="Events should not allow internal Coral.Overlay events to propagate beyond QuickActions" time="0.422" classname="Coral.QuickActions"/>
  <testcase name="User Interaction should open when mouse enters the target" time="0.016" classname="Coral.QuickActions"/>
  <testcase name="User Interaction should close when mouse leaves the target" time="0.021" classname="Coral.QuickActions"/>
  <testcase name="User Interaction should open when shift + F10 keys pressed" time="0.027" classname="Coral.QuickActions"/>
  <testcase name="User Interaction should open when ctrl + space keys pressed" time="0.019" classname="Coral.QuickActions"/>
  <testcase name="User Interaction should close on escape keypress" time="0.014" classname="Coral.QuickActions"/>
  <testcase name="User Interaction should navigate to next button for &quot;right&quot;, &quot;down&quot; and &quot;pagedown&quot; keypresses" time="0.023" classname="Coral.QuickActions"/>
  <testcase name="User Interaction should navigate to previous button for &quot;left&quot;, &quot;up&quot; and &quot;pageup&quot; keypresses" time="0.023" classname="Coral.QuickActions"/>
  <testcase name="User Interaction should navigate to last button for &quot;end&quot; keypress and first for &quot;home&quot; keypress" time="0.021" classname="Coral.QuickActions"/>
  <testcase name="User Interaction should open the overlay when clicking the more button" time="0.018" classname="Coral.QuickActions"/>
  <testcase name="User Interaction should close the overlay on escape keypress when open" time="0.02" classname="Coral.QuickActions"/>
  <testcase name="User Interaction should return focus to the target when launched via keyboard" time="0.677" classname="Coral.QuickActions"/>
  <testcase name="User Interaction should trap focus when launched via keyboard" time="0.032" classname="Coral.QuickActions"/>
  <testcase name="Implementation Details should allow HTML content in the items" time="0.019" classname="Coral.QuickActions"/>
  <testcase name="Implementation Details should trim the content" time="0.018" classname="Coral.QuickActions"/>
  <testcase name="Implementation Details should reflect an item icon change in buttons and buttonList items" time="0.011" classname="Coral.QuickActions"/>
  <testcase name="Implementation Details should reflect an Item content change in button titles and buttonList items" time="0.032" classname="Coral.QuickActions"/>
  <testcase name="Implementation Details should reflect an item type change in buttons and buttonList items" time="0.018" classname="Coral.QuickActions"/>
  <testcase name="Implementation Details should match the Coral.QuickActions width to that of their target on layout" time="0.018" classname="Coral.QuickActions"/>
  <testcase name="Implementation Details should override the inline max-width applied by extended Coral.Overlay to prevent collapse" time="0.012" classname="Coral.QuickActions"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.QuickActions.Item"/>
  <testcase name="Namespace should expose the type in an enum" time="0" classname="Coral.QuickActions.Item"/>
  <testcase name="Instantiation should be possible to clone using markup" time="0.001" classname="Coral.QuickActions.Item"/>
  <testcase name="Instantiation should be possible to clone using js" time="0.001" classname="Coral.QuickActions.Item"/>
  <testcase name="API #content should default to empty string" time="0" classname="Coral.QuickActions.Item"/>
  <testcase name="API #content should support HTML content" time="0" classname="Coral.QuickActions.Item"/>
  <testcase name="API #href should default to empty string" time="0" classname="Coral.QuickActions.Item"/>
  <testcase name="API #icon should default to empty string" time="0" classname="Coral.QuickActions.Item"/>
  <testcase name="API #icon should be reflected to the DOM" time="0" classname="Coral.QuickActions.Item"/>
  <testcase name="API #icon should convert any value to string" time="0" classname="Coral.QuickActions.Item"/>
  <testcase name="API #type should default to empty button" time="0" classname="Coral.QuickActions.Item"/>
  <testcase name="API #type should be settable" time="0" classname="Coral.QuickActions.Item"/>
  <testcase name="API #type should ignore invalid values" time="0" classname="Coral.QuickActions.Item"/>
  <testcase name="API #type should be reflected to the DOM" time="0" classname="Coral.QuickActions.Item"/>
  <testcase name="Events #coral-quickactions-item:_contentchanged should be triggered when content is changed" time="0.004" classname="Coral.QuickActions.Item"/>
  <testcase name="Events #coral-quickactions-item:_hrefchanged should be triggered when icon is changed" time="0.001" classname="Coral.QuickActions.Item"/>
  <testcase name="Events #coral-quickactions-item:_iconchanged should be triggered when icon is changed" time="0" classname="Coral.QuickActions.Item"/>
  <testcase name="Events #coral-quickactions-item:_typechanged should be triggered when type is changed" time="0" classname="Coral.QuickActions.Item"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.Radio"/>
  <testcase name="Instantiation should be possible using new" time="0.002" classname="Coral.Radio"/>
  <testcase name="Instantiation should be possible to clone the element using markup" time="0" classname="Coral.Radio"/>
  <testcase name="Instantiation should be possible to clone the element with content using markup" time="0" classname="Coral.Radio"/>
  <testcase name="Instantiation should be possible to clone using js" time="0.001" classname="Coral.Radio"/>
  <testcase name="API should have proper defaults" time="0" classname="Coral.Radio"/>
  <testcase name="API #label should be initially hidden" time="0.001" classname="Coral.Radio"/>
  <testcase name="API #label should show label when content is not empty" time="0" classname="Coral.Radio"/>
  <testcase name="API #label should hide label when content set to empty" time="0.019" classname="Coral.Radio"/>
  <testcase name="API #label should hide label when content set to empty when not in DOM" time="0.063" classname="Coral.Radio"/>
  <testcase name="API #value should reflect value changes" time="0" classname="Coral.Radio"/>
  <testcase name="API #checked should reflect checked value" time="0.001" classname="Coral.Radio"/>
  <testcase name="API #checked should reflect unchecked value" time="0" classname="Coral.Radio"/>
  <testcase name="API #checked in named sets should correctly maintain one checked member" time="0.001" classname="Coral.Radio"/>
  <testcase name="API #checked in named sets when dynamic should not change checked member if unchecked radio is added" time="0.001" classname="Coral.Radio"/>
  <testcase name="API #checked in named sets when dynamic should change checked member if checked radio is added" time="0" classname="Coral.Radio"/>
  <testcase name="API #disabled should reflect disabled value" time="0" classname="Coral.Radio"/>
  <testcase name="API #disabled should reflect enabled value" time="0" classname="Coral.Radio"/>
  <testcase name="API #disabled should handle manipulating disabled attribute" time="0" classname="Coral.Radio"/>
  <testcase name="API #rendering should render with only one input, radio, span and label element" time="0" classname="Coral.Radio"/>
  <testcase name="API #rendering should render clone with only one input, radio, span and label element" time="0.001" classname="Coral.Radio"/>
  <testcase name="Markup #checked should be set via markup" time="0.002" classname="Coral.Radio"/>
  <testcase name="Markup #checked should handle manipulating checked attribute" time="0" classname="Coral.Radio"/>
  <testcase name="Markup #checked should be set in a group via markup" time="0.001" classname="Coral.Radio"/>
  <testcase name="Markup #checked should handle manipulating checked attribute in a group" time="0.002" classname="Coral.Radio"/>
  <testcase name="Events should trigger change on click" time="0.003" classname="Coral.Radio"/>
  <testcase name="Events should not trigger change event when setting checked property" time="0" classname="Coral.Radio"/>
  <testcase name="Events should trigger change event, when clicked" time="0.002" classname="Coral.Radio"/>
  <testcase name="Events should not trigger change event if value changed" time="0" classname="Coral.Radio"/>
  <testcase name="in a form should include the internal input value when checked" time="0" classname="Coral.Radio"/>
  <testcase name="in a form should not include the internal input value when not checked" time="0" classname="Coral.Radio"/>
  <testcase name="in a form should not include the internal input value when not named" time="0" classname="Coral.Radio"/>
  <testcase name="in a form should include the new value if the value was changed" time="0" classname="Coral.Radio"/>
  <testcase name="Implementation Details should hide/show label depending on the content" time="0.005" classname="Coral.Radio"/>
  <testcase name="Implementation Details should allow replacing the content zone" time="0.031" classname="Coral.Radio"/>
  <testcase name="Implementation Details should support click()" time="0.001" classname="Coral.Radio"/>
  <testcase name="Implementation Details should be possible to change the checked radio" time="0.003" classname="Coral.Radio"/>
  <testcase name="Implementation Details #formField testFormField API #value should be provided" time="0" classname="Coral.Radio"/>
  <testcase name="Implementation Details #formField testFormField API #value should have the correct default" time="0" classname="Coral.Radio"/>
  <testcase name="Implementation Details #formField testFormField API #value should not be reflected" time="0" classname="Coral.Radio"/>
  <testcase name="Implementation Details #formField testFormField API #name should have empty string as default" time="0.001" classname="Coral.Radio"/>
  <testcase name="Implementation Details #formField testFormField API #name should transform everything to a string" time="0.001" classname="Coral.Radio"/>
  <testcase name="Implementation Details #formField testFormField API #name should be set synchronously" time="0" classname="Coral.Radio"/>
  <testcase name="Implementation Details #formField testFormField API #name should not submit a value when the name is not specified even though there is a value" time="0.001" classname="Coral.Radio"/>
  <testcase name="Implementation Details #formField testFormField API #name should submit the one single value" time="0.001" classname="Coral.Radio"/>
  <testcase name="Implementation Details #formField testFormField API #required should default to false" time="0" classname="Coral.Radio"/>
  <testcase name="Implementation Details #formField testFormField API #invalid should default to false" time="0" classname="Coral.Radio"/>
  <testcase name="Implementation Details #formField testFormField API #invalid should be settable programmatically" time="0" classname="Coral.Radio"/>
  <testcase name="Implementation Details #formField testFormField API #disabled should default to false" time="0" classname="Coral.Radio"/>
  <testcase name="Implementation Details #formField testFormField API #disabled should behave like a boolean value" time="0" classname="Coral.Radio"/>
  <testcase name="Implementation Details #formField testFormField API #readOnly should default to false" time="0" classname="Coral.Radio"/>
  <testcase name="Implementation Details #formField testFormField API #labelledBy should remove labels with empty string" time="0.001" classname="Coral.Radio"/>
  <testcase name="Implementation Details #formField testFormField API #labelledBy should support multiple labels" time="0" classname="Coral.Radio"/>
  <testcase name="Implementation Details #formField testFormField API #clear() should set the valueProperty to the default when called" time="0.001" classname="Coral.Radio"/>
  <testcase name="Implementation Details #formField testFormField API #reset() should reset to the initial value when called" time="0.001" classname="Coral.Radio"/>
  <testcase name="Implementation Details #formField testFormField API #reset() should be called when form is reset programmatically" time="0.004" classname="Coral.Radio"/>
  <testcase name="Implementation Details #formField testFormField API #reset() should be called when form is reset via reset input" time="0.005" classname="Coral.Radio"/>
  <testcase name="Implementation Details #formField testFormField Markup #disabled should behave like a boolean value" time="0.001" classname="Coral.Radio"/>
  <testcase name="Implementation Details #formField testFormField Markup #labelledby should label component using attribute" time="0" classname="Coral.Radio"/>
  <testcase name="Implementation Details #formField testFormField Events #change should not be trigged when setting the value programmatically" time="0" classname="Coral.Radio"/>
  <testcase name="Implementation Details #formField testFormField Events #change should trigger a change event when we interact with the internal input" time="0" classname="Coral.Radio"/>
  <testcase name="Coral.Search should submit the one single value" time="0.003" classname="Coral.Search"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.Search"/>
  <testcase name="Instantiation should be possible using new" time="0.002" classname="Coral.Search"/>
  <testcase name="Instantiation should be possible using createElement" time="0.001" classname="Coral.Search"/>
  <testcase name="Instantiation should be possible using markup" time="0.002" classname="Coral.Search"/>
  <testcase name="Instantiation should be possible to clone the element using markup" time="0.001" classname="Coral.Search"/>
  <testcase name="Instantiation should be possible to clone using js" time="0.001" classname="Coral.Search"/>
  <testcase name="API #icon should default to &quot;search&quot;" time="0" classname="Coral.Search"/>
  <testcase name="API #icon should set icon" time="0" classname="Coral.Search"/>
  <testcase name="API #icon should hide icon when not set" time="0" classname="Coral.Search"/>
  <testcase name="API #variant should default to &quot;default" time="0" classname="Coral.Search"/>
  <testcase name="API #variant should set the variant" time="0" classname="Coral.Search"/>
  <testcase name="API #variant should match the internal variant values" time="0" classname="Coral.Search"/>
  <testcase name="API #maxlength should return maxlength from the input" time="0" classname="Coral.Search"/>
  <testcase name="API #maxlength should set field maxlength to 10" time="0" classname="Coral.Search"/>
  <testcase name="clearInput should clear text value" time="0.002" classname="Coral.Search"/>
  <testcase name="API #_getFirstSelectable() should return the first valid item for selection" time="0.031" classname="Coral.Select.Collection"/>
  <testcase name="API #_getFirstSelectable() should include disabled and hidden items" time="0.027" classname="Coral.Select.Collection"/>
  <testcase name="API #_getFirstSelected() should return the first selected item" time="0.033" classname="Coral.Select.Collection"/>
  <testcase name="API #_getFirstSelected() should include disabled and hidden items" time="0.021" classname="Coral.Select.Collection"/>
  <testcase name="API #_getLastSelected() should return the last selected item" time="0.019" classname="Coral.Select.Collection"/>
  <testcase name="API #_getLastSelected() should ignore disabled and hidden items" time="0.031" classname="Coral.Select.Collection"/>
  <testcase name="API #_getAllSelected() should all the selected items" time="0.031" classname="Coral.Select.Collection"/>
  <testcase name="API #_getAllSelected() should include disabled and hidden items" time="0.03" classname="Coral.Select.Collection"/>
  <testcase name="API #_deselectAllExceptLast() should all the deselect all items except the last one" time="0.028" classname="Coral.Select.Collection"/>
  <testcase name="API #_deselectAllExceptLast() should include disabled and hidden items" time="0.024" classname="Coral.Select.Collection"/>
  <testcase name="API #_deselectAllExcept() should all the deselect all items" time="0.027" classname="Coral.Select.Collection"/>
  <testcase name="API #_deselectAllExcept() should ignore disabled and hidden items" time="0.024" classname="Coral.Select.Collection"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.Select.Item"/>
  <testcase name="API #content should default to empty string" time="0" classname="Coral.Select.Item"/>
  <testcase name="API #content should support HTML content" time="0" classname="Coral.Select.Item"/>
  <testcase name="API #value should default empty string" time="0" classname="Coral.Select.Item"/>
  <testcase name="API #value should default to the content" time="0" classname="Coral.Select.Item"/>
  <testcase name="API #value should keep maximum 1 space from the content" time="0" classname="Coral.Select.Item"/>
  <testcase name="API #value should remove the html from the value" time="0" classname="Coral.Select.Item"/>
  <testcase name="API #value should convert the value to string" time="0" classname="Coral.Select.Item"/>
  <testcase name="API #value should reflect the value" time="0" classname="Coral.Select.Item"/>
  <testcase name="API #selected should be not be selected by default" time="0" classname="Coral.Select.Item"/>
  <testcase name="API #selected should be settable" time="0.001" classname="Coral.Select.Item"/>
  <testcase name="API #selected should accept truthy" time="0.001" classname="Coral.Select.Item"/>
  <testcase name="API #disabled should be not be disabled by default" time="0" classname="Coral.Select.Item"/>
  <testcase name="API #disabled should be settable" time="0" classname="Coral.Select.Item"/>
  <testcase name="API #disabled should accept truthy" time="0" classname="Coral.Select.Item"/>
  <testcase name="Markup #content should have content set to innerHTML if property not provided" time="0" classname="Coral.Select.Item"/>
  <testcase name="Markup #content should support HTML content" time="0.001" classname="Coral.Select.Item"/>
  <testcase name="Markup #value should set the value from markup" time="0" classname="Coral.Select.Item"/>
  <testcase name="Markup #value should default to the content" time="0" classname="Coral.Select.Item"/>
  <testcase name="Markup #value should fall back to content if attribute is removed" time="0" classname="Coral.Select.Item">
    <skipped/>
  </testcase>
  <testcase name="Markup #selected should not be selected by default" time="0" classname="Coral.Select.Item"/>
  <testcase name="Markup #disabled should not be disabled by default" time="0" classname="Coral.Select.Item"/>
  <testcase name="Events #coral-select-item:_valuechanged should be triggered when the value changes" time="0" classname="Coral.Select.Item"/>
  <testcase name="Events #coral-select-item:_contentchanged should be triggered when the content changes" time="0.002" classname="Coral.Select.Item"/>
  <testcase name="Events #coral-select-item:_contentchanged should be triggered when item is appended" time="0.015" classname="Coral.Select.Item"/>
  <testcase name="Events #coral-select-item:_disabledchanged should be triggered when the value changes" time="0.001" classname="Coral.Select.Item"/>
  <testcase name="Events #coral-select-item:_selectedchanged should be triggered when the value changes" time="0" classname="Coral.Select.Item"/>
  <testcase name="Implementation Details should always be hidden" time="0.001" classname="Coral.Select.Item"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.Select"/>
  <testcase name="Namespace should define the variants in an enum" time="0" classname="Coral.Select"/>
  <testcase name="Instantiation should be possible using new" time="0.009" classname="Coral.Select"/>
  <testcase name="Instantiation should be possible using createElement" time="0.005" classname="Coral.Select"/>
  <testcase name="Instantiation should be possible using markup" time="0.007" classname="Coral.Select"/>
  <testcase name="Instantiation should be possible to clone using markup" time="0.01" classname="Coral.Select"/>
  <testcase name="Instantiation should be possible to clone using markup with framework data" time="0.007" classname="Coral.Select"/>
  <testcase name="Instantiation should be possible to clone using js" time="0.01" classname="Coral.Select"/>
  <testcase name="API #placeholder should default to empty string" time="0.001" classname="Coral.Select"/>
  <testcase name="API #placeholder should correctly change to selected item after changing from multiple to single" time="0.014" classname="Coral.Select"/>
  <testcase name="API #placeholder should default to empty string if empty" time="0.016" classname="Coral.Select"/>
  <testcase name="API #placeholder should default to first selectable" time="0" classname="Coral.Select"/>
  <testcase name="API #placeholder should correctly switch the first selectable" time="0.004" classname="Coral.Select"/>
  <testcase name="API #placeholder should show &quot;Select&quot; if no placeholder, multiple and nothing selected" time="0.005" classname="Coral.Select"/>
  <testcase name="API #placeholder should switch to default placeholder when switched from single to multiple" time="0.003" classname="Coral.Select"/>
  <testcase name="API #placeholder should say &quot;Select&quot; in the label if multiple=true and there is selection" time="0.006" classname="Coral.Select"/>
  <testcase name="API #placeholder should correctly change to selected item after changing from single to multiple without placeholder" time="0.005" classname="Coral.Select"/>
  <testcase name="API #placeholder should be &quot;Select&quot; if multiple and has a selectedItem" time="0.001" classname="Coral.Select"/>
  <testcase name="API #placeholder should be &quot;Select&quot; if not multiple and no selectedItem" time="0" classname="Coral.Select"/>
  <testcase name="API #placeholder should show the placeholder with multiple and selectedItem(s)" time="0.014" classname="Coral.Select"/>
  <testcase name="API #placeholder should show the placeholder with multiple and no selectedItem(s)" time="0.004" classname="Coral.Select"/>
  <testcase name="API #placeholder should go back to the placeholder once the selected is removed" time="0.004" classname="Coral.Select"/>
  <testcase name="API #placeholder should go back to the placeholder once the selected is removed" time="0.012" classname="Coral.Select"/>
  <testcase name="API #placeholder should default to the placeholder when multiple=false and no selection" time="0" classname="Coral.Select"/>
  <testcase name="API #placeholder should default to placeholder when no items" time="0.019" classname="Coral.Select"/>
  <testcase name="API #selectedItem should default to null when a placeholder is added" time="0" classname="Coral.Select"/>
  <testcase name="API #selectedItem should not be settable" time="0.001" classname="Coral.Select"/>
  <testcase name="API #selectedItem should default to the first item when the placeholder is removed" time="0.001" classname="Coral.Select"/>
  <testcase name="API #selectedItem should update to the selected value" time="0.002" classname="Coral.Select"/>
  <testcase name="API #selectedItem should be null if the selected is removed" time="0.018" classname="Coral.Select"/>
  <testcase name="API #selectedItems should default to empty array" time="0" classname="Coral.Select"/>
  <testcase name="API #selectedItems should not be settable" time="0.001" classname="Coral.Select"/>
  <testcase name="API #selectedItems should return all the selected items when multiple" time="0.012" classname="Coral.Select"/>
  <testcase name="API #selectedItems should return an array when a single item when single" time="0.003" classname="Coral.Select"/>
  <testcase name="API #multiple should default to false" time="0" classname="Coral.Select"/>
  <testcase name="API #multiple should not allow multiple selection when false" time="0.002" classname="Coral.Select"/>
  <testcase name="API #multiple should allow multiple selection when true" time="0.009" classname="Coral.Select"/>
  <testcase name="API #multiple should transform single selected items to multiple correctly" time="0.004" classname="Coral.Select"/>
  <testcase name="API #multiple should not have tags and multiple selected options when multiple is switched to single" time="0.012" classname="Coral.Select"/>
  <testcase name="API #multiple should have tags when switched from single to multiple" time="0.005" classname="Coral.Select"/>
  <testcase name="API #multiple should allow inserting new items" time="0.013" classname="Coral.Select"/>
  <testcase name="API #value should default to empty string, if select is empty" time="0.018" classname="Coral.Select"/>
  <testcase name="API #value should default to empty string when there is a placeholder" time="0" classname="Coral.Select"/>
  <testcase name="API #value should default to the first item when there is no placeholder" time="0" classname="Coral.Select"/>
  <testcase name="API #value should allow to set the value" time="0.001" classname="Coral.Select"/>
  <testcase name="API #value should allow to set the value even if the select is not attached to dom so far" time="0.003" classname="Coral.Select"/>
  <testcase name="API #value should be updated if we select a value" time="0.001" classname="Coral.Select"/>
  <testcase name="API #value should accept empty string" time="0.002" classname="Coral.Select"/>
  <testcase name="API #value should ignore invalid values" time="0" classname="Coral.Select"/>
  <testcase name="API #value should deselect the other items" time="0.002" classname="Coral.Select"/>
  <testcase name="API #value should selected the first item with the matching value" time="0.001" classname="Coral.Select"/>
  <testcase name="API #value should default to empty string when multiple" time="0.003" classname="Coral.Select"/>
  <testcase name="API #value should deselect all other items when multiple" time="0.008" classname="Coral.Select"/>
  <testcase name="API #value should default to empty string on invalid value" time="0.002" classname="Coral.Select"/>
  <testcase name="API #value should put back the placeholder if value is set to empty string" time="0" classname="Coral.Select"/>
  <testcase name="API #value should be empty if placeholder is set and no item is selected" time="0.011" classname="Coral.Select"/>
  <testcase name="API #values should default to [] when there is a placeholder and multiple=false" time="0.001" classname="Coral.Select"/>
  <testcase name="API #values should ignore null" time="0.001" classname="Coral.Select"/>
  <testcase name="API #values should get an array with the first item when there is no placeholder and multiple=false" time="0.001" classname="Coral.Select"/>
  <testcase name="API #values should get an empty array by default when multiple=true" time="0.001" classname="Coral.Select"/>
  <testcase name="API #values should only set the first value when multiple=false" time="0.001" classname="Coral.Select"/>
  <testcase name="API #values should be possible to set multiple values if multiple=true" time="0.007" classname="Coral.Select"/>
  <testcase name="API #values should deselect all values with empty array and multiple=true" time="0.007" classname="Coral.Select"/>
  <testcase name="API #values should return [&quot;&quot;] when an item has empty string as its value" time="0.003" classname="Coral.Select"/>
  <testcase name="API #values should allow selecting items with value as empty string" time="0.001" classname="Coral.Select"/>
  <testcase name="API #variant should be initially Coral.Select.variant.DEFAULT" time="0.001" classname="Coral.Select"/>
  <testcase name="API #variant should set the new variant" time="0.001" classname="Coral.Select"/>
  <testcase name="API #variant should not add class for invalid variant" time="0.001" classname="Coral.Select"/>
  <testcase name="API #name should have empty string as default" time="0" classname="Coral.Select"/>
  <testcase name="API #name should submit nothing when name is not specified even though an item is selected" time="0.008" classname="Coral.Select"/>
  <testcase name="API #name should set the name to the native select" time="0.001" classname="Coral.Select"/>
  <testcase name="API #name should submit the one single value" time="0.013" classname="Coral.Select"/>
  <testcase name="API #name should set the input value to the added selected item value" time="0.006" classname="Coral.Select"/>
  <testcase name="API #name should submit multiple values when multiple" time="0.018" classname="Coral.Select"/>
  <testcase name="API #items should not be settable" time="0" classname="Coral.Select"/>
  <testcase name="API #items #add() should allow to add a selected item using object notation" time="0.002" classname="Coral.Select"/>
  <testcase name="API #clear() should default value &quot;&quot; when placeholder is available" time="0.001" classname="Coral.Select"/>
  <testcase name="API #clear() should default to the first item when placeholder is not available" time="0.002" classname="Coral.Select"/>
  <testcase name="API #clear() should produce value &quot;&quot; when multiple" time="0.01" classname="Coral.Select"/>
  <testcase name="API #focus() should focus the button" time="0.001" classname="Coral.Select"/>
  <testcase name="API #focus() should not shift focus if already inside the component " time="0.023" classname="Coral.Select"/>
  <testcase name="API #focus() should not focus the button if it is disabled" time="0.002" classname="Coral.Select"/>
  <testcase name="Markup #variant should not add class for empty variant" time="0.01" classname="Coral.Select"/>
  <testcase name="Markup #variant should not add class for invalid variant" time="0.011" classname="Coral.Select"/>
  <testcase name="Markup #variant should remove variant classnames when variant changes" time="0.009" classname="Coral.Select"/>
  <testcase name="Markup #selectedItem should allow selecting items in the DOM" time="0.009" classname="Coral.Select"/>
  <testcase name="Markup #selectedItem should allow removing the selected item" time="0.009" classname="Coral.Select"/>
  <testcase name="Markup #selectedItems should allow selecting items in the DOM" time="0.014" classname="Coral.Select"/>
  <testcase name="Markup #selectedItems should allow removing the selected item" time="0.027" classname="Coral.Select"/>
  <testcase name="Markup #multiple should default to false" time="0.014" classname="Coral.Select"/>
  <testcase name="Markup #multiple should remove the attribute" time="0.014" classname="Coral.Select"/>
  <testcase name="Markup #multiple should allow multiple selection when true" time="0.019" classname="Coral.Select"/>
  <testcase name="Markup #placeholder should show placeholder when there is no selection" time="0.009" classname="Coral.Select"/>
  <testcase name="Markup #placeholder should update the label to the selected item when there is selection" time="0.005" classname="Coral.Select"/>
  <testcase name="Markup #placeholder should show the placeholder when there is no selection and multiple=true" time="0.006" classname="Coral.Select"/>
  <testcase name="Markup #placeholder should show the placeholder when there is selection and multiple=true" time="0.009" classname="Coral.Select"/>
  <testcase name="Markup #placeholder should say &quot;Select&quot; in the label if multiple and has a selected item" time="0.012" classname="Coral.Select"/>
  <testcase name="Markup #value should be possible to set the value using markup (in single mode)" time="0.006" classname="Coral.Select"/>
  <testcase name="Markup #value should be possible to set the value using markup (in multi mode)" time="0.049" classname="Coral.Select"/>
  <testcase name="Markup #value should default to value of first item, if no items are selected" time="0.006" classname="Coral.Select"/>
  <testcase name="Markup #value should return the value of the selected item" time="0.01" classname="Coral.Select"/>
  <testcase name="Markup #value should default to empty string when multiple" time="0.009" classname="Coral.Select"/>
  <testcase name="Markup #values should ignore the values attribute" time="0.009" classname="Coral.Select"/>
  <testcase name="Markup #values should be possible to get values set in markup" time="0.015" classname="Coral.Select"/>
  <testcase name="Markup #reset() should reset the select if reset() is called" time="0.025" classname="Coral.Select"/>
  <testcase name="Markup #reset() should allow removing an initial value" time="0.03" classname="Coral.Select"/>
  <testcase name="Events #change should not trigger change while setting values programatically" time="0.012" classname="Coral.Select"/>
  <testcase name="Events #change should not trigger change setting the value" time="0.012" classname="Coral.Select"/>
  <testcase name="Events #change should trigger change if the user interacts with the selectlist" time="0.047" classname="Coral.Select"/>
  <testcase name="Events #change should not trigger change if the user selects the same item" time="0.069" classname="Coral.Select"/>
  <testcase name="Events #change should not trigger new change while we are updating items in the change callback" time="0.047" classname="Coral.Select"/>
  <testcase name="Events #change should trigger a change event when a tag is removed" time="0.031" classname="Coral.Select"/>
  <testcase name="Events #change should trigger change if the user interacts with the native select" time="0.011" classname="Coral.Select"/>
  <testcase name="Events #change should trigger change if the user interacts with the native select and multiple=true" time="0.018" classname="Coral.Select"/>
  <testcase name="User Interaction should remove selected items using the taglist when multiple=true" time="0.021" classname="Coral.Select"/>
  <testcase name="User Interaction should focus the button when an item is selected" time="0.054" classname="Coral.Select"/>
  <testcase name="User Interaction should focus the button when the selected item is clicked again" time="0.05" classname="Coral.Select"/>
  <testcase name="User Interaction should focus the button when it is toggled" time="0.046" classname="Coral.Select"/>
  <testcase name="User Interaction should focus the button when the overlay is open and the user clicks outside" time="0.042" classname="Coral.Select"/>
  <testcase name="User Interaction should focus the button when an item is selected and multiple=true" time="0.049" classname="Coral.Select"/>
  <testcase name="User Interaction should focus the taglist when the last tag is removed" time="0.044" classname="Coral.Select"/>
  <testcase name="User Interaction should focus the button when user interacts with the native select" time="0.018" classname="Coral.Select"/>
  <testcase name="User Interaction should close the overlay using esc key" time="0.055" classname="Coral.Select"/>
  <testcase name="User Interaction Removing the selected item should not cause an error with single selection" time="0.037" classname="Coral.Select"/>
  <testcase name="User Interaction Removing the selected item should not cause an error with multiple selection" time="0.032" classname="Coral.Select"/>
  <testcase name="User Interaction Placeholder should be updated when an item is clicked" time="0.042" classname="Coral.Select"/>
  <testcase name="User Interaction Placeholder should allow removing the selected item" time="0.028" classname="Coral.Select"/>
  <testcase name="User Interaction Placeholder should update the placeholder when the content of the selectedItem changes" time="0.013" classname="Coral.Select"/>
  <testcase name="Implementation Details should set value of the internal items" time="0" classname="Coral.Select"/>
  <testcase name="Implementation Details should change value of the internal items" time="0" classname="Coral.Select"/>
  <testcase name="Implementation Details should change value of the internal items and multiple=true" time="0.008" classname="Coral.Select"/>
  <testcase name="Implementation Details should change content of the internal items" time="0.007" classname="Coral.Select"/>
  <testcase name="Implementation Details should change content of the internal items and multiple=true" time="0.011" classname="Coral.Select"/>
  <testcase name="Implementation Details should change disabled of the internal items" time="0.001" classname="Coral.Select"/>
  <testcase name="Implementation Details arrayDiff should calculate the different between 2 arrays" time="0.001" classname="Coral.Select"/>
  <testcase name="Implementation Details (compliance) #formField (single select) testFormField API #value should be provided" time="0" classname="Coral.Select"/>
  <testcase name="Implementation Details (compliance) #formField (single select) testFormField API #value should have the correct default" time="0.001" classname="Coral.Select"/>
  <testcase name="Implementation Details (compliance) #formField (single select) testFormField API #value should not be reflected" time="0.001" classname="Coral.Select"/>
  <testcase name="Implementation Details (compliance) #formField (single select) testFormField API #name should have empty string as default" time="0.001" classname="Coral.Select"/>
  <testcase name="Implementation Details (compliance) #formField (single select) testFormField API #name should transform everything to a string" time="0" classname="Coral.Select"/>
  <testcase name="Implementation Details (compliance) #formField (single select) testFormField API #name should be set synchronously" time="0" classname="Coral.Select"/>
  <testcase name="Implementation Details (compliance) #formField (single select) testFormField API #name should not submit a value when the name is not specified even though there is a value" time="0.006" classname="Coral.Select"/>
  <testcase name="Implementation Details (compliance) #formField (single select) testFormField API #name should submit the one single value" time="0.005" classname="Coral.Select"/>
  <testcase name="Implementation Details (compliance) #formField (single select) testFormField API #required should default to false" time="0" classname="Coral.Select"/>
  <testcase name="Implementation Details (compliance) #formField (single select) testFormField API #invalid should default to false" time="0" classname="Coral.Select"/>
  <testcase name="Implementation Details (compliance) #formField (single select) testFormField API #invalid should be settable programmatically" time="0" classname="Coral.Select"/>
  <testcase name="Implementation Details (compliance) #formField (single select) testFormField API #disabled should default to false" time="0" classname="Coral.Select"/>
  <testcase name="Implementation Details (compliance) #formField (single select) testFormField API #disabled should behave like a boolean value" time="0.001" classname="Coral.Select"/>
  <testcase name="Implementation Details (compliance) #formField (single select) testFormField API #readOnly should default to false" time="0" classname="Coral.Select"/>
  <testcase name="Implementation Details (compliance) #formField (single select) testFormField API #labelledBy should remove labels with empty string" time="0.001" classname="Coral.Select"/>
  <testcase name="Implementation Details (compliance) #formField (single select) testFormField API #labelledBy should support multiple labels" time="0.001" classname="Coral.Select"/>
  <testcase name="Implementation Details (compliance) #formField (single select) testFormField API #clear() should set the valueProperty to the default when called" time="0.002" classname="Coral.Select"/>
  <testcase name="Implementation Details (compliance) #formField (single select) testFormField API #reset() should reset to the initial value when called" time="0.003" classname="Coral.Select"/>
  <testcase name="Implementation Details (compliance) #formField (single select) testFormField API #reset() should be called when form is reset programmatically" time="0.01" classname="Coral.Select"/>
  <testcase name="Implementation Details (compliance) #formField (single select) testFormField API #reset() should be called when form is reset via reset input" time="0.014" classname="Coral.Select"/>
  <testcase name="Implementation Details (compliance) #formField (single select) testFormField Markup #disabled should behave like a boolean value" time="0.002" classname="Coral.Select"/>
  <testcase name="Implementation Details (compliance) #formField (single select) testFormField Markup #labelledby should label component using attribute" time="0.001" classname="Coral.Select"/>
  <testcase name="Implementation Details (compliance) #formField (single select) testFormField Events #change should not be trigged when setting the value programmatically" time="0.002" classname="Coral.Select"/>
  <testcase name="Implementation Details (compliance) #formField (single select) testFormField Events #change should trigger a change event when we interact with the internal input" time="0" classname="Coral.Select"/>
  <testcase name="Implementation Details (compliance) #formField (multi select) testFormField API #value should be provided" time="0" classname="Coral.Select"/>
  <testcase name="Implementation Details (compliance) #formField (multi select) testFormField API #value should have the correct default" time="0" classname="Coral.Select"/>
  <testcase name="Implementation Details (compliance) #formField (multi select) testFormField API #value should not be reflected" time="0.002" classname="Coral.Select"/>
  <testcase name="Implementation Details (compliance) #formField (multi select) testFormField API #name should have empty string as default" time="0.001" classname="Coral.Select"/>
  <testcase name="Implementation Details (compliance) #formField (multi select) testFormField API #name should transform everything to a string" time="0.001" classname="Coral.Select"/>
  <testcase name="Implementation Details (compliance) #formField (multi select) testFormField API #name should be set synchronously" time="0.001" classname="Coral.Select"/>
  <testcase name="Implementation Details (compliance) #formField (multi select) testFormField API #name should not submit a value when the name is not specified even though there is a value" time="0.01" classname="Coral.Select"/>
  <testcase name="Implementation Details (compliance) #formField (multi select) testFormField API #name should submit the one single value" time="0.009" classname="Coral.Select"/>
  <testcase name="Implementation Details (compliance) #formField (multi select) testFormField API #required should default to false" time="0" classname="Coral.Select"/>
  <testcase name="Implementation Details (compliance) #formField (multi select) testFormField API #invalid should default to false" time="0" classname="Coral.Select"/>
  <testcase name="Implementation Details (compliance) #formField (multi select) testFormField API #invalid should be settable programmatically" time="0.001" classname="Coral.Select"/>
  <testcase name="Implementation Details (compliance) #formField (multi select) testFormField API #disabled should default to false" time="0.001" classname="Coral.Select"/>
  <testcase name="Implementation Details (compliance) #formField (multi select) testFormField API #disabled should behave like a boolean value" time="0" classname="Coral.Select"/>
  <testcase name="Implementation Details (compliance) #formField (multi select) testFormField API #readOnly should default to false" time="0" classname="Coral.Select"/>
  <testcase name="Implementation Details (compliance) #formField (multi select) testFormField API #labelledBy should remove labels with empty string" time="0" classname="Coral.Select"/>
  <testcase name="Implementation Details (compliance) #formField (multi select) testFormField API #labelledBy should support multiple labels" time="0.001" classname="Coral.Select"/>
  <testcase name="Implementation Details (compliance) #formField (multi select) testFormField API #clear() should set the valueProperty to the default when called" time="0.006" classname="Coral.Select"/>
  <testcase name="Implementation Details (compliance) #formField (multi select) testFormField API #reset() should reset to the initial value when called" time="0.004" classname="Coral.Select"/>
  <testcase name="Implementation Details (compliance) #formField (multi select) testFormField API #reset() should be called when form is reset programmatically" time="0.016" classname="Coral.Select"/>
  <testcase name="Implementation Details (compliance) #formField (multi select) testFormField API #reset() should be called when form is reset via reset input" time="0.018" classname="Coral.Select"/>
  <testcase name="Implementation Details (compliance) #formField (multi select) testFormField Markup #disabled should behave like a boolean value" time="0.001" classname="Coral.Select"/>
  <testcase name="Implementation Details (compliance) #formField (multi select) testFormField Markup #labelledby should label component using attribute" time="0.001" classname="Coral.Select"/>
  <testcase name="Implementation Details (compliance) #formField (multi select) testFormField Events #change should not be trigged when setting the value programmatically" time="0.003" classname="Coral.Select"/>
  <testcase name="Implementation Details (compliance) #formField (multi select) testFormField Events #change should trigger a change event when we interact with the internal input" time="0.001" classname="Coral.Select"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.SelectList"/>
  <testcase name="Instantiation should be possible using new" time="0.001" classname="Coral.SelectList"/>
  <testcase name="Instantiation should be possible using createElement" time="0.001" classname="Coral.SelectList"/>
  <testcase name="Instantiation should be possible using markup" time="0.001" classname="Coral.SelectList"/>
  <testcase name="Instantiation should be possible to clone using markup" time="0.001" classname="Coral.SelectList"/>
  <testcase name="Instantiation should be possible to clone using markup with groups" time="0.001" classname="Coral.SelectList"/>
  <testcase name="Instantiation should be possible to clone using js" time="0.001" classname="Coral.SelectList"/>
  <testcase name="API #selectedItems should default to empty array" time="0" classname="Coral.SelectList"/>
  <testcase name="API #selectedItem should default to null" time="0" classname="Coral.SelectList"/>
  <testcase name="API #multiple should default to false" time="0" classname="Coral.SelectList"/>
  <testcase name="API #loading should default to false" time="0" classname="Coral.SelectList"/>
  <testcase name="Markup #multiple should allow to select all items if [multiple=true]" time="0.003" classname="Coral.SelectList"/>
  <testcase name="Markup #multiple should only allow to select 1 item if [multiple=false]" time="0.003" classname="Coral.SelectList"/>
  <testcase name="Markup #selectedItem should default to null" time="0.001" classname="Coral.SelectList"/>
  <testcase name="Markup #selectedItem should take the last selected if not multiple" time="0.001" classname="Coral.SelectList"/>
  <testcase name="Markup #selectedItem should take the first selected with multiple" time="0.001" classname="Coral.SelectList"/>
  <testcase name="Markup #selectedItem should read the selected from the markup" time="0.001" classname="Coral.SelectList"/>
  <testcase name="Markup #selectedItems should return all selected items" time="0.002" classname="Coral.SelectList"/>
  <testcase name="Markup #loading should show a loading indicator when set to true" time="0.008" classname="Coral.SelectList"/>
  <testcase name="Markup #loading should hide a loading indicator when set to false" time="0.004" classname="Coral.SelectList"/>
  <testcase name="Markup #loading should always add the loading at the end" time="0.005" classname="Coral.SelectList"/>
  <testcase name="Markup #groups retrieves all groups" time="0" classname="Coral.SelectList"/>
  <testcase name="Markup #groups adds a group instance" time="0.001" classname="Coral.SelectList"/>
  <testcase name="Markup #groups adds a group using a config object" time="0.001" classname="Coral.SelectList"/>
  <testcase name="Markup #groups removes a group" time="0" classname="Coral.SelectList"/>
  <testcase name="Markup #groups clears all groups" time="0" classname="Coral.SelectList"/>
  <testcase name="Markup #focus() should focus the first item when no selection is available" time="0.005" classname="Coral.SelectList"/>
  <testcase name="Markup #focus() should not shift focus if already inside the component" time="0.003" classname="Coral.SelectList"/>
  <testcase name="Markup #focus() should should move the focus to the selected item" time="0.002" classname="Coral.SelectList"/>
  <testcase name="Events #coral-selectlist:beforechange should be able to prevent a user selection" time="0.004" classname="Coral.SelectList"/>
  <testcase name="Events #coral-selectlist:change should trigger on selection change" time="0.002" classname="Coral.SelectList"/>
  <testcase name="Events #coral-selectlist:change should return an array for selection and oldSelection if multiple=true" time="0.001" classname="Coral.SelectList"/>
  <testcase name="Events #coral-selectlist:change should trigger on multiple change" time="0.002" classname="Coral.SelectList"/>
  <testcase name="Events #coral-selectlist:scrollbottom should trigger a scrollbottom event when user scrolls to the bottom of the list" time="0.017" classname="Coral.SelectList"/>
  <testcase name="User Interaction should focus the item which contains text starting with the letter O" time="0.79" classname="Coral.SelectList"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.SelectList.Item"/>
  <testcase name="Instantiation should be possible using new" time="0" classname="Coral.SelectList.Item"/>
  <testcase name="Instantiation should be possible using createElement" time="0" classname="Coral.SelectList.Item"/>
  <testcase name="Instantiation should be possible using markup" time="0.001" classname="Coral.SelectList.Item"/>
  <testcase name="API #selected should default to false" time="0" classname="Coral.SelectList.Item"/>
  <testcase name="API #disabled should default to false" time="0" classname="Coral.SelectList.Item"/>
  <testcase name="API #content should not be null" time="0.001" classname="Coral.SelectList.Item"/>
  <testcase name="API #value should return textContent if not explictly set" time="0" classname="Coral.SelectList.Item"/>
  <testcase name="API #value should reflect an explicitly set string value" time="0" classname="Coral.SelectList.Item"/>
  <testcase name="API #content should reference the item" time="0" classname="Coral.SelectList.Item"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.SelectList.Group"/>
  <testcase name="Instantiation should be possible using new" time="0" classname="Coral.SelectList.Group"/>
  <testcase name="Instantiation should be possible using createElement" time="0" classname="Coral.SelectList.Group"/>
  <testcase name="Instantiation should be possible using markup" time="0" classname="Coral.SelectList.Group"/>
  <testcase name="API #label should default to empty string" time="0" classname="Coral.SelectList.Group"/>
  <testcase name="API #label should reflect an explicitly set string value" time="0" classname="Coral.SelectList.Group"/>
  <testcase name="API #items retrieves all items" time="0" classname="Coral.SelectList.Group"/>
  <testcase name="API #items adds an item instance" time="0.001" classname="Coral.SelectList.Group"/>
  <testcase name="API #items adds an item using a config object" time="0.001" classname="Coral.SelectList.Group"/>
  <testcase name="API #items removes an item" time="0" classname="Coral.SelectList.Group"/>
  <testcase name="API #items clears all items" time="0" classname="Coral.SelectList.Group"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.Shell"/>
  <testcase name="Instantiation should be possible to clone using markup" time="0" classname="Coral.Shell"/>
  <testcase name="Instantiation should be possible to clone using js" time="0.001" classname="Coral.Shell"/>
  <testcase name="API #content should be defined" time="0" classname="Coral.Shell"/>
  <testcase name="API #content should be a content zone" time="0" classname="Coral.Shell"/>
  <testcase name="Markup #content should created if not provided" time="0" classname="Coral.Shell"/>
  <testcase name="Markup #content should keep an existing content if provided" time="0" classname="Coral.Shell"/>
  <testcase name="Namespace should be defined in the Coral.Shell namespace" time="0" classname="Coral.Shell.Header"/>
  <testcase name="Instantiation should be possible to clone using markup" time="0" classname="Coral.Shell.Header"/>
  <testcase name="Instantiation should be possible to clone using js" time="0.001" classname="Coral.Shell.Header"/>
  <testcase name="Namespace should be defined in the Coral.Shell namespace" time="0" classname="Coral.Shell.HomeAnchor"/>
  <testcase name="Instantiation should be possible to clone using markup" time="0" classname="Coral.Shell.HomeAnchor"/>
  <testcase name="Instantiation should be possible to clone using js" time="0" classname="Coral.Shell.HomeAnchor"/>
  <testcase name="Namespace should be defined in the Coral.Shell namespace" time="0.001" classname="Coral.Shell.Help"/>
  <testcase name="Instantiation should support creation from markup" time="0.005" classname="Coral.Shell.Help"/>
  <testcase name="Instantiation should support creation from js" time="0.002" classname="Coral.Shell.Help"/>
  <testcase name="Instantiation should create a help component with predefined items" time="0.006" classname="Coral.Shell.Help"/>
  <testcase name="Instantiation should be possible to clone using markup" time="0" classname="Coral.Shell.Help"/>
  <testcase name="Instantiation should be possible to clone using js" time="0.003" classname="Coral.Shell.Help"/>
  <testcase name="API #items should return the Help Menu items" time="0.003" classname="Coral.Shell.Help"/>
  <testcase name="API #items Setting Help Menu items should have no effect" time="0.003" classname="Coral.Shell.Help"/>
  <testcase name="API #placeholder should have a placeholder attribute" time="0.003" classname="Coral.Shell.Help"/>
  <testcase name="API #placeholder should have a placeholder attribute initialized with the correct value" time="0.003" classname="Coral.Shell.Help"/>
  <testcase name="Markup #showError() should display an Error Message on &quot;showError&quot; function call" time="0.003" classname="Coral.Shell.Help"/>
  <testcase name="Markup #showResults() should show search results on &quot;showResults&quot; function call" time="0.004" classname="Coral.Shell.Help"/>
  <testcase name="Markup #showResults() should display a &quot;no results message&quot; on &quot;showResults&quot; function call with an array and total = 0" time="0.003" classname="Coral.Shell.Help"/>
  <testcase name="User Interaction search should perform a search" time="0.008" classname="Coral.Shell.Help"/>
  <testcase name="User Interaction search it should clear loading spinner on clear button click" time="0.013" classname="Coral.Shell.Help"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.Shell.Menu"/>
  <testcase name="Instantiation should support creation from markup" time="0.001" classname="Coral.Shell.Menu"/>
  <testcase name="Instantiation should be possible to clone using markup" time="0.001" classname="Coral.Shell.Menu"/>
  <testcase name="Instantiation should be possible to clone using js" time="0" classname="Coral.Shell.Menu"/>
  <testcase name="Implementation Details should not close for clicks on elements that are subsequently removed" time="0.004" classname="Coral.Shell.Menu"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.Shell.MenuBar"/>
  <testcase name="Instantiation should support creation from markup" time="0.001" classname="Coral.Shell.MenuBar"/>
  <testcase name="Instantiation should be possible to clone using markup" time="0" classname="Coral.Shell.MenuBar"/>
  <testcase name="Instantiation should be possible to clone using js" time="0" classname="Coral.Shell.MenuBar"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.Shell.MenuBar.Item"/>
  <testcase name="Instantiation should support creation from markup" time="0" classname="Coral.Shell.MenuBar.Item"/>
  <testcase name="Instantiation should be possible to clone using markup" time="0" classname="Coral.Shell.MenuBar.Item"/>
  <testcase name="Instantiation should be possible to clone using js" time="0.001" classname="Coral.Shell.MenuBar.Item"/>
  <testcase name="API #icon should default be empty" time="0" classname="Coral.Shell.MenuBar.Item"/>
  <testcase name="API #icon should set the buttons icon" time="0" classname="Coral.Shell.MenuBar.Item"/>
  <testcase name="API #iconSize should default to small" time="0" classname="Coral.Shell.MenuBar.Item"/>
  <testcase name="API #iconSize should set the buttons icon size" time="0.001" classname="Coral.Shell.MenuBar.Item"/>
  <testcase name="API #iconVariant should default be default value" time="0" classname="Coral.Shell.MenuBar.Item"/>
  <testcase name="API #iconVariant should set the iconVariant" time="0" classname="Coral.Shell.MenuBar.Item"/>
  <testcase name="API #badge should set the badge attribute on the button" time="0" classname="Coral.Shell.MenuBar.Item"/>
  <testcase name="API #badge should remove the badge attribute on the button for non-truthy values" time="0" classname="Coral.Shell.MenuBar.Item"/>
  <testcase name="API #badge should remove the badge attribute on the button when the attribute is removed from the item" time="0" classname="Coral.Shell.MenuBar.Item"/>
  <testcase name="API #open should default to false" time="0" classname="Coral.Shell.MenuBar.Item"/>
  <testcase name="API #open should ignore true if no valid menu is provided" time="0" classname="Coral.Shell.MenuBar.Item"/>
  <testcase name="API #open should open the menu when open = true" time="0.064" classname="Coral.Shell.MenuBar.Item"/>
  <testcase name="API #open should update open when menu is open programmatically" time="0.152" classname="Coral.Shell.MenuBar.Item"/>
  <testcase name="API #menu should default to null" time="0" classname="Coral.Shell.MenuBar.Item"/>
  <testcase name="API #menu should accept selectors" time="0" classname="Coral.Shell.MenuBar.Item"/>
  <testcase name="API #menu should accept HTMLElements" time="0" classname="Coral.Shell.MenuBar.Item"/>
  <testcase name="Markup #iconVariant should set the iconVariant class" time="0.001" classname="Coral.Shell.MenuBar.Item"/>
  <testcase name="Events #coral-shell-menubar-item:open should not be triggered if menu is invalid" time="0" classname="Coral.Shell.MenuBar.Item"/>
  <testcase name="Events #coral-shell-menubar-item:open should be triggered if menu is valid" time="0" classname="Coral.Shell.MenuBar.Item"/>
  <testcase name="Events #coral-shell-menubar-item:close should be triggered when the menu is closed" time="0.001" classname="Coral.Shell.MenuBar.Item"/>
  <testcase name="User Interaction should open the menu if the item is clicked" time="0.003" classname="Coral.Shell.MenuBar.Item"/>
  <testcase name="User Interaction should close the menu if key:escape is pressed" time="0.039" classname="Coral.Shell.MenuBar.Item"/>
  <testcase name="User Interaction should close the menu if clicked outside" time="0.043" classname="Coral.Shell.MenuBar.Item"/>
  <testcase name="Namespace should be defined in the Coral.Shell namespace" time="0.001" classname="Coral.Shell.User"/>
  <testcase name="Instantiation should be possible using new" time="0.002" classname="Coral.Shell.User"/>
  <testcase name="Instantiation should be possible using createElement" time="0.001" classname="Coral.Shell.User"/>
  <testcase name="Instantiation should be possible using markup" time="0.001" classname="Coral.Shell.User"/>
  <testcase name="Instantiation should be possible to clone using markup" time="0" classname="Coral.Shell.User"/>
  <testcase name="Instantiation should be possible to clone using js" time="0" classname="Coral.Shell.User"/>
  <testcase name="API #avatar should default to avatar.DEFAULT" time="0.002" classname="Coral.Shell.User"/>
  <testcase name="API #avatar should set the new avatar" time="0.001" classname="Coral.Shell.User"/>
  <testcase name="API #avatar should set the avatar back to default" time="0.001" classname="Coral.Shell.User"/>
  <testcase name="API #avatar should set the avatar to empty string when the attribute is removed" time="0.002" classname="Coral.Shell.User"/>
  <testcase name="Markup #avatar should be default value initially" time="0" classname="Coral.Shell.User"/>
  <testcase name="Markup #avatar should set the new avatar" time="0.001" classname="Coral.Shell.User"/>
  <testcase name="Markup #avatar should allow empty avatar" time="0.001" classname="Coral.Shell.User"/>
  <testcase name="Markup #avatar should support arbitrary relative URLs" time="0.002" classname="Coral.Shell.User"/>
  <testcase name="Markup #avatar should support arbitrary relative URLs with paths" time="0.001" classname="Coral.Shell.User"/>
  <testcase name="Markup #avatar should support root relative URLs" time="0.001" classname="Coral.Shell.User"/>
  <testcase name="Markup #avatar should support arbitrary absolute URLs" time="0.003" classname="Coral.Shell.User"/>
  <testcase name="Namespace should be defined in the Coral.Shell namespace" time="0" classname="Coral.Shell.Workspaces"/>
  <testcase name="Instantiation should support creation from markup" time="0.004" classname="Coral.Shell.Workspaces"/>
  <testcase name="Instantiation should support creation from js" time="0.001" classname="Coral.Shell.Workspaces"/>
  <testcase name="Instantiation should create a workspaces component with predefined items" time="0.001" classname="Coral.Shell.Workspaces"/>
  <testcase name="Instantiation should be possible to clone using markup" time="0" classname="Coral.Shell.Workspaces"/>
  <testcase name="Instantiation should be possible to clone using js" time="0.001" classname="Coral.Shell.Workspaces"/>
  <testcase name="API #items should return the workspaces items" time="0.002" classname="Coral.Shell.Workspaces"/>
  <testcase name="API #items should have no effect when setting items" time="0.001" classname="Coral.Shell.Workspaces"/>
  <testcase name="API #selected should select another item" time="0.002" classname="Coral.Shell.Workspaces"/>
  <testcase name="Events change should not trigger a change when selected is in the DOM" time="0.001" classname="Coral.Shell.Workspaces"/>
  <testcase name="Events change should trigger a change if a new element is selected" time="0.002" classname="Coral.Shell.Workspaces"/>
  <testcase name="User Interaction key:down should set focus on next element" time="0" classname="Coral.Shell.Workspaces"/>
  <testcase name="User Interaction key:right should set focus on next element" time="0" classname="Coral.Shell.Workspaces"/>
  <testcase name="User Interaction key:up should set focus on previous element" time="0" classname="Coral.Shell.Workspaces"/>
  <testcase name="User Interaction key:left should set focus on previous element" time="0.001" classname="Coral.Shell.Workspaces"/>
  <testcase name="User Interaction key:pageup should set focus on previous element" time="0" classname="Coral.Shell.Workspaces"/>
  <testcase name="User Interaction key:pagedown should set focus on next element" time="0" classname="Coral.Shell.Workspaces"/>
  <testcase name="User Interaction key:home should set focus on first element" time="0.001" classname="Coral.Shell.Workspaces"/>
  <testcase name="User Interaction key:end should set focus on last element" time="0" classname="Coral.Shell.Workspaces"/>
  <testcase name="Namespace should be defined in the Coral.Shell namespace" time="0" classname="Coral.Shell.SolutionSwitcher"/>
  <testcase name="Initialization should support creation from markup" time="0.007" classname="Coral.Shell.SolutionSwitcher"/>
  <testcase name="Initialization should support creation from js" time="0" classname="Coral.Shell.SolutionSwitcher"/>
  <testcase name="Initialization should be possible to clone using markup" time="0" classname="Coral.Shell.SolutionSwitcher"/>
  <testcase name="Initialization should be possible to clone using js" time="0.001" classname="Coral.Shell.SolutionSwitcher"/>
  <testcase name="Namespace should be defined in the Coral.Shell namespace" time="0" classname="Coral.Shell.OrgSwitcher"/>
  <testcase name="Instantiation should support creation from markup" time="0.004" classname="Coral.Shell.OrgSwitcher"/>
  <testcase name="Instantiation should support creation from JavaScript" time="0.01" classname="Coral.Shell.OrgSwitcher"/>
  <testcase name="Instantiation should be possible to clone using markup" time="0" classname="Coral.Shell.OrgSwitcher"/>
  <testcase name="Instantiation should be possible to clone using js" time="0.004" classname="Coral.Shell.OrgSwitcher"/>
  <testcase name="Events should trigger a change event when an item is selected" time="0.011" classname="Coral.Shell.OrgSwitcher"/>
  <testcase name="Events should trigger a change event when a sub-item is selected" time="0.031" classname="Coral.Shell.OrgSwitcher"/>
  <testcase name="Implementation Details should show exact matches" time="0.001" classname="Coral.Shell.OrgSwitcher"/>
  <testcase name="Implementation Details should show partial matches" time="0.001" classname="Coral.Shell.OrgSwitcher"/>
  <testcase name="Implementation Details should show all if multiple items match" time="0" classname="Coral.Shell.OrgSwitcher"/>
  <testcase name="Implementation Details should be case insensitive" time="0" classname="Coral.Shell.OrgSwitcher"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.Slider"/>
  <testcase name="Namespace should define the orientations in an enum" time="0" classname="Coral.Slider"/>
  <testcase name="Instantiation should be possible to clone the element using markup" time="0" classname="Coral.Slider"/>
  <testcase name="Instantiation should be possible to clone using js" time="0.001" classname="Coral.Slider"/>
  <testcase name="API #tooltips should default to false" time="0" classname="Coral.Slider"/>
  <testcase name="API #tooltips should be settable" time="0" classname="Coral.Slider"/>
  <testcase name="API #tooltips should be labelled by slider items if available" time="0.003" classname="Coral.Slider"/>
  <testcase name="API #tooltips should match the tooltip text to the input value on value change (default tooltip formatter)" time="0.001" classname="Coral.Slider"/>
  <testcase name="API #orientation should default to horizontal" time="0" classname="Coral.Slider"/>
  <testcase name="API #orientation should be possible setting the orientation" time="0" classname="Coral.Slider"/>
  <testcase name="API #step should be possible setting the step" time="0" classname="Coral.Slider"/>
  <testcase name="API #min should be possible setting the min" time="0" classname="Coral.Slider"/>
  <testcase name="API #max should be possible setting the max" time="0" classname="Coral.Slider"/>
  <testcase name="API #value should be possible setting the value" time="0.001" classname="Coral.Slider"/>
  <testcase name="API #value should set value and aria-valuetext" time="0" classname="Coral.Slider"/>
  <testcase name="API #value should correctly snap value to the nearest step" time="0.001" classname="Coral.Slider"/>
  <testcase name="API #valueAsNumber should be possible setting the value as number" time="0.001" classname="Coral.Slider"/>
  <testcase name="API #valueAsNumber should be possible getting the value as number" time="0" classname="Coral.Slider"/>
  <testcase name="User Interaction simulate focus and blur on a handle" time="0.001" classname="Coral.Slider"/>
  <testcase name="User Interaction decrease with left key" time="0.002" classname="Coral.Slider"/>
  <testcase name="User Interaction decrease with pageDown key" time="0.001" classname="Coral.Slider"/>
  <testcase name="User Interaction decrease with down key" time="0.001" classname="Coral.Slider"/>
  <testcase name="User Interaction increase with right key" time="0.001" classname="Coral.Slider"/>
  <testcase name="User Interaction increase with pageUp key" time="0.001" classname="Coral.Slider"/>
  <testcase name="User Interaction increase with up key" time="0.001" classname="Coral.Slider"/>
  <testcase name="User Interaction go to min with home key" time="0.001" classname="Coral.Slider"/>
  <testcase name="User Interaction go to max with end key" time="0.001" classname="Coral.Slider"/>
  <testcase name="User Interaction decrease without going beneth the minimum, do not trigger &quot;change&quot; event" time="0.003" classname="Coral.Slider"/>
  <testcase name="User Interaction increase without going above the minimum, do not trigger &quot;change&quot; event" time="0.002" classname="Coral.Slider"/>
  <testcase name="User Interaction hold and let got the handle without changing the value nor triggering the &quot;change&quot; event" time="0.004" classname="Coral.Slider"/>
  <testcase name="User Interaction drag to maximum, trigger &quot;change&quot; event" time="0.002" classname="Coral.Slider"/>
  <testcase name="User Interaction drag to minimum, trigger &quot;change&quot; event" time="0.003" classname="Coral.Slider"/>
  <testcase name="Implementation Details moves the value to the next step using keys" time="0.002" classname="Coral.Slider"/>
  <testcase name="Implementation Details move the value to the previous step using keys" time="0.002" classname="Coral.Slider"/>
  <testcase name="Implementation Details pages up on &quot;page up&quot; keypress" time="0.003" classname="Coral.Slider"/>
  <testcase name="Implementation Details page down on &quot;page down&quot; keypress" time="0.002" classname="Coral.Slider"/>
  <testcase name="Implementation Details moves to min on &quot;home&quot; keypress" time="0.002" classname="Coral.Slider"/>
  <testcase name="Implementation Details moves to max on &quot;end&quot; keypress" time="0.002" classname="Coral.Slider"/>
  <testcase name="Implementation Details does not precede min limits when moving to prev step via keys" time="0.002" classname="Coral.Slider"/>
  <testcase name="Implementation Details does not exceed max limits when moving to next step via keys" time="0.002" classname="Coral.Slider"/>
  <testcase name="Implementation Details should be possible to move the slider in dom without losing the current set &quot;value&quot; &quot;min&quot; and &quot;max&quot; values" time="0.001" classname="Coral.Slider"/>
  <testcase name="Implementation Details should be possible to reset the &quot;value&quot; by resetting the surrounding form" time="0.004" classname="Coral.Slider"/>
  <testcase name="Implementation Details in browsers using that support input[type=range] expects the input to have type=range" time="0" classname="Coral.Slider"/>
  <testcase name="Implementation Details in browsers using that support input[type=range] expects the handle to have no defined role" time="0" classname="Coral.Slider"/>
  <testcase name="Implementation Details in browsers using that support input[type=range] expects the input to have correct min" time="0" classname="Coral.Slider"/>
  <testcase name="Implementation Details in browsers using that support input[type=range] expects the input to have correct max" time="0" classname="Coral.Slider"/>
  <testcase name="Implementation Details in browsers using that support input[type=range] expects the input to have correct step" time="0" classname="Coral.Slider"/>
  <testcase name="Implementation Details in browsers using that support input[type=range] expects the input to have correct value" time="0" classname="Coral.Slider"/>
  <testcase name="Implementation Details in browsers using that support input[type=range] expects the input to have correct aria-valuetext" time="0" classname="Coral.Slider"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #value should be provided" time="0" classname="Coral.Slider"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #value should have the correct default" time="0.001" classname="Coral.Slider"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #value should not be reflected" time="0" classname="Coral.Slider"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #name should have empty string as default" time="0" classname="Coral.Slider"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #name should transform everything to a string" time="0" classname="Coral.Slider"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #name should be set synchronously" time="0" classname="Coral.Slider"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #name should not submit a value when the name is not specified even though there is a value" time="0.001" classname="Coral.Slider"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #name should submit the one single value" time="0.001" classname="Coral.Slider"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #required should default to false" time="0" classname="Coral.Slider"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #invalid should default to false" time="0" classname="Coral.Slider"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #invalid should be settable programmatically" time="0" classname="Coral.Slider"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #disabled should default to false" time="0" classname="Coral.Slider"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #disabled should behave like a boolean value" time="0" classname="Coral.Slider"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #readOnly should default to false" time="0" classname="Coral.Slider"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #labelledBy should remove labels with empty string" time="0.001" classname="Coral.Slider"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #labelledBy should support multiple labels" time="0" classname="Coral.Slider"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #clear() should set the valueProperty to the default when called" time="0" classname="Coral.Slider"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #reset() should reset to the initial value when called" time="0" classname="Coral.Slider"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #reset() should be called when form is reset programmatically" time="0.005" classname="Coral.Slider"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #reset() should be called when form is reset via reset input" time="0.007" classname="Coral.Slider"/>
  <testcase name="Implementation Details (compliance) #formField testFormField Markup #disabled should behave like a boolean value" time="0.002" classname="Coral.Slider"/>
  <testcase name="Implementation Details (compliance) #formField testFormField Markup #labelledby should label component using attribute" time="0.001" classname="Coral.Slider"/>
  <testcase name="Implementation Details (compliance) #formField testFormField Events #change should not be trigged when setting the value programmatically" time="0.001" classname="Coral.Slider"/>
  <testcase name="Implementation Details (compliance) #formField testFormField Events #change should trigger a change event when we interact with the internal input" time="0.001" classname="Coral.Slider"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.RangedSlider"/>
  <testcase name="Instantiation should be possible to clone the element using markup" time="0.001" classname="Coral.RangedSlider"/>
  <testcase name="Instantiation should be possible to clone using js" time="0.002" classname="Coral.RangedSlider"/>
  <testcase name="API #filled should default to true" time="0" classname="Coral.RangedSlider"/>
  <testcase name="API #filled should not be settable" time="0" classname="Coral.RangedSlider"/>
  <testcase name="API #step should default to 1" time="0" classname="Coral.RangedSlider"/>
  <testcase name="API #step should be ignored if the input is not a number" time="0" classname="Coral.RangedSlider"/>
  <testcase name="API #step should ignore invalid numeric values" time="0" classname="Coral.RangedSlider"/>
  <testcase name="API #step should ignore negative values" time="0" classname="Coral.RangedSlider"/>
  <testcase name="API #startValue should correctly set the input value" time="0" classname="Coral.RangedSlider"/>
  <testcase name="API #startValue should correctly snap input values to the nearest step" time="0.001" classname="Coral.RangedSlider"/>
  <testcase name="API #startValue should not trigger a change event on the input field" time="0" classname="Coral.RangedSlider"/>
  <testcase name="API #endValue should correctly set the input value" time="0" classname="Coral.RangedSlider"/>
  <testcase name="API #endValue should correctly snap input values to the nearest step" time="0" classname="Coral.RangedSlider"/>
  <testcase name="API #endValue should not trigger a change event on the input field" time="0" classname="Coral.RangedSlider"/>
  <testcase name="API #value should correctly set the input value" time="0" classname="Coral.RangedSlider"/>
  <testcase name="API #value should be equivalent to startValue" time="0.001" classname="Coral.RangedSlider"/>
  <testcase name="API #value should correctly snap input values to the nearest step" time="0.001" classname="Coral.RangedSlider"/>
  <testcase name="API #value should not trigger a change event on the input field" time="0" classname="Coral.RangedSlider"/>
  <testcase name="API #values should correctly set declared input value of a range input" time="0.001" classname="Coral.RangedSlider"/>
  <testcase name="API #tooltips should default to false" time="0.001" classname="Coral.RangedSlider"/>
  <testcase name="API #tooltips should be settable" time="0" classname="Coral.RangedSlider"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #value should be provided" time="0" classname="Coral.RangedSlider"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #value should have the correct default" time="0" classname="Coral.RangedSlider"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #value should not be reflected" time="0" classname="Coral.RangedSlider"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #name should have empty string as default" time="0" classname="Coral.RangedSlider"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #name should transform everything to a string" time="0" classname="Coral.RangedSlider"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #name should be set synchronously" time="0" classname="Coral.RangedSlider"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #name should not submit a value when the name is not specified even though there is a value" time="0.002" classname="Coral.RangedSlider"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #name should submit the one single value" time="0.002" classname="Coral.RangedSlider"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #required should default to false" time="0" classname="Coral.RangedSlider"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #invalid should default to false" time="0" classname="Coral.RangedSlider"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #invalid should be settable programmatically" time="0" classname="Coral.RangedSlider"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #disabled should default to false" time="0" classname="Coral.RangedSlider"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #disabled should behave like a boolean value" time="0.001" classname="Coral.RangedSlider"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #readOnly should default to false" time="0" classname="Coral.RangedSlider"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #labelledBy should remove labels with empty string" time="0.001" classname="Coral.RangedSlider"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #labelledBy should support multiple labels" time="0.001" classname="Coral.RangedSlider"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #clear() should set the valueProperty to the default when called" time="0.001" classname="Coral.RangedSlider"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #reset() should reset to the initial value when called" time="0.001" classname="Coral.RangedSlider"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #reset() should be called when form is reset programmatically" time="0.007" classname="Coral.RangedSlider"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #reset() should be called when form is reset via reset input" time="0.008" classname="Coral.RangedSlider"/>
  <testcase name="Implementation Details (compliance) #formField testFormField Markup #disabled should behave like a boolean value" time="0.001" classname="Coral.RangedSlider"/>
  <testcase name="Implementation Details (compliance) #formField testFormField Markup #labelledby should label component using attribute" time="0.001" classname="Coral.RangedSlider"/>
  <testcase name="Implementation Details (compliance) #formField testFormField Events #change should not be trigged when setting the value programmatically" time="0.001" classname="Coral.RangedSlider"/>
  <testcase name="Implementation Details (compliance) #formField testFormField Events #change should trigger a change event when we interact with the internal input" time="0" classname="Coral.RangedSlider"/>
  <testcase name="Namespace should be defined" time="0.001" classname="Coral.Step"/>
  <testcase name="Instantiation should be possible to clone the element using markup" time="0" classname="Coral.Step"/>
  <testcase name="Instantiation should be possible to clone using js" time="0.001" classname="Coral.Step"/>
  <testcase name="API #label should default to empty string" time="0" classname="Coral.Step"/>
  <testcase name="API #label should be a content zone" time="0" classname="Coral.Step"/>
  <testcase name="API #label should be settable" time="0.001" classname="Coral.Step"/>
  <testcase name="API #selected should default to false" time="0" classname="Coral.Step"/>
  <testcase name="API #selected should be settable to truthy" time="0.001" classname="Coral.Step"/>
  <testcase name="Implementation Details tabindex should be removed when StepList interaction is OFF" time="0" classname="Coral.Step"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.StepList"/>
  <testcase name="Namespace should define the interaction in an enum" time="0" classname="Coral.StepList"/>
  <testcase name="Namespace should define the size in an enum" time="0.001" classname="Coral.StepList"/>
  <testcase name="Instantiation should be possible using new" time="0.001" classname="Coral.StepList"/>
  <testcase name="Instantiation should be possible using createElement" time="0.002" classname="Coral.StepList"/>
  <testcase name="Instantiation should be possible using markup" time="0.001" classname="Coral.StepList"/>
  <testcase name="Instantiation should be possible to clone the element using markup" time="0" classname="Coral.StepList"/>
  <testcase name="Instantiation should be possible to clone using js" time="0.001" classname="Coral.StepList"/>
  <testcase name="API #selectedItem should default to null" time="0.001" classname="Coral.StepList"/>
  <testcase name="API #selectedItem should automatically select the first available item" time="0.012" classname="Coral.StepList"/>
  <testcase name="API #selectedItem selecting another item should modify #selectedItem" time="0.006" classname="Coral.StepList"/>
  <testcase name="API #selectedItem removing an unselected item should not modify #selectedItem" time="0.008" classname="Coral.StepList"/>
  <testcase name="API #selectedItem should be null if all items are removed" time="0.003" classname="Coral.StepList"/>
  <testcase name="API #selectedItem should be the first available item, if the current selected item is removed" time="0.021" classname="Coral.StepList"/>
  <testcase name="Markup #selectedItem should default to the first item" time="0.011" classname="Coral.StepList"/>
  <testcase name="Markup #selectedItem should take the last selected" time="0.008" classname="Coral.StepList"/>
  <testcase name="Markup #selectedItem should read the selected from the markup" time="0.009" classname="Coral.StepList"/>
  <testcase name="Markup #selectedItem should switch for one long label the other labels to hidden" time="0.032" classname="Coral.StepList"/>
  <testcase name="Markup #selectedItem should center the one long label" time="0.027" classname="Coral.StepList"/>
  <testcase name="Markup #selectedItem should set index to be picked up by CSS" time="0.024" classname="Coral.StepList"/>
  <testcase name="Markup #selectedItem should switch all non selected step labels to hidden when new step with long label is added" time="0.018" classname="Coral.StepList"/>
  <testcase name="Events coral-steplist:change should not trigger an event when it initializes" time="0.017" classname="Coral.StepList"/>
  <testcase name="Events coral-steplist:change should trigger an event when next() is called" time="0.015" classname="Coral.StepList"/>
  <testcase name="Events coral-steplist:change should not trigger an event when next() on the last item" time="0.012" classname="Coral.StepList"/>
  <testcase name="Events coral-steplist:change should trigger an event when previous() is called" time="0.009" classname="Coral.StepList"/>
  <testcase name="Events coral-steplist:change should trigger a coral-steplist:change event when an item is selected" time="0.013" classname="Coral.StepList"/>
  <testcase name="User Interaction should select step when marker clicked" time="0.013" classname="Coral.StepList"/>
  <testcase name="User Interaction should select step when focused and enter pressed" time="0.013" classname="Coral.StepList"/>
  <testcase name="User Interaction should select the last step on end press" time="0.014" classname="Coral.StepList"/>
  <testcase name="User Interaction should select the first step on home press" time="0.013" classname="Coral.StepList"/>
  <testcase name="User Interaction should select the next step on pagedown, right, and down" time="0.021" classname="Coral.StepList"/>
  <testcase name="User Interaction should select the previous item on pageup, left and up" time="0.016" classname="Coral.StepList"/>
  <testcase name="Implementation Details clicking the step should select the step" time="0.008" classname="Coral.StepList"/>
  <testcase name="Implementation Details should select the target after being inserted in the DOM" time="0.024" classname="Coral.StepList"/>
  <testcase name="Collection API #items is readonly" time="0.003" classname="Coral.StepList"/>
  <testcase name="Collection API triggers coral-collection:add on appendChild" time="0.01" classname="Coral.StepList"/>
  <testcase name="Collection API triggers coral-collection:remove on removeChild" time="0.023" classname="Coral.StepList"/>
  <testcase name="Collection API triggers coral-collection:remove on removeChild" time="0.017" classname="Coral.StepList"/>
  <testcase name="Collection API #add should add the item" time="0.008" classname="Coral.StepList"/>
  <testcase name="Collection API #add should also support config" time="0.01" classname="Coral.StepList"/>
  <testcase name="Collection API #add with before null should insert at the end" time="0.012" classname="Coral.StepList"/>
  <testcase name="Collection API #add is able to insert before" time="0.013" classname="Coral.StepList"/>
  <testcase name="Collection API #remove should remove the item" time="0.04" classname="Coral.StepList"/>
  <testcase name="Collection API #getAll should be empty initially" time="0.001" classname="Coral.StepList"/>
  <testcase name="Collection API #clear should clear all the items" time="0.042" classname="Coral.StepList"/>
  <testcase name="Namespace should be defined" time="0.001" classname="Coral.Switch"/>
  <testcase name="Instantiation should be possible to clone using markup" time="0.001" classname="Coral.Switch"/>
  <testcase name="Instantiation should be possible to clone a switch with checked attribute using markup" time="0" classname="Coral.Switch"/>
  <testcase name="Instantiation should be possible to clone a switch using js" time="0.001" classname="Coral.Switch"/>
  <testcase name="Markup #checked should not be checked by default" time="0.001" classname="Coral.Switch"/>
  <testcase name="Markup #checked should become checked" time="0" classname="Coral.Switch"/>
  <testcase name="Markup #disabled should not be disabled by default" time="0.001" classname="Coral.Switch"/>
  <testcase name="Markup #disabled should become disabled" time="0.001" classname="Coral.Switch"/>
  <testcase name="Markup #labelledby should set aria-labelledby" time="0.001" classname="Coral.Switch"/>
  <testcase name="Markup #labelledby should not add aria-labelledby if null" time="0.002" classname="Coral.Switch"/>
  <testcase name="API should have proper defaults" time="0" classname="Coral.Switch"/>
  <testcase name="API should reflect value changes" time="0" classname="Coral.Switch"/>
  <testcase name="API #checked should reflect checked value" time="0.001" classname="Coral.Switch"/>
  <testcase name="API #checked should reflect unchecked value" time="0.001" classname="Coral.Switch"/>
  <testcase name="API #checked should handle manipulating checked attribute" time="0" classname="Coral.Switch"/>
  <testcase name="API #disabled should reflect disabled value" time="0" classname="Coral.Switch"/>
  <testcase name="API #disabled should reflect enabled value" time="0" classname="Coral.Switch"/>
  <testcase name="API #disabled should handle manipulating disabled attribute" time="0" classname="Coral.Switch"/>
  <testcase name="Events should change trigger on click" time="0.003" classname="Coral.Switch"/>
  <testcase name="Events should not trigger change event, when checked property programmatically" time="0" classname="Coral.Switch"/>
  <testcase name="Events should trigger change event, when clicked" time="0.004" classname="Coral.Switch"/>
  <testcase name="Events should not trigger change event if value changed" time="0" classname="Coral.Switch"/>
  <testcase name="User Interaction should check on click" time="0.006" classname="Coral.Switch"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #value should be provided" time="0" classname="Coral.Switch"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #value should have the correct default" time="0" classname="Coral.Switch"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #value should not be reflected" time="0" classname="Coral.Switch"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #name should have empty string as default" time="0" classname="Coral.Switch"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #name should transform everything to a string" time="0.001" classname="Coral.Switch"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #name should be set synchronously" time="0.001" classname="Coral.Switch"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #name should not submit a value when the name is not specified even though there is a value" time="0.001" classname="Coral.Switch"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #name should submit the one single value" time="0.001" classname="Coral.Switch"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #required should default to false" time="0" classname="Coral.Switch"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #invalid should default to false" time="0" classname="Coral.Switch"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #invalid should be settable programmatically" time="0.001" classname="Coral.Switch"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #disabled should default to false" time="0" classname="Coral.Switch"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #disabled should behave like a boolean value" time="0" classname="Coral.Switch"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #readOnly should default to false" time="0" classname="Coral.Switch"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #labelledBy should remove labels with empty string" time="0.002" classname="Coral.Switch"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #labelledBy should support multiple labels" time="0" classname="Coral.Switch"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #clear() should set the valueProperty to the default when called" time="0.001" classname="Coral.Switch"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #reset() should reset to the initial value when called" time="0.001" classname="Coral.Switch"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #reset() should be called when form is reset programmatically" time="0.01" classname="Coral.Switch"/>
  <testcase name="Implementation Details (compliance) #formField testFormField API #reset() should be called when form is reset via reset input" time="0.008" classname="Coral.Switch"/>
  <testcase name="Implementation Details (compliance) #formField testFormField Markup #disabled should behave like a boolean value" time="0.001" classname="Coral.Switch"/>
  <testcase name="Implementation Details (compliance) #formField testFormField Markup #labelledby should label component using attribute" time="0.001" classname="Coral.Switch"/>
  <testcase name="Implementation Details (compliance) #formField testFormField Events #change should not be trigged when setting the value programmatically" time="0" classname="Coral.Switch"/>
  <testcase name="Implementation Details (compliance) #formField testFormField Events #change should trigger a change event when we interact with the internal input" time="0.001" classname="Coral.Switch"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.Table.Cell"/>
  <testcase name="Instantiation should be possible using new" time="0.001" classname="Coral.Table.Cell"/>
  <testcase name="Instantiation should be possible using document.createElement" time="0" classname="Coral.Table.Cell"/>
  <testcase name="API #content should exist" time="0" classname="Coral.Table.Cell"/>
  <testcase name="API #value should default to empty string" time="0" classname="Coral.Table.Cell"/>
  <testcase name="API #value should be reflected" time="0" classname="Coral.Table.Cell"/>
  <testcase name="API #value should be settable by attribute" time="0" classname="Coral.Table.Cell"/>
  <testcase name="API #selected should be selected" time="0" classname="Coral.Table.Cell"/>
  <testcase name="Events #coral-table-cell:_beforeselectedchanged should trigger before selection changed" time="0" classname="Coral.Table.Cell"/>
  <testcase name="Events #coral-table-cell:_selectedchanged should trigger when selection changed" time="0" classname="Coral.Table.Cell"/>
  <testcase name="Implementation Details should set a11y attribute" time="0" classname="Coral.Table.Cell"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.Table.Cell"/>
  <testcase name="Instantiation should be possible using new" time="0" classname="Coral.Table.Cell"/>
  <testcase name="Instantiation should be possible using document.createElement" time="0" classname="Coral.Table.Cell"/>
  <testcase name="API #content should exist" time="0" classname="Coral.Table.Cell"/>
  <testcase name="Events #coral-table-headercell:_contentchanged should trigger when content changed" time="0.002" classname="Coral.Table.Cell"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.Table.Row"/>
  <testcase name="Instantiation should be possible using new" time="0.001" classname="Coral.Table.Row"/>
  <testcase name="Instantiation should be possible using document.createElement" time="0.001" classname="Coral.Table.Row"/>
  <testcase name="API #selectable should set all items to selectable items" time="0.017" classname="Coral.Table.Row"/>
  <testcase name="API #selectable appended items should be selectable" time="0.008" classname="Coral.Table.Row"/>
  <testcase name="API #selected should be selected" time="0.001" classname="Coral.Table.Row"/>
  <testcase name="API #selectedItem should return null if no cells are selected" time="0.005" classname="Coral.Table.Row"/>
  <testcase name="API #selectedItem should return the selected cell" time="0.007" classname="Coral.Table.Row"/>
  <testcase name="API #selectedItem should be readonly" time="0.005" classname="Coral.Table.Row"/>
  <testcase name="API #selectedItems should return an array of selected cells" time="0.008" classname="Coral.Table.Row"/>
  <testcase name="API #selectedItems should return an empty array if no cells are selected" time="0.004" classname="Coral.Table.Row"/>
  <testcase name="API #selectedItems should be readonly" time="0.01" classname="Coral.Table.Row"/>
  <testcase name="API #items should be defined" time="0" classname="Coral.Table.Row"/>
  <testcase name="Events #coral-table-row:_contentchanged should trigger when content changed" time="0.002" classname="Coral.Table.Row"/>
  <testcase name="Events #coral-table-row:_beforeselectedchanged should trigger before selection changed" time="0.001" classname="Coral.Table.Row"/>
  <testcase name="Events #coral-table-row:_selectedchanged should trigger when selection changed" time="0.001" classname="Coral.Table.Row"/>
  <testcase name="Events #coral-table-row:_lockedchanged should trigger when locked is changed" time="0.001" classname="Coral.Table.Row"/>
  <testcase name="Events #coral-table-row:_multiplechanged should trigger when multiple is changed" time="0" classname="Coral.Table.Row"/>
  <testcase name="Events #coral-table-row:_change should trigger when selecting a cell" time="0.005" classname="Coral.Table.Row"/>
  <testcase name="Implementation Details should set a11y attribute" time="0.001" classname="Coral.Table.Row"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.Table.Head"/>
  <testcase name="Instantiation should be possible using new" time="0" classname="Coral.Table.Head"/>
  <testcase name="Instantiation should be possible using document.createElement" time="0" classname="Coral.Table.Head"/>
  <testcase name="API #divider should default to row divider" time="0" classname="Coral.Table.Head"/>
  <testcase name="API #divider should apply column divider" time="0" classname="Coral.Table.Head"/>
  <testcase name="API #divider should apply cell divider" time="0" classname="Coral.Table.Head"/>
  <testcase name="Events #coral-table-head:_contentchanged should trigger when content changed" time="0.002" classname="Coral.Table.Head"/>
  <testcase name="Events #coral-table-head:_stickychanged should trigger when changing sticky" time="0.009" classname="Coral.Table.Head"/>
  <testcase name="Implementation Details should set a11y attribute" time="0" classname="Coral.Table.Head"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.Table.Body"/>
  <testcase name="Instantiation should be possible using new" time="0" classname="Coral.Table.Body"/>
  <testcase name="Instantiation should be possible using document.createElement" time="0" classname="Coral.Table.Body"/>
  <testcase name="API #divider should default to row divider" time="0.001" classname="Coral.Table.Body"/>
  <testcase name="API #divider should apply column divider" time="0" classname="Coral.Table.Body"/>
  <testcase name="API #divider should apply cell divider" time="0" classname="Coral.Table.Body"/>
  <testcase name="Events #coral-table-body:_contentchanged should trigger when changing content" time="0.017" classname="Coral.Table.Body"/>
  <testcase name="Events #coral-table-body:_empty should trigger if the body is empty" time="0.001" classname="Coral.Table.Body"/>
  <testcase name="Implementation Details should set a11y attribute" time="0.001" classname="Coral.Table.Body"/>
  <testcase name="Namespace should be defined" time="0.001" classname="Coral.Table.Foot"/>
  <testcase name="Instantiation should be possible using new" time="0.001" classname="Coral.Table.Foot"/>
  <testcase name="Instantiation should be possible using document.createElement" time="0.001" classname="Coral.Table.Foot"/>
  <testcase name="API #divider should default to row divider" time="0.001" classname="Coral.Table.Foot"/>
  <testcase name="API #divider should apply column divider" time="0.001" classname="Coral.Table.Foot"/>
  <testcase name="API #divider should apply cell divider" time="0" classname="Coral.Table.Foot"/>
  <testcase name="Implementation Details should set a11y attribute" time="0" classname="Coral.Table.Foot"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.Table.Column"/>
  <testcase name="Namespace should expose enums" time="0" classname="Coral.Table.Column"/>
  <testcase name="Instantiation should be possible using new" time="0" classname="Coral.Table.Column"/>
  <testcase name="Instantiation should be possible using document.createElement" time="0" classname="Coral.Table.Column"/>
  <testcase name="API #sortableType should default to sortableType.ALPHANUMERIC" time="0" classname="Coral.Table.Column"/>
  <testcase name="API #sortableDirection should default to sortableDirection.DEFAULT" time="0" classname="Coral.Table.Column"/>
  <testcase name="Events #coral-table-column:_fixedwidthchanged should trigger when changing fixedWidth" time="0" classname="Coral.Table.Column"/>
  <testcase name="Events #coral-table-column:_hiddenchanged should trigger when changing hidden" time="0.001" classname="Coral.Table.Column"/>
  <testcase name="Events #coral-table-column:_orderablechanged should trigger when changing orderable" time="0.001" classname="Coral.Table.Column"/>
  <testcase name="Events #coral-table-column:_sortablechanged should trigger when changing sortable" time="0.005" classname="Coral.Table.Column"/>
  <testcase name="Events #coral-table-column:_sortabledirectionchanged should trigger when changing sortableDirection" time="0" classname="Coral.Table.Column"/>
  <testcase name="Events #coral-table-column:_sort should trigger when changing sortableDirection" time="0" classname="Coral.Table.Column"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.Table"/>
  <testcase name="Namespace should expose enums" time="0" classname="Coral.Table"/>
  <testcase name="Instantiation should be possible using new" time="0.003" classname="Coral.Table"/>
  <testcase name="Instantiation should be possible using document.createElement" time="0.004" classname="Coral.Table"/>
  <testcase name="Instantiation should be possible to clone using markup" time="0" classname="Coral.Table"/>
  <testcase name="API #head should return the table head" time="0.004" classname="Coral.Table"/>
  <testcase name="API #body should return the table body" time="0.004" classname="Coral.Table"/>
  <testcase name="API #foot should return the table foot" time="0.002" classname="Coral.Table"/>
  <testcase name="API #columns should return the table columns" time="0.004" classname="Coral.Table"/>
  <testcase name="API #items should be readonly" time="0.001" classname="Coral.Table"/>
  <testcase name="API #items should retrieve all coral-table-body rows" time="0.008" classname="Coral.Table"/>
  <testcase name="API #items should append a row to the existing coral-table-body" time="0.009" classname="Coral.Table"/>
  <testcase name="API #items should append a row when using an object" time="0.007" classname="Coral.Table"/>
  <testcase name="API #items should append a row at the given position to the existing body" time="0.006" classname="Coral.Table"/>
  <testcase name="API #items should append a row to the existing body" time="0.007" classname="Coral.Table"/>
  <testcase name="API #items should append a coral-table-body if none" time="0.003" classname="Coral.Table"/>
  <testcase name="API #items should remove all rows" time="0.006" classname="Coral.Table"/>
  <testcase name="API #items should trigger coral-collection:add when appending a row" time="0.015" classname="Coral.Table"/>
  <testcase name="API #items should trigger coral-collection:add when appending a not upgraded row" time="0.015" classname="Coral.Table"/>
  <testcase name="API #items should trigger coral-collection:remove" time="0.01" classname="Coral.Table"/>
  <testcase name="API #items should disable table features if no items" time="0.01" classname="Coral.Table"/>
  <testcase name="API #items should be possible to declare items without table body" time="0.006" classname="Coral.Table"/>
  <testcase name="API #variant should have a list variant" time="0.002" classname="Coral.Table"/>
  <testcase name="API #selectable should set all items to selectable items" time="0.005" classname="Coral.Table"/>
  <testcase name="API #selectable should remove selection mode" time="0.01" classname="Coral.Table"/>
  <testcase name="API #selectable appended items should be selectable" time="0.012" classname="Coral.Table"/>
  <testcase name="API #selectable should trigger a change event if selectable is set to false with selected items" time="0.01" classname="Coral.Table"/>
  <testcase name="API #orderable should set all items to orderable items" time="0.005" classname="Coral.Table"/>
  <testcase name="API #orderable should remove orderable mode" time="0.007" classname="Coral.Table"/>
  <testcase name="API #orderable appended items should be orderable" time="0.017" classname="Coral.Table"/>
  <testcase name="API #multiple should only select the last selected row if multiple is false" time="0.01" classname="Coral.Table"/>
  <testcase name="API #multiple should select multiple rows if multiple is true" time="0.006" classname="Coral.Table"/>
  <testcase name="API #multiple should select multiple rows after enabling table selection" time="0.007" classname="Coral.Table"/>
  <testcase name="API #multiple should enable multiple selection after adding the body to the table" time="0.003" classname="Coral.Table"/>
  <testcase name="API #lockable should set all items to lockable items" time="0.005" classname="Coral.Table"/>
  <testcase name="API #lockable should remove lockable mode" time="0.006" classname="Coral.Table"/>
  <testcase name="API #lockable appended items should be lockable" time="0.01" classname="Coral.Table"/>
  <testcase name="API #selectedItem should return null if no rows are selected" time="0.009" classname="Coral.Table"/>
  <testcase name="API #selectedItem should return the selected row" time="0.008" classname="Coral.Table"/>
  <testcase name="API #selectedItem should be readonly" time="0.005" classname="Coral.Table"/>
  <testcase name="API #selectedItems should return an array of selected rows" time="0.007" classname="Coral.Table"/>
  <testcase name="API #selectedItems should return an empty array if no rows are selected" time="0.003" classname="Coral.Table"/>
  <testcase name="API #selectedItems should be readonly" time="0.004" classname="Coral.Table"/>
  <testcase name="API #coral-table-select should set the select all handle to indeterminate state if not all rows are selected" time="0.006" classname="Coral.Table"/>
  <testcase name="API #coral-table-select should set the select all handle to indeterminate state on initialization" time="0.005" classname="Coral.Table"/>
  <testcase name="API #coral-table-select should set the select all handle to checked if an item is removed and all others are selected" time="0.009" classname="Coral.Table"/>
  <testcase name="API #coral-table-select should set the select all handle to indeterminate if unselected item is added" time="0.015" classname="Coral.Table"/>
  <testcase name="API #coral-table-select should set the select all handle to unchecked if the only selected item is removed" time="0.013" classname="Coral.Table"/>
  <testcase name="API #coral-table-select should set the select all handle to indeterminate if selected item is added" time="0.013" classname="Coral.Table"/>
  <testcase name="API #coral-table-select should set the select all handle to checked if only selected item is added" time="0.014" classname="Coral.Table"/>
  <testcase name="API #coral-table-select should set the select all handle to unchecked if removing the body with selected items" time="0.015" classname="Coral.Table"/>
  <testcase name="API #coral-table-select should set the select all handle to checked if adding a body with a selected item" time="0.015" classname="Coral.Table"/>
  <testcase name="API #coral-table-select should set the select all handle to checked if all rows are selected" time="0.014" classname="Coral.Table"/>
  <testcase name="API #coral-table-select should set the select all handle to unchecked if no rows are selected" time="0.01" classname="Coral.Table"/>
  <testcase name="API #coral-table-select should set the select all handle to unchecked if there are no items" time="0.004" classname="Coral.Table"/>
  <testcase name="API #coral-table-select should select all rows if the select all handle is checked" time="0.014" classname="Coral.Table"/>
  <testcase name="API #coral-table-select should deselect all rows if the select all handle is unchecked" time="0.01" classname="Coral.Table"/>
  <testcase name="API #coral-table-select should select the last row if table selection multiple is false and select all handle is checked" time="0.009" classname="Coral.Table"/>
  <testcase name="API #coral-table-select should deselect the last row if table selection multiple is false and select all handle gets unchecked" time="0.028" classname="Coral.Table"/>
  <testcase name="Events #coral-table:change should trigger if the row is clicked" time="0.02" classname="Coral.Table"/>
  <testcase name="Events #coral-table:change should pass selection and oldSelection" time="0.009" classname="Coral.Table"/>
  <testcase name="Events #coral-table:change should trigger a change event when adding a selected item" time="0.006" classname="Coral.Table"/>
  <testcase name="Events #coral-table:change should trigger a change event when removing a selected item" time="0.012" classname="Coral.Table"/>
  <testcase name="Events #coral-table:change should trigger a change events when adding a body with a selected item" time="0.008" classname="Coral.Table"/>
  <testcase name="Events #coral-table:change should trigger a change event when removing a body with a selected item" time="0.008" classname="Coral.Table"/>
  <testcase name="Events #coral-table:change should trigger a change event if multiple is set to false with selected items" time="0.009" classname="Coral.Table"/>
  <testcase name="Events #coral-table:change should not trigger coral-table:change event when sorting" time="0.014" classname="Coral.Table"/>
  <testcase name="Events #coral-table:rowchange should trigger when selecting a cell" time="0.009" classname="Coral.Table"/>
  <testcase name="Events #coral-table:rowchange should trigger when deselecting a cell" time="0.01" classname="Coral.Table"/>
  <testcase name="Events #coral-table:rowchange should pass selection and oldSelection" time="0.005" classname="Coral.Table"/>
  <testcase name="Events #coral-table:rowchange should trigger a change event when adding a selected item" time="0.013" classname="Coral.Table"/>
  <testcase name="Events #coral-table:rowchange should trigger a change event when removing a selected item" time="0.009" classname="Coral.Table"/>
  <testcase name="Events #coral-table:rowchange should trigger a change event when adding a selected item to a row" time="0.011" classname="Coral.Table"/>
  <testcase name="Events #coral-table:rowchange should trigger a change event when removing a row with a selected item" time="0.007" classname="Coral.Table"/>
  <testcase name="Events #coral-table:rowchange should only trigger one coral-table:rowchange event on single selection change" time="0.011" classname="Coral.Table"/>
  <testcase name="Events #coral-table:rowchange should only trigger one coral-table:rowchange event on multiple false change" time="0.012" classname="Coral.Table"/>
  <testcase name="Events #coral-table:roworder should trigger if dragging the row to the top" time="0.036" classname="Coral.Table"/>
  <testcase name="Events #coral-table:roworder should pass the sibling row to allow reverting" time="0.023" classname="Coral.Table"/>
  <testcase name="Events #coral-table:beforeroworder should call first beforeroworder and then roworder" time="0.022" classname="Coral.Table"/>
  <testcase name="Events #coral-table:rowlock should trigger if the row is locked" time="0.005" classname="Coral.Table"/>
  <testcase name="Events #coral-table:rowunlock should trigger if the row is unlocked" time="0.006" classname="Coral.Table"/>
  <testcase name="Events #coral-table:beforecolumnsort should trigger coral-table:beforecolumnsort" time="0.015" classname="Coral.Table"/>
  <testcase name="Events #coral-table:columnsort should trigger once when setting direction to ascending" time="0.011" classname="Coral.Table"/>
  <testcase name="Events #coral-table:beforecolumndrag should trigger when dragging the header cell to the left" time="0.023" classname="Coral.Table"/>
  <testcase name="Events #coral-table:columndrag should trigger when dragging the header cell to the left" time="0.025" classname="Coral.Table"/>
  <testcase name="Events #coral-table:columndrag should pass the sibling column to allow reverting" time="0.028" classname="Coral.Table"/>
  <testcase name="User Interaction #selectable should select the row if clicked" time="0.019" classname="Coral.Table"/>
  <testcase name="User Interaction #selectable should select the cell when clicked" time="0.007" classname="Coral.Table"/>
  <testcase name="User Interaction #selectable should only be possible to select a cell if selection mode is on" time="0.007" classname="Coral.Table"/>
  <testcase name="User Interaction #orderable should drag the row to the top" time="0.027" classname="Coral.Table"/>
  <testcase name="User Interaction #orderable should drag the row to the bottom" time="0.035" classname="Coral.Table"/>
  <testcase name="User Interaction #orderable should prevent the row from being inserted at the dragged position" time="0.037" classname="Coral.Table"/>
  <testcase name="User Interaction #orderable should not initialize dragging logic if the order handle is disabled" time="0.007" classname="Coral.Table"/>
  <testcase name="User Interaction #orderable should scroll to the table bottom in sticky mode" time="0" classname="Coral.Table">
    <skipped/>
  </testcase>
  <testcase name="User Interaction #orderable should scroll to the table top in sticky mode" time="0" classname="Coral.Table">
    <skipped/>
  </testcase>
  <testcase name="User Interaction #sortable should prevent sorting if user clicks the sorting arrow" time="0.017" classname="Coral.Table"/>
  <testcase name="User Interaction #sortable should set sortable direction to ascending" time="0.015" classname="Coral.Table"/>
  <testcase name="User Interaction #sortable should set sortable direction to descending" time="0.015" classname="Coral.Table"/>
  <testcase name="User Interaction #sortable should set sortable direction back to default" time="0.017" classname="Coral.Table"/>
  <testcase name="User Interaction #lockable should lock the row if lock element is clicked" time="0.022" classname="Coral.Table"/>
  <testcase name="User Interaction #lockable should not lock the row if table is not lockable" time="0.013" classname="Coral.Table"/>
  <testcase name="User Interaction #lockable should preserve the selection after locking" time="0.009" classname="Coral.Table"/>
  <testcase name="User Interaction #keyboard support first selectable item is focusable by default" time="0.004" classname="Coral.Table"/>
  <testcase name="User Interaction #keyboard support first lockable item is focusable by default" time="0.006" classname="Coral.Table"/>
  <testcase name="User Interaction #keyboard support first orderable item is focusable by default" time="0.005" classname="Coral.Table"/>
  <testcase name="User Interaction #keyboard support should focus the selected item" time="0.009" classname="Coral.Table"/>
  <testcase name="User Interaction #keyboard support should focus the first item with key:home" time="0.01" classname="Coral.Table"/>
  <testcase name="User Interaction #keyboard support should focus the last item with key:end" time="0.01" classname="Coral.Table"/>
  <testcase name="User Interaction #keyboard support should focus the next item with key:right" time="0.009" classname="Coral.Table"/>
  <testcase name="User Interaction #keyboard support should focus the next item with key:down" time="0.007" classname="Coral.Table"/>
  <testcase name="User Interaction #keyboard support should focus the next item with key:pagedown" time="0.007" classname="Coral.Table"/>
  <testcase name="User Interaction #keyboard support should focus the previous item with key:left, key:up, key:pageup" time="0.009" classname="Coral.Table"/>
  <testcase name="User Interaction #keyboard support should focus the previous item with key:up" time="0.01" classname="Coral.Table"/>
  <testcase name="User Interaction #keyboard support should focus the previous item with key:pageup" time="0.012" classname="Coral.Table"/>
  <testcase name="User Interaction #keyboard support should select next item with key:down+shift" time="0.018" classname="Coral.Table"/>
  <testcase name="User Interaction #keyboard support should select next item with key:pagedown+shift" time="0.018" classname="Coral.Table"/>
  <testcase name="User Interaction #keyboard support should select next item with key:right+shift" time="0.023" classname="Coral.Table"/>
  <testcase name="User Interaction #keyboard support should select previous item with key:up+shift" time="0.014" classname="Coral.Table"/>
  <testcase name="User Interaction #keyboard support should select previous item with key:pageup+shift" time="0.023" classname="Coral.Table"/>
  <testcase name="User Interaction #keyboard support should select previous item with key:left+shift" time="0.02" classname="Coral.Table"/>
  <testcase name="User Interaction #keyboard support should prevent text-selection" time="0.008" classname="Coral.Table"/>
  <testcase name="User Interaction #keyboard support should select multiple items with click+shift if no items selected by default" time="0.01" classname="Coral.Table"/>
  <testcase name="User Interaction #keyboard support should select an item range with click+shift on deselected item" time="0.01" classname="Coral.Table"/>
  <testcase name="User Interaction #keyboard support should select an item range if click+shift on selected item" time="0.011" classname="Coral.Table"/>
  <testcase name="User Interaction #keyboard support should reverse selection with click+shift" time="0.03" classname="Coral.Table"/>
  <testcase name="User Interaction #keyboard support should deselect siblings items of selected row with click+shift" time="0.013" classname="Coral.Table"/>
  <testcase name="Implementation Details #a11y should set a11y attributes" time="0.015" classname="Coral.Table"/>
  <testcase name="Implementation Details #orderable should remove the row placeholder before triggering roworder events" time="0.02" classname="Coral.Table"/>
  <testcase name="Implementation Details #orderable should destroy the dragaction" time="0.004" classname="Coral.Table"/>
  <testcase name="Implementation Details #selectable should allow input without selecting the row" time="0.005" classname="Coral.Table"/>
  <testcase name="Implementation Details #selectable should only select the last selected cell if multiple is false" time="0.006" classname="Coral.Table"/>
  <testcase name="Implementation Details #selectable should select multiple cells if multiple is true" time="0.004" classname="Coral.Table"/>
  <testcase name="Implementation Details #selectable should select multiple cells after enabling row selection" time="0.006" classname="Coral.Table"/>
  <testcase name="Implementation Details #selectable appended items should be selectable" time="0.008" classname="Coral.Table"/>
  <testcase name="Implementation Details #selectable should only select the last selected cell if multiple is false" time="0.003" classname="Coral.Table"/>
  <testcase name="Implementation Details #selectable should select multiple cells if multiple is true" time="0.003" classname="Coral.Table"/>
  <testcase name="Implementation Details #selectable should select multiple cells after enabling row selection" time="0.006" classname="Coral.Table"/>
  <testcase name="Implementation Details #selectable appended items should be selectable" time="0.008" classname="Coral.Table"/>
  <testcase name="Implementation Details #lockable should lock the row by placing it as first child of body" time="0.005" classname="Coral.Table"/>
  <testcase name="Implementation Details #lockable should unlock the row by placing back to its position" time="0.005" classname="Coral.Table"/>
  <testcase name="Implementation Details #sticky should scroll to the table right" time="0.119" classname="Coral.Table"/>
  <testcase name="Implementation Details #sticky should scroll to the table left" time="0.122" classname="Coral.Table"/>
  <testcase name="Implementation Details #sticky should scroll to the table right in sticky mode" time="0.116" classname="Coral.Table"/>
  <testcase name="Implementation Details #sticky should scroll to the table left in sticky mode" time="0.117" classname="Coral.Table"/>
  <testcase name="Implementation Details #sticky should add the sticky class and prepare the header cells" time="0" classname="Coral.Table">
    <skipped/>
  </testcase>
  <testcase name="Implementation Details #sticky should calculate head placeholder size if head is sticky" time="0" classname="Coral.Table">
    <skipped/>
  </testcase>
  <testcase name="Implementation Details #sticky should calculate the sticky headercells when table has empty columns" time="0" classname="Coral.Table">
    <skipped/>
  </testcase>
  <testcase name="Implementation Details #sticky should scroll the sticky headercells when scrolling the table" time="0.022" classname="Coral.Table"/>
  <testcase name="Implementation Details #sticky should not set a 0 width to the header cells if they are hidden" time="0.056" classname="Coral.Table"/>
  <testcase name="Implementation Details #fixedWidth should set a fixed width to the column" time="0.008" classname="Coral.Table"/>
  <testcase name="Implementation Details #hidden should hide the column" time="0.005" classname="Coral.Table"/>
  <testcase name="Implementation Details #hidden appended cells should be hidden" time="0.011" classname="Coral.Table"/>
  <testcase name="Implementation Details #sortable should set sortable direction to default" time="0.006" classname="Coral.Table"/>
  <testcase name="Implementation Details #sortable should sort ascending by alphanumeric type" time="0.009" classname="Coral.Table"/>
  <testcase name="Implementation Details #sortable should sort ascending by alphanumeric type by default" time="0.007" classname="Coral.Table"/>
  <testcase name="Implementation Details #sortable should sort descending by alphanumeric type" time="0.011" classname="Coral.Table"/>
  <testcase name="Implementation Details #sortable should sort ascending by number type" time="0.007" classname="Coral.Table"/>
  <testcase name="Implementation Details #sortable should sort descending by number type" time="0.009" classname="Coral.Table"/>
  <testcase name="Implementation Details #sortable should sort ascending by date type" time="0.008" classname="Coral.Table"/>
  <testcase name="Implementation Details #sortable should sort descending by date type" time="0.009" classname="Coral.Table"/>
  <testcase name="Implementation Details #sortable should restore default sorting" time="0.01" classname="Coral.Table"/>
  <testcase name="Implementation Details #sortable should sort by alphanumeric type ascending using cells value property" time="0.009" classname="Coral.Table"/>
  <testcase name="Implementation Details #sortable should sort by alphanumeric type descending using cells value property" time="0.015" classname="Coral.Table"/>
  <testcase name="Implementation Details #sortable should sort by number type ascending using cells value property" time="0.013" classname="Coral.Table"/>
  <testcase name="Implementation Details #sortable should sort by number type descending using cells value property" time="0.009" classname="Coral.Table"/>
  <testcase name="Implementation Details #sortable should sort by date type ascending using cells value property" time="0.012" classname="Coral.Table"/>
  <testcase name="Implementation Details #sortable should sort by date type descending using cells value property" time="0.008" classname="Coral.Table"/>
  <testcase name="Implementation Details #sortable should be able to sort programmatically by setting the sortableDirection property" time="0.009" classname="Coral.Table"/>
  <testcase name="Implementation Details #sortable should be able to sort programmatically if beforecolumnsort event is prevented" time="0.011" classname="Coral.Table"/>
  <testcase name="Implementation Details #sortable should not sort if sortableType is set to custom but still allow to change sortableDirection" time="0.007" classname="Coral.Table"/>
  <testcase name="Implementation Details #sortable should disable row ordering if table is in a sorted state (ascending)" time="0.007" classname="Coral.Table"/>
  <testcase name="Implementation Details #sortable should disable row ordering if table is in a sorted state (descending)" time="0.008" classname="Coral.Table"/>
  <testcase name="Implementation Details #sortable should enable row ordering back if table is not in a sorted state anymore" time="0.012" classname="Coral.Table"/>
  <testcase name="Implementation Details #orderable should initialize the dragAction on the sticky header cells" time="0.025" classname="Coral.Table"/>
  <testcase name="Implementation Details #orderable should drag the header cell to the left" time="0.023" classname="Coral.Table"/>
  <testcase name="Implementation Details #orderable should prevent the header cell from being inserted at the dragged position" time="0.041" classname="Coral.Table"/>
  <testcase name="Implementation Details #orderable should drag the header cell to the left (sortable)" time="0.031" classname="Coral.Table"/>
  <testcase name="Implementation Details #orderable should drag the header cell to the left (sticky)" time="0.029" classname="Coral.Table"/>
  <testcase name="Implementation Details #orderable should drag the header cell to the left (sortable + sticky)" time="0.027" classname="Coral.Table"/>
  <testcase name="Implementation Details #orderable should drag the header cell to the right" time="0.022" classname="Coral.Table"/>
  <testcase name="Implementation Details #orderable should drag the header cell to the right (sticky)" time="0.041" classname="Coral.Table"/>
  <testcase name="Implementation Details #orderable should drag the header cell to the right (sortable)" time="0.027" classname="Coral.Table"/>
  <testcase name="Implementation Details #orderable should drag the header cell to the right (sortable + sticky)" time="0.03" classname="Coral.Table"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.Tab"/>
  <testcase name="Instantiation should be possible via clone using markup" time="0.001" classname="Coral.Tab"/>
  <testcase name="Instantiation should be possible via clone using markup with textContent" time="0.001" classname="Coral.Tab"/>
  <testcase name="Instantiation should be possible via clone using markup with icon" time="0" classname="Coral.Tab"/>
  <testcase name="Instantiation should be possible via clone using js" time="0" classname="Coral.Tab"/>
  <testcase name="API #selected should default to false" time="0" classname="Coral.Tab"/>
  <testcase name="API #selected should be settable to truthy" time="0.001" classname="Coral.Tab"/>
  <testcase name="API #selected selecting a disabled item should make it unselected" time="0" classname="Coral.Tab"/>
  <testcase name="API #disabled should default to false" time="0" classname="Coral.Tab"/>
  <testcase name="API #disabled should be settable to truthy/falsy" time="0.001" classname="Coral.Tab"/>
  <testcase name="API #disabled disabled items cannot be selected" time="0.001" classname="Coral.Tab"/>
  <testcase name="API #disabled disabling should make it unselected" time="0.001" classname="Coral.Tab"/>
  <testcase name="API #invalid should default to false" time="0" classname="Coral.Tab"/>
  <testcase name="API #invalid should be settable to truthy/falsy" time="0" classname="Coral.Tab"/>
  <testcase name="API #label should be settable" time="0" classname="Coral.Tab"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.TabList"/>
  <testcase name="Instantiation should be possible using new" time="0.003" classname="Coral.TabList"/>
  <testcase name="Instantiation should be possible using createElement" time="0" classname="Coral.TabList"/>
  <testcase name="Instantiation should be possible using markup" time="0.001" classname="Coral.TabList"/>
  <testcase name="Instantiation should be possible via clone using markup" time="0.001" classname="Coral.TabList"/>
  <testcase name="Instantiation should be possible via clone using markup with textContent" time="0" classname="Coral.TabList"/>
  <testcase name="Instantiation should be possible via clone using js" time="0.001" classname="Coral.TabList"/>
  <testcase name="API #selectedItem should default to null" time="0" classname="Coral.TabList"/>
  <testcase name="API #selectedItem should automatically select the first available item" time="0.003" classname="Coral.TabList"/>
  <testcase name="API #selectedItem should select another item when the active one is disabled" time="0" classname="Coral.TabList"/>
  <testcase name="API #selectedItem should select the tab that just became enabled" time="0.001" classname="Coral.TabList"/>
  <testcase name="API #selectedItem selecting another item should modify #selectedItem" time="0.002" classname="Coral.TabList"/>
  <testcase name="API #selectedItem removing an unselected item should not modify #selectedItem" time="0" classname="Coral.TabList"/>
  <testcase name="API #selectedItem should be null if all items are removed" time="0" classname="Coral.TabList"/>
  <testcase name="API #selectedItem should be null the last item is disabled" time="0" classname="Coral.TabList"/>
  <testcase name="API #selectedItem should be the first available item if the current selectedItem is removed" time="0.01" classname="Coral.TabList"/>
  <testcase name="API #icon should be initially empty" time="0.004" classname="Coral.TabList"/>
  <testcase name="API #icon should set the new icon" time="0.005" classname="Coral.TabList"/>
  <testcase name="Markup #target should default to null" time="0.006" classname="Coral.TabList"/>
  <testcase name="Markup #target should not fail with empty string" time="0.003" classname="Coral.TabList"/>
  <testcase name="Markup #target should select the target after being inserted in the DOM" time="0.004" classname="Coral.TabList"/>
  <testcase name="Markup #selectedItem should default to the first item" time="0.005" classname="Coral.TabList"/>
  <testcase name="Markup #selectedItem should take the last selected" time="0.002" classname="Coral.TabList"/>
  <testcase name="Markup #selectedItem should read the selected from the markup" time="0.002" classname="Coral.TabList"/>
  <testcase name="Events should trigger a coral-tablist:change event when an item is selected" time="0.001" classname="Coral.TabList"/>
  <testcase name="Events should select the target item before triggering a coral-tablist:change event" time="0" classname="Coral.TabList"/>
  <testcase name="User Interaction should select tab on click" time="0.01" classname="Coral.TabList"/>
  <testcase name="User Interaction should ignore clicks on disabled tabs" time="0.006" classname="Coral.TabList"/>
  <testcase name="User Interaction should select the last tab on end press" time="0.01" classname="Coral.TabList"/>
  <testcase name="User Interaction should select the first tab on home press" time="0.009" classname="Coral.TabList"/>
  <testcase name="User Interaction should select the next tab on pagedown, right, and down" time="0.012" classname="Coral.TabList"/>
  <testcase name="User Interaction should select the previous item on pageup, left and up" time="0.014" classname="Coral.TabList"/>
  <testcase name="Implementation Details clicking the tab should select the tab" time="0.008" classname="Coral.TabList"/>
  <testcase name="Collection API #items cannot be set" time="0.001" classname="Coral.TabList"/>
  <testcase name="Collection API triggers coral-collection:add on appendChild" time="0.008" classname="Coral.TabList"/>
  <testcase name="Collection API triggers coral-collection:remove on removeChild" time="0.006" classname="Coral.TabList"/>
  <testcase name="Collection API triggers coral-collection:remove on removeChild" time="0.005" classname="Coral.TabList"/>
  <testcase name="Collection API #add should add the item" time="0.013" classname="Coral.TabList"/>
  <testcase name="Collection API #add should also support config" time="0.005" classname="Coral.TabList"/>
  <testcase name="Collection API #add with before null should insert at the end" time="0.007" classname="Coral.TabList"/>
  <testcase name="Collection API #add is able to insert before" time="0.01" classname="Coral.TabList"/>
  <testcase name="Collection API #add with both disabled and selected should make it unselected" time="0.012" classname="Coral.TabList"/>
  <testcase name="Collection API #remove should remove the item" time="0.007" classname="Coral.TabList"/>
  <testcase name="Collection API #getAll should be empty initially" time="0.007" classname="Coral.TabList"/>
  <testcase name="Collection API #clear should clear all the items" time="0.007" classname="Coral.TabList"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.TabView"/>
  <testcase name="Instantiation should be possible using new" time="0.006" classname="Coral.TabView"/>
  <testcase name="Instantiation should be possible using createElement" time="0.002" classname="Coral.TabView"/>
  <testcase name="Instantiation should be possible using markup" time="0.002" classname="Coral.TabView"/>
  <testcase name="Instantiation should position the tablist before the panelstack" time="0.008" classname="Coral.TabView"/>
  <testcase name="Instantiation should be possible to clone using markup" time="0" classname="Coral.TabView"/>
  <testcase name="Instantiation should be possible to clone using js" time="0.002" classname="Coral.TabView"/>
  <testcase name="Instantiation should be possible to clone an an instance with selected item" time="0.001" classname="Coral.TabView"/>
  <testcase name="API #orientation should default to Coral.TabView.orientation.HORIZONTAL" time="0" classname="Coral.TabView"/>
  <testcase name="API #orientation should be settable" time="0.001" classname="Coral.TabView"/>
  <testcase name="API #orientation should set orientation to tablist" time="0.003" classname="Coral.TabView"/>
  <testcase name="Events #coral-tabview:change should trigger when an item is selected" time="0.009" classname="Coral.TabView"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.Tag"/>
  <testcase name="Instantiation should be possible to clone a tag using markup" time="0.001" classname="Coral.Tag"/>
  <testcase name="Instantiation should be possible to clone a tag with full markup" time="0" classname="Coral.Tag"/>
  <testcase name="Instantiation should be possible to clone a tag with comments cusing markup" time="0" classname="Coral.Tag"/>
  <testcase name="Instantiation should be possible to clone using js" time="0.001" classname="Coral.Tag"/>
  <testcase name="Markup #label should have label set to innerHTML if property not provided" time="0.001" classname="Coral.Tag"/>
  <testcase name="Markup #closable should block user interaction" time="0.005" classname="Coral.Tag"/>
  <testcase name="Markup #closable should remove tag if its button is triggered" time="0.003" classname="Coral.Tag"/>
  <testcase name="Markup #value should set the value without setting it to an input element" time="0.001" classname="Coral.Tag"/>
  <testcase name="Markup #multiline should set multiline class if property is true" time="0.003" classname="Coral.Tag"/>
  <testcase name="Markup #quiet should set quiet class if property is true" time="0.001" classname="Coral.Tag"/>
  <testcase name="Markup #color should set another tag color" time="0.002" classname="Coral.Tag"/>
  <testcase name="Markup #size should set another tag size" time="0.001" classname="Coral.Tag"/>
  <testcase name="API #label should have a label" time="0" classname="Coral.Tag"/>
  <testcase name="API #closable should default to false" time="0" classname="Coral.Tag"/>
  <testcase name="API #closable should insert the button in the DOM only if required" time="0" classname="Coral.Tag"/>
  <testcase name="API #value value should default to empty string" time="0" classname="Coral.Tag"/>
  <testcase name="API #multiline should default to false" time="0" classname="Coral.Tag"/>
  <testcase name="API #quiet should default to false" time="0" classname="Coral.Tag"/>
  <testcase name="API #size should default to L" time="0" classname="Coral.Tag"/>
  <testcase name="API #color should default to empty string" time="0" classname="Coral.Tag"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.TagList"/>
  <testcase name="Instantiation should be possible to clone a taglist with one tag using markup" time="0" classname="Coral.TagList"/>
  <testcase name="Instantiation should be possible to clone a taglist with multiple tags using markup" time="0" classname="Coral.TagList"/>
  <testcase name="Instantiation should be possible to clone using js" time="0.003" classname="Coral.TagList"/>
  <testcase name="Markup #items #items cannot be set" time="0.003" classname="Coral.TagList"/>
  <testcase name="Markup #items #add with before null should insert at the end" time="0.005" classname="Coral.TagList"/>
  <testcase name="Markup #items #add is able to insert before" time="0.005" classname="Coral.TagList"/>
  <testcase name="Markup #items #add should also support config" time="0.01" classname="Coral.TagList"/>
  <testcase name="Markup #items should add a tag with the right role" time="0.005" classname="Coral.TagList"/>
  <testcase name="Markup #items should remove a tag and remove its specific attributes tied to TagList" time="0.004" classname="Coral.TagList"/>
  <testcase name="Markup #items #getAll should be empty initially" time="0.001" classname="Coral.TagList"/>
  <testcase name="Markup #items #getAll should retrieve 1 item" time="0.005" classname="Coral.TagList"/>
  <testcase name="Markup #items #clear should remove all items" time="0.003" classname="Coral.TagList"/>
  <testcase name="Markup #values should get an array of values" time="0.006" classname="Coral.TagList"/>
  <testcase name="Markup #values should clear all tags and set new tags provided by the array of values" time="0.01" classname="Coral.TagList"/>
  <testcase name="Markup #value should create an input related to the tag item" time="0.003" classname="Coral.TagList"/>
  <testcase name="Markup #value should set the value to the input related to the tag" time="0.002" classname="Coral.TagList"/>
  <testcase name="Markup #value should be set to the label when using the the collection API" time="0.013" classname="Coral.TagList"/>
  <testcase name="Markup #value should not allow duplicate tag values" time="0.005" classname="Coral.TagList"/>
  <testcase name="Markup #value should get the first tag value" time="0.004" classname="Coral.TagList"/>
  <testcase name="Markup #value should clear all tags and set one tag with the provided value" time="0.008" classname="Coral.TagList"/>
  <testcase name="Markup #value should submit the form with taglist values" time="0.009" classname="Coral.TagList"/>
  <testcase name="Markup #disabled should disable and block every user interaction" time="0.004" classname="Coral.TagList"/>
  <testcase name="Markup #name should set tag property name to taglist property name" time="0.007" classname="Coral.TagList"/>
  <testcase name="Markup #name should set added tag property name to taglist property name" time="0.004" classname="Coral.TagList"/>
  <testcase name="API #values should default to empty array" time="0.001" classname="Coral.TagList"/>
  <testcase name="API #values should return an array of tag values" time="0.006" classname="Coral.TagList"/>
  <testcase name="API #values should send the correct values when submitted in a form" time="0.004" classname="Coral.TagList"/>
  <testcase name="User Interaction should have a role" time="0.003" classname="Coral.TagList"/>
  <testcase name="User Interaction should remove a focused tag on backspace" time="0.007" classname="Coral.TagList"/>
  <testcase name="User Interaction set aria-selected attribute to true to focused item" time="0.007" classname="Coral.TagList"/>
  <testcase name="User Interaction should not focus next item on tab" time="0.008" classname="Coral.TagList"/>
  <testcase name="User Interaction should set focus to next item on right" time="0.008" classname="Coral.TagList"/>
  <testcase name="User Interaction should set focus to next item on pagedown" time="0.007" classname="Coral.TagList"/>
  <testcase name="User Interaction should set focus to next item on down" time="0.007" classname="Coral.TagList"/>
  <testcase name="User Interaction should set focus to previous item on left" time="0.007" classname="Coral.TagList"/>
  <testcase name="User Interaction should set focus to previous item on pageup" time="0.006" classname="Coral.TagList"/>
  <testcase name="User Interaction should set focus to previous item on up" time="0.01" classname="Coral.TagList"/>
  <testcase name="User Interaction should set focus to first item on home" time="0.009" classname="Coral.TagList"/>
  <testcase name="User Interaction should set focus to last item on end" time="0.01" classname="Coral.TagList"/>
  <testcase name="Events #change should trigger a change event if a tag is removed by the user" time="0.009" classname="Coral.TagList"/>
  <testcase name="Events #coral-collection:add triggers coral-collection:add on appendChild" time="0.005" classname="Coral.TagList"/>
  <testcase name="Events #coral-collection:remove triggers coral-collection:remove on removeChild" time="0.003" classname="Coral.TagList"/>
  <testcase name="Implementation Details #formField testFormField API #value should be provided" time="0" classname="Coral.TagList"/>
  <testcase name="Implementation Details #formField testFormField API #value should have the correct default" time="0" classname="Coral.TagList"/>
  <testcase name="Implementation Details #formField testFormField API #value should not be reflected" time="0.002" classname="Coral.TagList"/>
  <testcase name="Implementation Details #formField testFormField API #name should have empty string as default" time="0" classname="Coral.TagList"/>
  <testcase name="Implementation Details #formField testFormField API #name should transform everything to a string" time="0.001" classname="Coral.TagList"/>
  <testcase name="Implementation Details #formField testFormField API #name should be set synchronously" time="0" classname="Coral.TagList"/>
  <testcase name="Implementation Details #formField testFormField API #name should not submit a value when the name is not specified even though there is a value" time="0.003" classname="Coral.TagList"/>
  <testcase name="Implementation Details #formField testFormField API #name should submit the one single value" time="0.006" classname="Coral.TagList"/>
  <testcase name="Implementation Details #formField testFormField API #required should default to false" time="0" classname="Coral.TagList"/>
  <testcase name="Implementation Details #formField testFormField API #invalid should default to false" time="0" classname="Coral.TagList"/>
  <testcase name="Implementation Details #formField testFormField API #invalid should be settable programmatically" time="0" classname="Coral.TagList"/>
  <testcase name="Implementation Details #formField testFormField API #disabled should default to false" time="0" classname="Coral.TagList"/>
  <testcase name="Implementation Details #formField testFormField API #disabled should behave like a boolean value" time="0.001" classname="Coral.TagList"/>
  <testcase name="Implementation Details #formField testFormField API #readOnly should default to false" time="0" classname="Coral.TagList"/>
  <testcase name="Implementation Details #formField testFormField API #labelledBy should remove labels with empty string" time="0.002" classname="Coral.TagList"/>
  <testcase name="Implementation Details #formField testFormField API #labelledBy should support multiple labels" time="0" classname="Coral.TagList"/>
  <testcase name="Implementation Details #formField testFormField API #clear() should set the valueProperty to the default when called" time="0.004" classname="Coral.TagList"/>
  <testcase name="Implementation Details #formField testFormField API #reset() should reset to the initial value when called" time="0.004" classname="Coral.TagList"/>
  <testcase name="Implementation Details #formField testFormField API #reset() should be called when form is reset programmatically" time="0.011" classname="Coral.TagList"/>
  <testcase name="Implementation Details #formField testFormField API #reset() should be called when form is reset via reset input" time="0.013" classname="Coral.TagList"/>
  <testcase name="Implementation Details #formField testFormField Markup #disabled should behave like a boolean value" time="0.001" classname="Coral.TagList"/>
  <testcase name="Implementation Details #formField testFormField Markup #labelledby should label component using attribute" time="0" classname="Coral.TagList"/>
  <testcase name="Implementation Details #formField testFormField Events #change should not be trigged when setting the value programmatically" time="0.003" classname="Coral.TagList"/>
  <testcase name="Implementation Details #formField testFormField Events #change should trigger a change event when we interact with the internal input" time="0" classname="Coral.TagList"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.Textarea"/>
  <testcase name="Instantiation should be possible via clone using markup" time="0.001" classname="Coral.Textarea"/>
  <testcase name="Instantiation should be possible via clone using markup with textContent" time="0" classname="Coral.Textarea"/>
  <testcase name="Instantiation should be possible via clone using js" time="0" classname="Coral.Textarea"/>
  <testcase name="API #value should return empty string by default" time="0" classname="Coral.Textarea"/>
  <testcase name="API #name should return empty string by default" time="0" classname="Coral.Textarea"/>
  <testcase name="API #variant should be set to &quot;default&quot; by default" time="0" classname="Coral.Textarea"/>
  <testcase name="API #variant should be possible to set the variant" time="0" classname="Coral.Textarea"/>
  <testcase name="API #variant should increase the height automatically if variant=quiet" time="0.003" classname="Coral.Textarea"/>
  <testcase name="API #variant should decrease the height automatically if variant=quiet" time="0.003" classname="Coral.Textarea"/>
  <testcase name="API #variant should restore the default height if variant was quiet" time="0.001" classname="Coral.Textarea"/>
  <testcase name="Implementation Details #formField testFormField API #value should be provided" time="0" classname="Coral.Textarea"/>
  <testcase name="Implementation Details #formField testFormField API #value should have the correct default" time="0" classname="Coral.Textarea"/>
  <testcase name="Implementation Details #formField testFormField API #value should not be reflected" time="0.001" classname="Coral.Textarea"/>
  <testcase name="Implementation Details #formField testFormField API #name should have empty string as default" time="0" classname="Coral.Textarea"/>
  <testcase name="Implementation Details #formField testFormField API #name should transform everything to a string" time="0.001" classname="Coral.Textarea"/>
  <testcase name="Implementation Details #formField testFormField API #name should be set synchronously" time="0" classname="Coral.Textarea"/>
  <testcase name="Implementation Details #formField testFormField API #name should not submit a value when the name is not specified even though there is a value" time="0" classname="Coral.Textarea"/>
  <testcase name="Implementation Details #formField testFormField API #name should submit the one single value" time="0" classname="Coral.Textarea"/>
  <testcase name="Implementation Details #formField testFormField API #required should default to false" time="0" classname="Coral.Textarea"/>
  <testcase name="Implementation Details #formField testFormField API #invalid should default to false" time="0" classname="Coral.Textarea"/>
  <testcase name="Implementation Details #formField testFormField API #invalid should be settable programmatically" time="0" classname="Coral.Textarea"/>
  <testcase name="Implementation Details #formField testFormField API #disabled should default to false" time="0" classname="Coral.Textarea"/>
  <testcase name="Implementation Details #formField testFormField API #disabled should behave like a boolean value" time="0" classname="Coral.Textarea"/>
  <testcase name="Implementation Details #formField testFormField API #readOnly should default to false" time="0" classname="Coral.Textarea"/>
  <testcase name="Implementation Details #formField testFormField API #labelledBy should remove labels with empty string" time="0" classname="Coral.Textarea"/>
  <testcase name="Implementation Details #formField testFormField API #labelledBy should support multiple labels" time="0.001" classname="Coral.Textarea"/>
  <testcase name="Implementation Details #formField testFormField API #clear() should set the valueProperty to the default when called" time="0" classname="Coral.Textarea"/>
  <testcase name="Implementation Details #formField testFormField API #reset() should reset to the initial value when called" time="0" classname="Coral.Textarea"/>
  <testcase name="Implementation Details #formField testFormField API #reset() should be called when form is reset programmatically" time="0.003" classname="Coral.Textarea"/>
  <testcase name="Implementation Details #formField testFormField API #reset() should be called when form is reset via reset input" time="0.004" classname="Coral.Textarea"/>
  <testcase name="Implementation Details #formField testFormField Markup #disabled should behave like a boolean value" time="0.001" classname="Coral.Textarea"/>
  <testcase name="Implementation Details #formField testFormField Markup #labelledby should label component using attribute" time="0" classname="Coral.Textarea"/>
  <testcase name="Implementation Details #formField testFormField Events #change should not be trigged when setting the value programmatically" time="0" classname="Coral.Textarea"/>
  <testcase name="Implementation Details #formField testFormField Events #change should trigger a change event when we interact with the internal input" time="0" classname="Coral.Textarea"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.Textfield"/>
  <testcase name="Instantiation should be possible via clone using markup" time="0" classname="Coral.Textfield"/>
  <testcase name="Instantiation should be possible via clone using markup with textContent" time="0" classname="Coral.Textfield"/>
  <testcase name="Instantiation should be possible via clone using js" time="0" classname="Coral.Textfield"/>
  <testcase name="API #value should return empty string by default" time="0" classname="Coral.Textfield"/>
  <testcase name="API #name should return empty string by default" time="0" classname="Coral.Textfield"/>
  <testcase name="API #placeholder should return empty string by default" time="0" classname="Coral.Textfield"/>
  <testcase name="API #variant should be set to &quot;default&quot; by default" time="0.001" classname="Coral.Textfield"/>
  <testcase name="API #variant should be possible to set the variant" time="0" classname="Coral.Textfield"/>
  <testcase name="Implementation Details #formField testFormField API #value should be provided" time="0" classname="Coral.Textfield"/>
  <testcase name="Implementation Details #formField testFormField API #value should have the correct default" time="0" classname="Coral.Textfield"/>
  <testcase name="Implementation Details #formField testFormField API #value should not be reflected" time="0" classname="Coral.Textfield"/>
  <testcase name="Implementation Details #formField testFormField API #name should have empty string as default" time="0" classname="Coral.Textfield"/>
  <testcase name="Implementation Details #formField testFormField API #name should transform everything to a string" time="0" classname="Coral.Textfield"/>
  <testcase name="Implementation Details #formField testFormField API #name should be set synchronously" time="0" classname="Coral.Textfield"/>
  <testcase name="Implementation Details #formField testFormField API #name should not submit a value when the name is not specified even though there is a value" time="0" classname="Coral.Textfield"/>
  <testcase name="Implementation Details #formField testFormField API #name should submit the one single value" time="0.001" classname="Coral.Textfield"/>
  <testcase name="Implementation Details #formField testFormField API #required should default to false" time="0" classname="Coral.Textfield"/>
  <testcase name="Implementation Details #formField testFormField API #invalid should default to false" time="0" classname="Coral.Textfield"/>
  <testcase name="Implementation Details #formField testFormField API #invalid should be settable programmatically" time="0" classname="Coral.Textfield"/>
  <testcase name="Implementation Details #formField testFormField API #disabled should default to false" time="0" classname="Coral.Textfield"/>
  <testcase name="Implementation Details #formField testFormField API #disabled should behave like a boolean value" time="0" classname="Coral.Textfield"/>
  <testcase name="Implementation Details #formField testFormField API #readOnly should default to false" time="0" classname="Coral.Textfield"/>
  <testcase name="Implementation Details #formField testFormField API #labelledBy should remove labels with empty string" time="0" classname="Coral.Textfield"/>
  <testcase name="Implementation Details #formField testFormField API #labelledBy should support multiple labels" time="0.001" classname="Coral.Textfield"/>
  <testcase name="Implementation Details #formField testFormField API #clear() should set the valueProperty to the default when called" time="0" classname="Coral.Textfield"/>
  <testcase name="Implementation Details #formField testFormField API #reset() should reset to the initial value when called" time="0" classname="Coral.Textfield"/>
  <testcase name="Implementation Details #formField testFormField API #reset() should be called when form is reset programmatically" time="0.003" classname="Coral.Textfield"/>
  <testcase name="Implementation Details #formField testFormField API #reset() should be called when form is reset via reset input" time="0.005" classname="Coral.Textfield"/>
  <testcase name="Implementation Details #formField testFormField Markup #disabled should behave like a boolean value" time="0" classname="Coral.Textfield"/>
  <testcase name="Implementation Details #formField testFormField Markup #labelledby should label component using attribute" time="0.001" classname="Coral.Textfield"/>
  <testcase name="Implementation Details #formField testFormField Events #change should not be trigged when setting the value programmatically" time="0" classname="Coral.Textfield"/>
  <testcase name="Implementation Details #formField testFormField Events #change should trigger a change event when we interact with the internal input" time="0" classname="Coral.Textfield"/>
  <testcase name="Namespace should be defined in Coral namespace" time="0" classname="Coral.Tooltip"/>
  <testcase name="Namespace should have correct default property values" time="0.002" classname="Coral.Tooltip"/>
  <testcase name="Instantiation should be possible to clone the element using markup" time="0" classname="Coral.Tooltip"/>
  <testcase name="Instantiation should be possible to clone using js" time="0.001" classname="Coral.Tooltip"/>
  <testcase name="API should not open on target mouseenter when interaction=&quot;off&quot;" time="0.01" classname="Coral.Tooltip"/>
  <testcase name="API #content should set content" time="0.001" classname="Coral.Tooltip"/>
  <testcase name="API #open should open when target element is focused" time="0.004" classname="Coral.Tooltip"/>
  <testcase name="API #open should not display the tooltip until the specified delay" time="0.002" classname="Coral.Tooltip"/>
  <testcase name="API #target should remove and add target listeners when target changed" time="0.004" classname="Coral.Tooltip"/>
  <testcase name="API #target should be hidden when focusout triggered on the target element" time="0.014" classname="Coral.Tooltip"/>
  <testcase name="API #target should clear any remaining timeouts when focusout triggered on the target element" time="0.007" classname="Coral.Tooltip"/>
  <testcase name="API #interaction should not open on target mouseenter when interaction=&quot;off&quot;" time="0.002" classname="Coral.Tooltip"/>
  <testcase name="Implementation Details should support multiple tooltips on the same target" time="0.004" classname="Coral.Tooltip"/>
  <testcase name="Implementation Details should not set the tabindex attribute on a target element which already has a tabindex attribute" time="0.002" classname="Coral.Tooltip"/>
  <testcase name="Namespace should be defined" time="0.001" classname="Coral.Tree"/>
  <testcase name="Namespace Variants should be defined" time="0" classname="Coral.Tree"/>
  <testcase name="Instantiation should be possible to clone using markup" time="0" classname="Coral.Tree"/>
  <testcase name="Instantiation should be possible to clone nested tree using markup" time="0.005" classname="Coral.Tree"/>
  <testcase name="Instantiation should be possible to clone tree with interactive elements" time="0.001" classname="Coral.Tree"/>
  <testcase name="Instantiation should be possible to clone using js" time="0.003" classname="Coral.Tree"/>
  <testcase name="API #variant should have default variant drilldown" time="0" classname="Coral.Tree"/>
  <testcase name="API #variant should be possible to set variant through API" time="0" classname="Coral.Tree"/>
  <testcase name="API #variant should change the variant after initialized" time="0" classname="Coral.Tree"/>
  <testcase name="API #expanded should be possible to expand collapse items in Tree" time="0.005" classname="Coral.Tree"/>
  <testcase name="API #parent should be readonly" time="0.005" classname="Coral.Tree"/>
  <testcase name="API #parent should retrieve the parent tree" time="0.01" classname="Coral.Tree"/>
  <testcase name="API #selected should be possible to select items in Tree" time="0.004" classname="Coral.Tree"/>
  <testcase name="API #selected should be possible to select and expand same item in Tree" time="0.004" classname="Coral.Tree"/>
  <testcase name="API #expandAll should be possible to expand all items in Tree" time="0.004" classname="Coral.Tree"/>
  <testcase name="API #collapseAll should be possible to collapse all items in Tree" time="0.004" classname="Coral.Tree"/>
  <testcase name="API #disabled should be possible to enable/disable item in Tree" time="0.005" classname="Coral.Tree"/>
  <testcase name="API #selectedItems should retrieve all selected items included nested ones" time="0.01" classname="Coral.Tree"/>
  <testcase name="API #selectedItem should retrieve the first selected item" time="0.008" classname="Coral.Tree"/>
  <testcase name="API #multiple should not allow to select multiple items" time="0.005" classname="Coral.Tree"/>
  <testcase name="API #multiple should select the last item if multiple is changed to false" time="0.005" classname="Coral.Tree"/>
  <testcase name="API #items should be readOnly" time="0.001" classname="Coral.Tree"/>
  <testcase name="API #items should get all the items with getAll()" time="0.004" classname="Coral.Tree"/>
  <testcase name="API #items should remove all the items with clear()" time="0.004" classname="Coral.Tree"/>
  <testcase name="API #items should add items using add()" time="0.004" classname="Coral.Tree"/>
  <testcase name="Markup #variant should be possible to set variant through markup" time="0.001" classname="Coral.Tree"/>
  <testcase name="Markup #selected should be possible to select item using markup" time="0.006" classname="Coral.Tree"/>
  <testcase name="Markup #expanded should be possible to expand item using markup" time="0.003" classname="Coral.Tree"/>
  <testcase name="Markup #disabled should be possible to disable item using markup" time="0.003" classname="Coral.Tree"/>
  <testcase name="User Interaction should expand/collapse item in tree when expand/collapse icon is clicked" time="0.008" classname="Coral.Tree"/>
  <testcase name="User Interaction should select item in tree when header is clicked" time="0.006" classname="Coral.Tree"/>
  <testcase name="User Interaction should focus the first item via keyboard" time="0.003" classname="Coral.Tree"/>
  <testcase name="User Interaction should focus the last item via keyboard" time="0.011" classname="Coral.Tree"/>
  <testcase name="User Interaction should focus the next item via keyboard" time="0.007" classname="Coral.Tree"/>
  <testcase name="User Interaction should focus the previous item via keyboard" time="0.006" classname="Coral.Tree"/>
  <testcase name="User Interaction should focus the next edge item via keyboard" time="0.008" classname="Coral.Tree"/>
  <testcase name="User Interaction should focus the previous edge item via keyboard" time="0.006" classname="Coral.Tree"/>
  <testcase name="User Interaction should focus the sibling item via keyboard (nested)" time="0.013" classname="Coral.Tree"/>
  <testcase name="User Interaction should set a new focusable item if the current one is disabled" time="0.004" classname="Coral.Tree"/>
  <testcase name="User Interaction should set a new focusable item if the current one is hidden" time="0.007" classname="Coral.Tree"/>
  <testcase name="User Interaction should expand the tree item with key:enter" time="0.014" classname="Coral.Tree"/>
  <testcase name="User Interaction should select the tree item with key:space" time="0.007" classname="Coral.Tree"/>
  <testcase name="Events #coral-collection:add should be triggered with add()" time="0.006" classname="Coral.Tree"/>
  <testcase name="Events #coral-collection:add should be triggered with add() for nested items" time="0.009" classname="Coral.Tree"/>
  <testcase name="Events #coral-collection:remove should be triggered with remove()" time="0.015" classname="Coral.Tree"/>
  <testcase name="Events #coral-collection:remove should be triggered with remove() for nested items" time="0.017" classname="Coral.Tree"/>
  <testcase name="Events #coral-tree:change should trigger a change event on selecting an item" time="0.004" classname="Coral.Tree"/>
  <testcase name="Events #coral-tree:change should trigger a change event on deselecting an item" time="0.006" classname="Coral.Tree"/>
  <testcase name="Events #coral-tree:change should trigger a change event on changing the selection" time="0.007" classname="Coral.Tree"/>
  <testcase name="Events #coral-tree:change should return an array for selection and oldSelection if multiple=true" time="0.018" classname="Coral.Tree"/>
  <testcase name="Events #coral-tree:change should trigger a change event on changing multiple to false" time="0.008" classname="Coral.Tree"/>
  <testcase name="Events #coral-tree:expand should trigger the event if an item is expanded" time="0.368" classname="Coral.Tree"/>
  <testcase name="Events #coral-tree:collapse should trigger the event if an item is collapsed" time="0.377" classname="Coral.Tree"/>
  <testcase name="Implementation Details should have right role set" time="0" classname="Coral.Tree"/>
  <testcase name="Implementation Details should have right classes set" time="0.001" classname="Coral.Tree"/>
  <testcase name="Implementation Details should generate header and subtree for tree item with right classes" time="0" classname="Coral.Tree"/>
  <testcase name="#InteractiveElements should not select item when checkbox checked" time="0.012" classname="Coral.Tree"/>
  <testcase name="#InteractiveElements should not select item when select is selected" time="0.014" classname="Coral.Tree"/>
  <testcase name="#InteractiveElements should select item when button is selected" time="0.013" classname="Coral.Tree"/>
  <testcase name="#InteractiveElements should select item when textarea is focused" time="0.012" classname="Coral.Tree"/>
  <testcase name="#InteractiveElements should be possible to select items in an interactive tree" time="0.004" classname="Coral.Tree"/>
  <testcase name="#InteractiveElements should not select the item if the radio is selected" time="0.011" classname="Coral.Tree"/>
  <testcase name="#InteractiveElements should be possible to expand items in an interactive tree" time="0.005" classname="Coral.Tree"/>
  <testcase name="Namespace should define the variants in an enum" time="0.001" classname="Coral.Wait"/>
  <testcase name="Namespace should define the sizes in an enum" time="0" classname="Coral.Wait"/>
  <testcase name="Instantiation should be possible using new" time="0.001" classname="Coral.Wait"/>
  <testcase name="Markup #centered should be initially false" time="0" classname="Coral.Wait"/>
  <testcase name="Markup #centered should set centered" time="0.001" classname="Coral.Wait"/>
  <testcase name="Markup #centered should still be centered" time="0" classname="Coral.Wait"/>
  <testcase name="Markup #size should default to size small" time="0.001" classname="Coral.Wait"/>
  <testcase name="Markup #size should be able to set to large" time="0" classname="Coral.Wait"/>
  <testcase name="Markup #size should be able to set to medium" time="0" classname="Coral.Wait"/>
  <testcase name="Markup #variant should default to Coral.Wait.variant.DEFAULT" time="0" classname="Coral.Wait"/>
  <testcase name="Markup #variant should set the new variant" time="0" classname="Coral.Wait"/>
  <testcase name="Markup #variant should not add class for empty variant" time="0" classname="Coral.Wait"/>
  <testcase name="Markup #variant should not add class for invalid variant" time="0" classname="Coral.Wait"/>
  <testcase name="Markup #variant should remove variant classnames when variant changes" time="0.001" classname="Coral.Wait"/>
  <testcase name="API should be able to set large and centered at the same time" time="0" classname="Coral.Wait"/>
  <testcase name="API should be able to set medium and centered at the same time" time="0.001" classname="Coral.Wait"/>
  <testcase name="API #centered should default to false" time="0" classname="Coral.Wait"/>
  <testcase name="API #centered should be centered" time="0" classname="Coral.Wait"/>
  <testcase name="API #size should default to small" time="0" classname="Coral.Wait"/>
  <testcase name="API #size can be set to large" time="0" classname="Coral.Wait"/>
  <testcase name="API #size can be set to medium" time="0" classname="Coral.Wait"/>
  <testcase name="API #hidden should default to false" time="0" classname="Coral.Wait"/>
  <testcase name="API #hidden should hide component on false" time="0.001" classname="Coral.Wait"/>
  <testcase name="Namespace should be defined" time="0" classname="Coral.WizardView"/>
  <testcase name="Instantiation should be possible using new" time="0.001" classname="Coral.WizardView"/>
  <testcase name="Instantiation should be possible using createElement" time="0.001" classname="Coral.WizardView"/>
  <testcase name="Instantiation should be possible using markup" time="0" classname="Coral.WizardView"/>
  <testcase name="Instantiation should select the correct step and panel when instantiated from markup" time="0.016" classname="Coral.WizardView"/>
  <testcase name="Instantiation should select the correct step and panel when instantiated from nested markup" time="0.038" classname="Coral.WizardView"/>
  <testcase name="Instantiation should be possible via clone using markup" time="0" classname="Coral.WizardView"/>
  <testcase name="Instantiation should be possible via clone using js" time="0.001" classname="Coral.WizardView"/>
  <testcase name="API #panelStacks should provide a reference to all panelStacks" time="0" classname="Coral.WizardView"/>
  <testcase name="API #panelStacks should add new panelStacks to the collection" time="0.001" classname="Coral.WizardView"/>
  <testcase name="API #panelStacks should select the correct panel when a panelStack is added using the collections API" time="0.007" classname="Coral.WizardView"/>
  <testcase name="API #panelStacks should select the correct panel when a panelStack is added using appendChild" time="0.012" classname="Coral.WizardView"/>
  <testcase name="API #panelStacks should support nested WizardViews" time="0.004" classname="Coral.WizardView"/>
  <testcase name="API #stepLists should provide a reference to all stepLists" time="0" classname="Coral.WizardView"/>
  <testcase name="API #stepLists should add new stepLists to the collection" time="0.008" classname="Coral.WizardView"/>
  <testcase name="API #stepLists should select the correct panel when a stepList is added using the collections API" time="0.018" classname="Coral.WizardView"/>
  <testcase name="API #stepLists should select the correct panel when a stepList is added using appendChild" time="0.023" classname="Coral.WizardView"/>
  <testcase name="Events coral-wizardview:change should trigger a coral-wizardview:change event when an item is selected" time="0.009" classname="Coral.WizardView"/>
  <testcase name="Events coral-wizardview:change should trigger an event when next() is called" time="0.014" classname="Coral.WizardView"/>
  <testcase name="Events coral-wizardview:change should not trigger an event when next() is called and there are no steplists" time="0.001" classname="Coral.WizardView"/>
  <testcase name="Events coral-wizardview:change should trigger an event when previous() is called" time="0.015" classname="Coral.WizardView"/>
  <testcase name="Events coral-wizardview:change should not trigger an event when previous() is called and there are no steplists" time="0.001" classname="Coral.WizardView"/>
  <testcase name="Events coral-wizardview:change should not trigger an event when next() is called and it is already the last item" time="0.014" classname="Coral.WizardView"/>
  <testcase name="Events coral-wizardview:change should not trigger an event when previous() is called and it is already in the first item" time="0.01" classname="Coral.WizardView"/>
  <testcase name="Events coral-wizardview:change should have all panels up to date once the event is triggered" time="0.016" classname="Coral.WizardView"/>
  <testcase name="User Interaction should show go to the next step when a button is clicked" time="0.02" classname="Coral.WizardView"/>
  <testcase name="User Interaction should show go to the previous step when a button is clicked" time="0.023" classname="Coral.WizardView"/>
  <testcase name="User Interaction should control the right content when nested" time="0.031" classname="Coral.WizardView"/>
  <testcase name="Implementation Details should deselect the panel if there if there is no matching step" time="0.014" classname="Coral.WizardView"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.004" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.006" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.008" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.028" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0.002" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.018" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.004" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.002" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.003" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0.002" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.016" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0.002" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.014" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0.003" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.024" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.003" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.003" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.01" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0.002" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.009" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.008" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.002" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.002" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.002" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.003" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.002" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.002" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.002" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.003" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.002" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.002" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.003" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.005" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.002" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.005" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.006" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.003" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.002" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.004" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.002" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.003" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.002" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.002" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.002" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.002" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.003" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.004" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.005" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0.001" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0.012" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same members" time="0" classname="testComponentClone"/>
  <testcase name="cloned classname should have the same length" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same legnth" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have the same tagname" time="0" classname="testComponentClone"/>
  <testcase name="cloned children should have matching classnames" time="0" classname="testComponentClone"/>
  <system-out>
    <![CDATA[Firefox 56.0.0 (Mac OS X 10.12.0) WARN: 'Custom Elements: `Element#attachShadow` was not patched.'
,Chrome 61.0.3163 (Mac OS X 10.12.6) SLOW 0.917 secs: Coral.commons #transitionEnd per default transitionEnd is automatically unregistered after one callback
,Chrome 61.0.3163 (Mac OS X 10.12.6) SLOW 0.549 secs: Coral.commons #removeResizeListener should be possible to remove a resize listener if no longer needed
,Firefox 56.0.0 (Mac OS X 10.12.0) SLOW 0.921 secs: Coral.commons #transitionEnd per default transitionEnd is automatically unregistered after one callback
,Firefox 56.0.0 (Mac OS X 10.12.0) SLOW 0.527 secs: Coral.commons #removeResizeListener should be possible to remove a resize listener if no longer needed
,Chrome 61.0.3163 (Mac OS X 10.12.6) WARN: '`preventOverflow` modifier is required by `hide` modifier in order to work, be sure to include it before `hide`!'
,Chrome 61.0.3163 (Mac OS X 10.12.6) WARN: '`preventOverflow` modifier is required by `hide` modifier in order to work, be sure to include it before `hide`!'
,Chrome 61.0.3163 (Mac OS X 10.12.6) WARN: 'Coral.Overlay: alignAt and alignMy have been deprecated. Please use the offset, inner and placement properties instead.'
,Chrome 61.0.3163 (Mac OS X 10.12.6) WARN: 'Coral.Overlay: alignAt and alignMy have been deprecated. Please use the offset, inner and placement properties instead.'
,Firefox 56.0.0 (Mac OS X 10.12.0) WARN: '`preventOverflow` modifier is required by `hide` modifier in order to work, be sure to include it before `hide`!'
,Firefox 56.0.0 (Mac OS X 10.12.0) WARN: '`preventOverflow` modifier is required by `hide` modifier in order to work, be sure to include it before `hide`!'
,Firefox 56.0.0 (Mac OS X 10.12.0) WARN: 'Coral.Overlay: alignAt and alignMy have been deprecated. Please use the offset, inner and placement properties instead.'
,Firefox 56.0.0 (Mac OS X 10.12.0) WARN: 'Coral.Overlay: alignAt and alignMy have been deprecated. Please use the offset, inner and placement properties instead.'
,Chrome 61.0.3163 (Mac OS X 10.12.6) WARN: '`preventOverflow` modifier is required by `hide` modifier in order to work, be sure to include it before `hide`!'
,Chrome 61.0.3163 (Mac OS X 10.12.6) WARN: '`preventOverflow` modifier is required by `hide` modifier in order to work, be sure to include it before `hide`!'
,Chrome 61.0.3163 (Mac OS X 10.12.6) WARN: '`preventOverflow` modifier is required by `hide` modifier in order to work, be sure to include it before `hide`!'
,Chrome 61.0.3163 (Mac OS X 10.12.6) WARN: '`preventOverflow` modifier is required by `hide` modifier in order to work, be sure to include it before `hide`!'
,Firefox 56.0.0 (Mac OS X 10.12.0) WARN: '`preventOverflow` modifier is required by `hide` modifier in order to work, be sure to include it before `hide`!'
,Firefox 56.0.0 (Mac OS X 10.12.0) WARN: '`preventOverflow` modifier is required by `hide` modifier in order to work, be sure to include it before `hide`!'
,Firefox 56.0.0 (Mac OS X 10.12.0) WARN: '`preventOverflow` modifier is required by `hide` modifier in order to work, be sure to include it before `hide`!'
,Firefox 56.0.0 (Mac OS X 10.12.0) WARN: '`preventOverflow` modifier is required by `hide` modifier in order to work, be sure to include it before `hide`!'
,Firefox 56.0.0 (Mac OS X 10.12.0) SLOW 0.677 secs: Coral.QuickActions User Interaction should return focus to the target when launched via keyboard
,Firefox 56.0.0 (Mac OS X 10.12.0) WARN: '`preventOverflow` modifier is required by `hide` modifier in order to work, be sure to include it before `hide`!'
,Firefox 56.0.0 (Mac OS X 10.12.0) SLOW 0.79 secs: Coral.SelectList User Interaction should focus the item which contains text starting with the letter O
,Chrome 61.0.3163 (Mac OS X 10.12.6) WARN: '`preventOverflow` modifier is required by `hide` modifier in order to work, be sure to include it before `hide`!'
,Chrome 61.0.3163 (Mac OS X 10.12.6) WARN: '`preventOverflow` modifier is required by `hide` modifier in order to work, be sure to include it before `hide`!'
,Chrome 61.0.3163 (Mac OS X 10.12.6) SLOW 0.813 secs: Coral.SelectList User Interaction should focus the item which contains text starting with the letter O

]]>
  </system-out>
  <system-err/>
</testsuite>