/**
  Element: button
  CUI button styles
*/

// Button dimesions
@button-text-size: 15*@px; // TBD: make rem so they stay the same size, or let them scale with fonts?
@button-text-large-size: 17*@px;
@button-text-color: rgb(255, 255, 255);
@button-line-height: 16*@px;

// Button: Blue
@button-primary-border-color: rgb(0, 30, 70);
@button-primary-gradient-start-color: rgb(50, 135, 210);
@button-primary-gradient-end-color: rgb(50, 120, 190);

// Button: Gray
@button-default-border-color: rgb(30, 30, 30);
@button-default-gradient-start-color: rgb(180, 180, 180);
@button-default-gradient-end-color: rgb(150, 150, 150);

// Button: Red
@button-warning-border-color: rgb(70, 15, 15);
@button-warning-gradient-start-color: rgb(250, 90, 80);
@button-warning-gradient-end-color: rgb(225, 65, 50);

// Button: Quiet
@button-quiet-border-color: rgb(70, 15, 15);
@button-quiet-gradient-start-color: rgb(250, 90, 80);
@button-quiet-gradient-end-color: rgb(225, 65, 50);

// Button: Disabled
@button-disabled-text-color: rgb(180, 180, 180);
@button-disabled-icon-color: rgba(0, 0, 0, 0.15);
@button-disabled-border-color: rgb(210, 210, 210);
@button-disabled-background-color: rgb(230, 230, 230);

button,
.button {

  .component-single-line;

  min-width: 110*@px;

  padding: 10*@px 15*@px;
  border: @px solid;
  border-color: fade(@button-default-border-color, 65%);

  .bold-text;

  font-size: @button-text-size;
  line-height: @button-line-height;
  height: @component-single-line-height;

  color: @button-text-color;
  text-decoration: none; // resets underline on anchor
  text-align: center;

  text-shadow: 0 -1*@px 0 rgba(0, 0, 0, 0.40);

  cursor: pointer; // gives hand cursor

  .gradient(@button-default-gradient-start-color, @button-default-gradient-end-color);

  &:hover {
    text-decoration: none; // resets underline on anchor
    .gradient(@button-default-gradient-start-color, @button-default-gradient-start-color);
  }

  &:active {
    border-color: fade(@button-default-border-color, 75%);
    .gradient(@button-default-gradient-end-color, @button-default-gradient-end-color);

    .box-shadow(inset 0 0 4*@px rgba(0, 0, 0, 0.15));
  }

  &:focus {
    .glow();
    text-decoration: none;
  }
  
  // A square button for buttons attached to form fields with icons in them
  &.button-square,
  &.square {

    // special width for icon only buttons.
    width: 50*@px;
    // allows the icon to be centered.
    padding: 0;
    // resets the min-width
    min-width: 0;

    i[class^="icon-"],
    i[class*=" icon-"] {
      margin-right: 0; // Margin does not display well in buttons without text
    }
  }

  // call to action button.
  &.button-large,
  &.large {
    font-size: @button-text-large-size;
    min-width: 135*@px;
    padding: 14*@px 20*@px;
    height: 46*@px;
  }

  &.button-block,
  &.block {
    display: block;
    // spans to the width of the container
    width: 100%;
    // the container should set the desired margin
    margin-left: 0;
    margin-right: 0;
  }

  &.quiet {
    border-color: transparent;
    background: none;
    filter: none;

    .normal-text;

    // resets the min-width property.
    min-width: 0;

    color: @font-base-color;
    text-shadow: none;

    &:hover {
      background: none;
      text-decoration: underline;
    }

    &:active {
      background: none;
      .box-shadow(none);
    }

    &[disabled],
    &.disabled {
      &, &:active, &:hover {
        background: none;
        border-color: transparent;
        text-decoration: none;
      }
    }
  }
}

// Primary button
button.primary:not(.disabled):not([disabled]),
.button.primary:not(.disabled):not([disabled]) {
  border-color: fade(@button-primary-border-color, 70%);

  .gradient(@button-primary-gradient-start-color, @button-primary-gradient-end-color);

  &:hover {
    .gradient(@button-primary-gradient-start-color, @button-primary-gradient-start-color);
  }

  &:active {
    border-color: fade(@button-primary-border-color, 80%);
    .gradient(@button-primary-gradient-end-color, @button-primary-gradient-end-color);
  }
}

// Warning button
button.warning:not(.disabled):not([disabled]),
.button.warning:not(.disabled):not([disabled]) {
  border-color: fade(@button-warning-border-color, 70%);

  .gradient(@button-warning-gradient-start-color, @button-warning-gradient-end-color);


  &:hover {
    .gradient(@button-warning-gradient-start-color, @button-warning-gradient-start-color);
  }

  &:active {
    border-color: fade(@button-warning-border-color, 80%);
    .gradient(@button-warning-gradient-end-color, @button-warning-gradient-end-color);
  }
}

// Disabled
button.disabled,
button[disabled],
.button.disabled,
button.disabled:active,
button[disabled]:active,
.button.disabled:active,
button.disabled:hover,
button[disabled]:hover,
.button.disabled:hover {
  cursor: default;

  text-shadow: none;
  .box-shadow(none);

  color: @button-disabled-text-color;
  border-color: @button-disabled-border-color;
  background: @button-disabled-background-color;

  i[class^="icon-"],
  i[class*=" icon-"] {
    &, &:before {
      color: @button-disabled-icon-color;
      opacity: 1;
    }
  }
}
  