+document-section('JavaScript Examples')

  +document-subsection('JS Initialization')

    p.
      The following examples demonstrate how to initialize <code>coral-dragaction</code> using pure JavaScript.

    +markup-example().
      <div style="height:200px;width:200px;background: #eee; overflow:scroll;">
        <span id="dragactionJS">I can not be dragged out</span>
      </div>

    p.
      Finally we can initialize Coral.DragAction using only JavaScript.

    script#dragaction-example.
      document.addEventListener('DOMContentLoaded', function() {
        var dragAction = new Coral.DragAction('#dragactionJS');
        dragAction.containment = true;
      });

    pre.docs-Example-snippet.prettyprint(data-src-id='dragaction-example')

  +document-subsection('Observing Events')
    p.
      DragActions create many additional events, which allow for more fine grained interactions and customizations.
      Those events are triggered on the source of the drag'n'drop. See the detailed documentation below for more information.

    p The following code logs some of the supported events.

    script#dragaction-logging.
      document.addEventListener('DOMContentLoaded', function() {
        var console = $("#dragaction-log");

        // Events generated on drag start
        $('#dragaction')[0].addEventListener('coral-dragaction:dragstart', function (e) {
          console.log('Start on position: [' + e.detail.pageX + ',' + e.detail.pageY + ']');
        });

        // Events generated on drag
        $('#dragaction')[0].addEventListener('coral-dragaction:drag', function (e) {
          console.log('Drag on position: [' + e.detail.pageX + ',' + e.detail.pageY + ']');
        });

        // Events generated on drag end
        $('#dragaction')[0].addEventListener('coral-dragaction:dragend', function (e) {
          console.log('End on position: [' + e.detail.pageX + ',' + e.detail.pageY + ']');
        });

        // Events generated on dragenter
        $('#dragaction')[0].addEventListener('coral-dragaction:dragenter', function (e) {
          console.log('Entered element with id: ' + e.detail.dropElement.id);
        });

        // Events generated on dragover
        $('#dragaction')[0].addEventListener('coral-dragaction:dragover', function (e) {
          console.log('Over element with id: ' + e.detail.dropElement.id);
        });

        // Events generated on dragleave
        $('#dragaction')[0].addEventListener('coral-dragaction:dragleave', function (e) {
          console.log('Left element with id: ' + e.detail.dropElement.id);
        });

        // Events generated on drop
        $('#dragaction')[0].addEventListener('coral-dragaction:drop', function (e) {
          console.log('Drop on element with id: ' + e.detail.dropElement.id);
          e.detail.dropElement.style.background = 'beige';
        });

      });

    pre.docs-Example-snippet.prettyprint(data-src-id='dragaction-logging')
    +log("dragaction-log")

  +document-subsection('Typical event order')

    p.
      In the simplest successful use case - dragging an element, moving it to the target area and dropping it
      - the following events will occur:

    ol
      li.
        <code>coral-dragaction:dragstart</code>
      li.
        <code>coral-dragaction:drag</code>
      li.
        <code>coral-dragaction:dragenter</code>
      li.
        <code>coral-dragaction:dragover</code> (multiple times)
      li.
        <code>coral-dragaction:drop</code>
      li.
        <code>coral-dragaction:dragleave</code>
      li.
        <code>coral-dragaction:dragend</code>
