+document-section('JavaScript Examples')
  p.
    The following examples demonstrate usage of the JavaScript API's for
    #{component.displayName}.

  #constructorExample.
    <script>
    $(document).ready(function() {
      var datepicker = new Coral.Datepicker().set({
        id: 'myDatepicker',
        min: '2015-06-27T00:00+02:00',
        max: '2015-08-27T00:00+02:00',
        valueAsDate: new Date(2015,6,27)
      });

      document.getElementById('constructorExample').appendChild(datepicker);
    })
    </script>

  p.
    The following JavaScript manually initializes the component on page
    initialization and adds it to the DOM.

  +example-pre-only('constructorExample')

  +document-subsection('Getting the value')
    | The following will display the above component's value in an alert.

  #getValueExample.
    <script>

      function displayValue() {
        var value = document.querySelector('#myDatepicker').value;
        alert('The value is ' + value + '.');
      }
    </script>
  +example-pre-only('getValueExample')
  div.
    <button id='getValueButton' class='coral-Button' onclick='displayValue()'>Get Value</button>

  +document-subsection('Setting the value', 'The following will set the above component\'s value to July 26th 2015.')
  #setValueExample.
    <script>
      function setValue() {
        var datepicker = document.querySelector('#myDatepicker');
        datepicker.valueAsDate = new Date(2015,06,26);
      }
    </script>
  +example-pre-only('setValueExample')
  div.
    <button id='getValueButton' class='coral-Button' onclick='setValue()'>Set Value</button>

  +document-subsection('Responding to user interaction')
    | The following example shows how to detect changes performed by the user.

  #datepickerInteractionExample.
    <script>
      $(document).ready(function () {
        var eventLog = $('#datepickerLog');
        document.querySelector('#myDatepicker').on('change', function(event) {
          var value = event.target.value;
          eventLog.log('Datepicker new value: ' + value);
        });
      });
    </script>
  +example-pre-only('datepickerInteractionExample')

  +document-subsection('Working with locales')

  #localizationExample.
    <script>
    $(document).ready(function() {
      moment.locale(document.documentElement.lang || window.navigator.language || 'en');
      var datepicker = new Coral.Datepicker().set({
        id: 'myDatepicker',
        min: '2015-06-27T00:00+02:00',
        max: '2015-08-27T00:00+02:00',
        valueAsDate: new Date(2015,6,27),
        displayFormat: moment().format('L'),
        startDay : moment.localeData().firstDayOfWeek()
      });
    })
    </script>
  p.
    The following example sets up the component to use the appropriate date formatting for the specified page locale (e.g. &lt;html lang="fr-FR"&gt;). Requires <a class='coral-Link' href='http://momentjs.com'>moment-with-locales.js</a>.

  +example-pre-only('localizationExample')

  p.
    Note: moment-with-locales.js provides support to close to 100 locales. If maintaining minimal footprint is critical to your product, it's possible to generate a custom version (moment-with-locales.custom.js) that limits support to a set of languages you can specify.
  +log('datepickerLog')
